//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SimpleConsoleApplication.WebReferenceHoneywellWSDL {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DeviceConfiguration", Namespace="http://10.10.10.5:64907/DeviceConfiguration.wsdl")]
    public partial class DeviceConfiguration : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetServiceVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitChangesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DiscardChangesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDeviceDefaultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSoftwareVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBIOSVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBootloaderVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSerialNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConfigStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReadyToWorkStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUUIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeviceLocateStartOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeviceLocateStopOperationCompleted;
        
        private System.Threading.SendOrPostCallback RebootDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSerialConfigurationEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSerialConfigurationEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSerialLoginEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSerialLoginEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetExternalUSBEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExternalUSBEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SyncFileSystemsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEthernetInterfaceCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEthernetIPv4DHCPEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEthernetIPv4DHCPEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEthernetIPv4StaticAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEthernetIPv4StaticAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEthernetIPv4CurrentAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEthernetIPv4StaticSubnetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEthernetIPv4StaticSubnetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEthernetIPv4CurrentSubnetOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEthernetIPv4StaticRouterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEthernetIPv4StaticRouterOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEthernetIPv6AutoConfigureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEthernetIPv6AutoConfigureOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEthernetIPv6StaticAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEthernetIPv6StaticAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEthernetIPv6CurrentAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEthernetIPv6StaticSubnetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEthernetIPv6StaticSubnetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEthernetIPv6CurrentSubnetOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEthernetIPv6StaticRouterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEthernetIPv6StaticRouterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEthernetLinkLocalAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEthernetMACOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessInterfaceCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessSSIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessSSIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessMACOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessFragmentationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessFragmentationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessMediumReservationEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessMediumReservationEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessMediumReservationThresholdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessMediumReservationThresholdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessRadioModeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessRadioModeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIPv4CurrentRouterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIPv6CurrentRouterOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessIPv4DHCPEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessIPv4DHCPEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessIPv4StaticAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessIPv4StaticAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessIPv4CurrentAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessIPv4StaticSubnetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessIPv4StaticSubnetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessIPv4CurrentSubnetOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessIPv4StaticRouterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessIPv4StaticRouterOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessIPv6AutoConfigureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessIPv6AutoConfigureOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessIPv6StaticAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessIPv6StaticAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessIPv6CurrentAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessIPv6StaticSubnetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessIPv6StaticSubnetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessIPv6CurrentSubnetOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessIPv6StaticRouterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessIPv6StaticRouterOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessSecurityModeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessSecurityModeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessWEPAuthenticationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessWEPAuthenticationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessStaticWEPKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessStaticWEPKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessStaticWEPTransmitKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessStaticWEPTransmitKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessMixedCellEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessMixedCellEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessPSKOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessPSKOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWireless802xUsernameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWireless802xUsernameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWireless802xPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWireless802xPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessMinimumWPAMulticastEncryptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessMinimumWPAMulticastEncryptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessMinimumWPA2MulticastEncryptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessMinimumWPA2MulticastEncryptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWireless802xRejectExpiredCertificatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWireless802xRejectExpiredCertificatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWireless802xValidateCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWireless802xValidateCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWireless802xServerCommonNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWireless802xServerCommonNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessWPAPairwiseKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessWPAPairwiseKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessWPA2PairwiseKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessWPA2PairwiseKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWirelessEAPAuthenticationMethodOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWirelessEAPAuthenticationMethodOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetHostnameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHostnameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSupportedDNSServerCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDNSServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDNSServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSupportedDNSSuffixCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDNSSuffixOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDNSSuffixOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSupportedSyslogServerCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSyslogServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSyslogServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSupportedSNTPServerCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSNTPServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSNTPServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTimeZoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTimeZoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTimeZoneListOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUTCTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUTCTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSystemDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSystemDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSupportedCIFSMountCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCIFSMountOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveCIFSMountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCIFSMountsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCIFSMountStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCIFSMountDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSupportedNFSMountCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddNFSMountOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveNFSMountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNFSMountsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNFSMountStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNFSMountDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAvalancheAccessEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvalancheAccessEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAvalancheAgentNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvalancheAgentNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSmartSystemsEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSmartSystemsEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSmartSystemsServerNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSmartSystemsServerNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSNMPEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSNMPEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSNMPCommunityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSNMPCommunityOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSNMPTrapTargetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSNMPTrapTargetOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSNMPv3UsernameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSNMPv3UsernameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSNMPv3PasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSNMPv3PasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSNMPAuthenticationTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSNMPAuthenticationTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSNMPPrivacyTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSNMPPrivacyTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSSHServerEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSSHServerEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFTPServerEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFTPServerEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTelnetServerEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTelnetServerEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBonjourAdvertisementEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBonjourAdvertisementEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUPnPDiscoveryEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUPnPDiscoveryEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWebserverInsecureEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebserverInsecureEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWebserverSecureEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebserverSecureEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDeviceWebServicesInsecureEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeviceWebServicesInsecureEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDeviceWebServicesSecureEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeviceWebServicesSecureEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCIFSServiceEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCIFSServiceEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCIFSServiceUsernameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCIFSServiceUsernameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCIFSServicePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCIFSServicePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback EdgewareSetAutoStartOperationCompleted;
        
        private System.Threading.SendOrPostCallback EdgewareGetAutoStartOperationCompleted;
        
        private System.Threading.SendOrPostCallback EdgewareStartApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback EdgewareStopApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback EdgewareUninstallApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserappUninstallApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback EdgewareGetInstalledApplicationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback EdgewareGetApplicationStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback EdgewareSetSyslogRedirectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback EdgewareGetSyslogRedirectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIExternalConnectionsEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIExternalConnectionsEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIListeningPortOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIListeningPortOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRILoggingEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRILoggingEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetLLRPSecureEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLLRPSecureEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetLLRPInsecureEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLLRPInsecureEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback LLRPTerminateClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIOverSerialEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIOverSerialEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRISerialBaudRateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRISerialBaudRateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeTagTypeEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeTagTypeEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeRDTRIESOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeRDTRIESOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeWRTRIESOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeWRTRIESOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeLOCKTRIESOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeLOCKTRIESOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeFIELDSEPOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeFIELDSEPOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeIDREPORTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeIDREPORTOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeNOTAGREPORTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeNOTAGREPORTOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeRPTTIMEOUTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeRPTTIMEOUTOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeSELECTTRIESOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeSELECTTRIESOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeUNSELECTTRIESOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeUNSELECTTRIESOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeINITIALQOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeINITIALQOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeTIMEOUTMODEOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeTIMEOUTMODEOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeINITTRIESOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeINITTRIESOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeIDTRIESOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeIDTRIESOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeANTTRIESOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeANTTRIESOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeIDTIMEOUTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeIDTIMEOUTOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeANTTIMEOUTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeANTTIMEOUTOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeDENSEREADERMODEOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeDENSEREADERMODEOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeEPCC1G2AdvancedModeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeEPCC1G2AdvancedModeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeEPCC1G2PARMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeEPCC1G2PARMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeEPCC1G2PARMSListOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeLBTSCANENABLEOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeLBTSCANENABLEOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeLBTCHANNELOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeLBTCHANNELOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeSESSIONOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeSESSIONOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIPhysicalAntennaCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeAntennaFieldStrengthOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeAntennaFieldStrengthOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBRIAttributeAntennaSequenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBRIAttributeAntennaSequenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrepareFirmwareInstallationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InstallFirmwareOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransferFirmwareOperationCompleted;
        
        private System.Threading.SendOrPostCallback InstallEdgewareApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InstallUserApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransferFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback InstallCertificateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UninstallCertificateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUsernameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsernameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetReadonlyPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReadonlyPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRadiusEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRadiusEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRadiusServerAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRadiusServerAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRadiusServerSecretOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRadiusServerSecretOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetRadiusServerPortOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRadiusServerPortOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DeviceConfiguration() {
            this.Url = global::SimpleConsoleApplication.Properties.Settings.Default.SimpleConsoleApplication_WebReferenceHoneywellWSDL_DeviceConfiguration;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetServiceVersionCompletedEventHandler GetServiceVersionCompleted;
        
        /// <remarks/>
        public event CommitChangesCompletedEventHandler CommitChangesCompleted;
        
        /// <remarks/>
        public event DiscardChangesCompletedEventHandler DiscardChangesCompleted;
        
        /// <remarks/>
        public event SetDeviceDefaultsCompletedEventHandler SetDeviceDefaultsCompleted;
        
        /// <remarks/>
        public event GetSoftwareVersionCompletedEventHandler GetSoftwareVersionCompleted;
        
        /// <remarks/>
        public event GetBIOSVersionCompletedEventHandler GetBIOSVersionCompleted;
        
        /// <remarks/>
        public event GetBootloaderVersionCompletedEventHandler GetBootloaderVersionCompleted;
        
        /// <remarks/>
        public event GetSerialNumberCompletedEventHandler GetSerialNumberCompleted;
        
        /// <remarks/>
        public event GetConfigStringCompletedEventHandler GetConfigStringCompleted;
        
        /// <remarks/>
        public event GetReadyToWorkStateCompletedEventHandler GetReadyToWorkStateCompleted;
        
        /// <remarks/>
        public event GetUUIDCompletedEventHandler GetUUIDCompleted;
        
        /// <remarks/>
        public event DeviceLocateStartCompletedEventHandler DeviceLocateStartCompleted;
        
        /// <remarks/>
        public event DeviceLocateStopCompletedEventHandler DeviceLocateStopCompleted;
        
        /// <remarks/>
        public event RebootDeviceCompletedEventHandler RebootDeviceCompleted;
        
        /// <remarks/>
        public event SetSerialConfigurationEnabledCompletedEventHandler SetSerialConfigurationEnabledCompleted;
        
        /// <remarks/>
        public event GetSerialConfigurationEnabledCompletedEventHandler GetSerialConfigurationEnabledCompleted;
        
        /// <remarks/>
        public event SetSerialLoginEnabledCompletedEventHandler SetSerialLoginEnabledCompleted;
        
        /// <remarks/>
        public event GetSerialLoginEnabledCompletedEventHandler GetSerialLoginEnabledCompleted;
        
        /// <remarks/>
        public event SetExternalUSBEnabledCompletedEventHandler SetExternalUSBEnabledCompleted;
        
        /// <remarks/>
        public event GetExternalUSBEnabledCompletedEventHandler GetExternalUSBEnabledCompleted;
        
        /// <remarks/>
        public event SyncFileSystemsCompletedEventHandler SyncFileSystemsCompleted;
        
        /// <remarks/>
        public event GetEthernetInterfaceCountCompletedEventHandler GetEthernetInterfaceCountCompleted;
        
        /// <remarks/>
        public event SetEthernetIPv4DHCPEnabledCompletedEventHandler SetEthernetIPv4DHCPEnabledCompleted;
        
        /// <remarks/>
        public event GetEthernetIPv4DHCPEnabledCompletedEventHandler GetEthernetIPv4DHCPEnabledCompleted;
        
        /// <remarks/>
        public event SetEthernetIPv4StaticAddressCompletedEventHandler SetEthernetIPv4StaticAddressCompleted;
        
        /// <remarks/>
        public event GetEthernetIPv4StaticAddressCompletedEventHandler GetEthernetIPv4StaticAddressCompleted;
        
        /// <remarks/>
        public event GetEthernetIPv4CurrentAddressCompletedEventHandler GetEthernetIPv4CurrentAddressCompleted;
        
        /// <remarks/>
        public event SetEthernetIPv4StaticSubnetCompletedEventHandler SetEthernetIPv4StaticSubnetCompleted;
        
        /// <remarks/>
        public event GetEthernetIPv4StaticSubnetCompletedEventHandler GetEthernetIPv4StaticSubnetCompleted;
        
        /// <remarks/>
        public event GetEthernetIPv4CurrentSubnetCompletedEventHandler GetEthernetIPv4CurrentSubnetCompleted;
        
        /// <remarks/>
        public event SetEthernetIPv4StaticRouterCompletedEventHandler SetEthernetIPv4StaticRouterCompleted;
        
        /// <remarks/>
        public event GetEthernetIPv4StaticRouterCompletedEventHandler GetEthernetIPv4StaticRouterCompleted;
        
        /// <remarks/>
        public event SetEthernetIPv6AutoConfigureCompletedEventHandler SetEthernetIPv6AutoConfigureCompleted;
        
        /// <remarks/>
        public event GetEthernetIPv6AutoConfigureCompletedEventHandler GetEthernetIPv6AutoConfigureCompleted;
        
        /// <remarks/>
        public event SetEthernetIPv6StaticAddressCompletedEventHandler SetEthernetIPv6StaticAddressCompleted;
        
        /// <remarks/>
        public event GetEthernetIPv6StaticAddressCompletedEventHandler GetEthernetIPv6StaticAddressCompleted;
        
        /// <remarks/>
        public event GetEthernetIPv6CurrentAddressCompletedEventHandler GetEthernetIPv6CurrentAddressCompleted;
        
        /// <remarks/>
        public event SetEthernetIPv6StaticSubnetCompletedEventHandler SetEthernetIPv6StaticSubnetCompleted;
        
        /// <remarks/>
        public event GetEthernetIPv6StaticSubnetCompletedEventHandler GetEthernetIPv6StaticSubnetCompleted;
        
        /// <remarks/>
        public event GetEthernetIPv6CurrentSubnetCompletedEventHandler GetEthernetIPv6CurrentSubnetCompleted;
        
        /// <remarks/>
        public event SetEthernetIPv6StaticRouterCompletedEventHandler SetEthernetIPv6StaticRouterCompleted;
        
        /// <remarks/>
        public event GetEthernetIPv6StaticRouterCompletedEventHandler GetEthernetIPv6StaticRouterCompleted;
        
        /// <remarks/>
        public event GetEthernetLinkLocalAddressCompletedEventHandler GetEthernetLinkLocalAddressCompleted;
        
        /// <remarks/>
        public event GetEthernetMACCompletedEventHandler GetEthernetMACCompleted;
        
        /// <remarks/>
        public event GetWirelessInterfaceCountCompletedEventHandler GetWirelessInterfaceCountCompleted;
        
        /// <remarks/>
        public event SetWirelessEnabledCompletedEventHandler SetWirelessEnabledCompleted;
        
        /// <remarks/>
        public event GetWirelessEnabledCompletedEventHandler GetWirelessEnabledCompleted;
        
        /// <remarks/>
        public event SetWirelessSSIDCompletedEventHandler SetWirelessSSIDCompleted;
        
        /// <remarks/>
        public event GetWirelessSSIDCompletedEventHandler GetWirelessSSIDCompleted;
        
        /// <remarks/>
        public event GetWirelessMACCompletedEventHandler GetWirelessMACCompleted;
        
        /// <remarks/>
        public event SetWirelessFragmentationCompletedEventHandler SetWirelessFragmentationCompleted;
        
        /// <remarks/>
        public event GetWirelessFragmentationCompletedEventHandler GetWirelessFragmentationCompleted;
        
        /// <remarks/>
        public event SetWirelessMediumReservationEnabledCompletedEventHandler SetWirelessMediumReservationEnabledCompleted;
        
        /// <remarks/>
        public event GetWirelessMediumReservationEnabledCompletedEventHandler GetWirelessMediumReservationEnabledCompleted;
        
        /// <remarks/>
        public event SetWirelessMediumReservationThresholdCompletedEventHandler SetWirelessMediumReservationThresholdCompleted;
        
        /// <remarks/>
        public event GetWirelessMediumReservationThresholdCompletedEventHandler GetWirelessMediumReservationThresholdCompleted;
        
        /// <remarks/>
        public event SetWirelessRadioModeCompletedEventHandler SetWirelessRadioModeCompleted;
        
        /// <remarks/>
        public event GetWirelessRadioModeCompletedEventHandler GetWirelessRadioModeCompleted;
        
        /// <remarks/>
        public event GetIPv4CurrentRouterCompletedEventHandler GetIPv4CurrentRouterCompleted;
        
        /// <remarks/>
        public event GetIPv6CurrentRouterCompletedEventHandler GetIPv6CurrentRouterCompleted;
        
        /// <remarks/>
        public event SetWirelessIPv4DHCPEnabledCompletedEventHandler SetWirelessIPv4DHCPEnabledCompleted;
        
        /// <remarks/>
        public event GetWirelessIPv4DHCPEnabledCompletedEventHandler GetWirelessIPv4DHCPEnabledCompleted;
        
        /// <remarks/>
        public event SetWirelessIPv4StaticAddressCompletedEventHandler SetWirelessIPv4StaticAddressCompleted;
        
        /// <remarks/>
        public event GetWirelessIPv4StaticAddressCompletedEventHandler GetWirelessIPv4StaticAddressCompleted;
        
        /// <remarks/>
        public event GetWirelessIPv4CurrentAddressCompletedEventHandler GetWirelessIPv4CurrentAddressCompleted;
        
        /// <remarks/>
        public event SetWirelessIPv4StaticSubnetCompletedEventHandler SetWirelessIPv4StaticSubnetCompleted;
        
        /// <remarks/>
        public event GetWirelessIPv4StaticSubnetCompletedEventHandler GetWirelessIPv4StaticSubnetCompleted;
        
        /// <remarks/>
        public event GetWirelessIPv4CurrentSubnetCompletedEventHandler GetWirelessIPv4CurrentSubnetCompleted;
        
        /// <remarks/>
        public event SetWirelessIPv4StaticRouterCompletedEventHandler SetWirelessIPv4StaticRouterCompleted;
        
        /// <remarks/>
        public event GetWirelessIPv4StaticRouterCompletedEventHandler GetWirelessIPv4StaticRouterCompleted;
        
        /// <remarks/>
        public event SetWirelessIPv6AutoConfigureCompletedEventHandler SetWirelessIPv6AutoConfigureCompleted;
        
        /// <remarks/>
        public event GetWirelessIPv6AutoConfigureCompletedEventHandler GetWirelessIPv6AutoConfigureCompleted;
        
        /// <remarks/>
        public event SetWirelessIPv6StaticAddressCompletedEventHandler SetWirelessIPv6StaticAddressCompleted;
        
        /// <remarks/>
        public event GetWirelessIPv6StaticAddressCompletedEventHandler GetWirelessIPv6StaticAddressCompleted;
        
        /// <remarks/>
        public event GetWirelessIPv6CurrentAddressCompletedEventHandler GetWirelessIPv6CurrentAddressCompleted;
        
        /// <remarks/>
        public event SetWirelessIPv6StaticSubnetCompletedEventHandler SetWirelessIPv6StaticSubnetCompleted;
        
        /// <remarks/>
        public event GetWirelessIPv6StaticSubnetCompletedEventHandler GetWirelessIPv6StaticSubnetCompleted;
        
        /// <remarks/>
        public event GetWirelessIPv6CurrentSubnetCompletedEventHandler GetWirelessIPv6CurrentSubnetCompleted;
        
        /// <remarks/>
        public event SetWirelessIPv6StaticRouterCompletedEventHandler SetWirelessIPv6StaticRouterCompleted;
        
        /// <remarks/>
        public event GetWirelessIPv6StaticRouterCompletedEventHandler GetWirelessIPv6StaticRouterCompleted;
        
        /// <remarks/>
        public event SetWirelessSecurityModeCompletedEventHandler SetWirelessSecurityModeCompleted;
        
        /// <remarks/>
        public event GetWirelessSecurityModeCompletedEventHandler GetWirelessSecurityModeCompleted;
        
        /// <remarks/>
        public event SetWirelessWEPAuthenticationCompletedEventHandler SetWirelessWEPAuthenticationCompleted;
        
        /// <remarks/>
        public event GetWirelessWEPAuthenticationCompletedEventHandler GetWirelessWEPAuthenticationCompleted;
        
        /// <remarks/>
        public event SetWirelessStaticWEPKeyCompletedEventHandler SetWirelessStaticWEPKeyCompleted;
        
        /// <remarks/>
        public event GetWirelessStaticWEPKeyCompletedEventHandler GetWirelessStaticWEPKeyCompleted;
        
        /// <remarks/>
        public event SetWirelessStaticWEPTransmitKeyCompletedEventHandler SetWirelessStaticWEPTransmitKeyCompleted;
        
        /// <remarks/>
        public event GetWirelessStaticWEPTransmitKeyCompletedEventHandler GetWirelessStaticWEPTransmitKeyCompleted;
        
        /// <remarks/>
        public event SetWirelessMixedCellEnabledCompletedEventHandler SetWirelessMixedCellEnabledCompleted;
        
        /// <remarks/>
        public event GetWirelessMixedCellEnabledCompletedEventHandler GetWirelessMixedCellEnabledCompleted;
        
        /// <remarks/>
        public event SetWirelessPSKCompletedEventHandler SetWirelessPSKCompleted;
        
        /// <remarks/>
        public event GetWirelessPSKCompletedEventHandler GetWirelessPSKCompleted;
        
        /// <remarks/>
        public event SetWireless802xUsernameCompletedEventHandler SetWireless802xUsernameCompleted;
        
        /// <remarks/>
        public event GetWireless802xUsernameCompletedEventHandler GetWireless802xUsernameCompleted;
        
        /// <remarks/>
        public event SetWireless802xPasswordCompletedEventHandler SetWireless802xPasswordCompleted;
        
        /// <remarks/>
        public event GetWireless802xPasswordCompletedEventHandler GetWireless802xPasswordCompleted;
        
        /// <remarks/>
        public event SetWirelessMinimumWPAMulticastEncryptionCompletedEventHandler SetWirelessMinimumWPAMulticastEncryptionCompleted;
        
        /// <remarks/>
        public event GetWirelessMinimumWPAMulticastEncryptionCompletedEventHandler GetWirelessMinimumWPAMulticastEncryptionCompleted;
        
        /// <remarks/>
        public event SetWirelessMinimumWPA2MulticastEncryptionCompletedEventHandler SetWirelessMinimumWPA2MulticastEncryptionCompleted;
        
        /// <remarks/>
        public event GetWirelessMinimumWPA2MulticastEncryptionCompletedEventHandler GetWirelessMinimumWPA2MulticastEncryptionCompleted;
        
        /// <remarks/>
        public event SetWireless802xRejectExpiredCertificatesCompletedEventHandler SetWireless802xRejectExpiredCertificatesCompleted;
        
        /// <remarks/>
        public event GetWireless802xRejectExpiredCertificatesCompletedEventHandler GetWireless802xRejectExpiredCertificatesCompleted;
        
        /// <remarks/>
        public event SetWireless802xValidateCACompletedEventHandler SetWireless802xValidateCACompleted;
        
        /// <remarks/>
        public event GetWireless802xValidateCACompletedEventHandler GetWireless802xValidateCACompleted;
        
        /// <remarks/>
        public event SetWireless802xServerCommonNameCompletedEventHandler SetWireless802xServerCommonNameCompleted;
        
        /// <remarks/>
        public event GetWireless802xServerCommonNameCompletedEventHandler GetWireless802xServerCommonNameCompleted;
        
        /// <remarks/>
        public event SetWirelessWPAPairwiseKeyCompletedEventHandler SetWirelessWPAPairwiseKeyCompleted;
        
        /// <remarks/>
        public event GetWirelessWPAPairwiseKeyCompletedEventHandler GetWirelessWPAPairwiseKeyCompleted;
        
        /// <remarks/>
        public event SetWirelessWPA2PairwiseKeyCompletedEventHandler SetWirelessWPA2PairwiseKeyCompleted;
        
        /// <remarks/>
        public event GetWirelessWPA2PairwiseKeyCompletedEventHandler GetWirelessWPA2PairwiseKeyCompleted;
        
        /// <remarks/>
        public event SetWirelessEAPAuthenticationMethodCompletedEventHandler SetWirelessEAPAuthenticationMethodCompleted;
        
        /// <remarks/>
        public event GetWirelessEAPAuthenticationMethodCompletedEventHandler GetWirelessEAPAuthenticationMethodCompleted;
        
        /// <remarks/>
        public event SetHostnameCompletedEventHandler SetHostnameCompleted;
        
        /// <remarks/>
        public event GetHostnameCompletedEventHandler GetHostnameCompleted;
        
        /// <remarks/>
        public event GetSupportedDNSServerCountCompletedEventHandler GetSupportedDNSServerCountCompleted;
        
        /// <remarks/>
        public event SetDNSServerCompletedEventHandler SetDNSServerCompleted;
        
        /// <remarks/>
        public event GetDNSServerCompletedEventHandler GetDNSServerCompleted;
        
        /// <remarks/>
        public event GetSupportedDNSSuffixCountCompletedEventHandler GetSupportedDNSSuffixCountCompleted;
        
        /// <remarks/>
        public event SetDNSSuffixCompletedEventHandler SetDNSSuffixCompleted;
        
        /// <remarks/>
        public event GetDNSSuffixCompletedEventHandler GetDNSSuffixCompleted;
        
        /// <remarks/>
        public event GetSupportedSyslogServerCountCompletedEventHandler GetSupportedSyslogServerCountCompleted;
        
        /// <remarks/>
        public event SetSyslogServerCompletedEventHandler SetSyslogServerCompleted;
        
        /// <remarks/>
        public event GetSyslogServerCompletedEventHandler GetSyslogServerCompleted;
        
        /// <remarks/>
        public event GetSupportedSNTPServerCountCompletedEventHandler GetSupportedSNTPServerCountCompleted;
        
        /// <remarks/>
        public event SetSNTPServerCompletedEventHandler SetSNTPServerCompleted;
        
        /// <remarks/>
        public event GetSNTPServerCompletedEventHandler GetSNTPServerCompleted;
        
        /// <remarks/>
        public event SetTimeZoneCompletedEventHandler SetTimeZoneCompleted;
        
        /// <remarks/>
        public event GetTimeZoneCompletedEventHandler GetTimeZoneCompleted;
        
        /// <remarks/>
        public event GetTimeZoneListCompletedEventHandler GetTimeZoneListCompleted;
        
        /// <remarks/>
        public event SetUTCTimeCompletedEventHandler SetUTCTimeCompleted;
        
        /// <remarks/>
        public event GetUTCTimeCompletedEventHandler GetUTCTimeCompleted;
        
        /// <remarks/>
        public event SetSystemDateCompletedEventHandler SetSystemDateCompleted;
        
        /// <remarks/>
        public event GetSystemDateCompletedEventHandler GetSystemDateCompleted;
        
        /// <remarks/>
        public event GetSupportedCIFSMountCountCompletedEventHandler GetSupportedCIFSMountCountCompleted;
        
        /// <remarks/>
        public event AddCIFSMountCompletedEventHandler AddCIFSMountCompleted;
        
        /// <remarks/>
        public event RemoveCIFSMountCompletedEventHandler RemoveCIFSMountCompleted;
        
        /// <remarks/>
        public event GetCIFSMountsCompletedEventHandler GetCIFSMountsCompleted;
        
        /// <remarks/>
        public event GetCIFSMountStatusCompletedEventHandler GetCIFSMountStatusCompleted;
        
        /// <remarks/>
        public event GetCIFSMountDetailsCompletedEventHandler GetCIFSMountDetailsCompleted;
        
        /// <remarks/>
        public event GetSupportedNFSMountCountCompletedEventHandler GetSupportedNFSMountCountCompleted;
        
        /// <remarks/>
        public event AddNFSMountCompletedEventHandler AddNFSMountCompleted;
        
        /// <remarks/>
        public event RemoveNFSMountCompletedEventHandler RemoveNFSMountCompleted;
        
        /// <remarks/>
        public event GetNFSMountsCompletedEventHandler GetNFSMountsCompleted;
        
        /// <remarks/>
        public event GetNFSMountStatusCompletedEventHandler GetNFSMountStatusCompleted;
        
        /// <remarks/>
        public event GetNFSMountDetailsCompletedEventHandler GetNFSMountDetailsCompleted;
        
        /// <remarks/>
        public event SetAvalancheAccessEnabledCompletedEventHandler SetAvalancheAccessEnabledCompleted;
        
        /// <remarks/>
        public event GetAvalancheAccessEnabledCompletedEventHandler GetAvalancheAccessEnabledCompleted;
        
        /// <remarks/>
        public event SetAvalancheAgentNameCompletedEventHandler SetAvalancheAgentNameCompleted;
        
        /// <remarks/>
        public event GetAvalancheAgentNameCompletedEventHandler GetAvalancheAgentNameCompleted;
        
        /// <remarks/>
        public event SetSmartSystemsEnabledCompletedEventHandler SetSmartSystemsEnabledCompleted;
        
        /// <remarks/>
        public event GetSmartSystemsEnabledCompletedEventHandler GetSmartSystemsEnabledCompleted;
        
        /// <remarks/>
        public event SetSmartSystemsServerNameCompletedEventHandler SetSmartSystemsServerNameCompleted;
        
        /// <remarks/>
        public event GetSmartSystemsServerNameCompletedEventHandler GetSmartSystemsServerNameCompleted;
        
        /// <remarks/>
        public event SetSNMPEnabledCompletedEventHandler SetSNMPEnabledCompleted;
        
        /// <remarks/>
        public event GetSNMPEnabledCompletedEventHandler GetSNMPEnabledCompleted;
        
        /// <remarks/>
        public event SetSNMPCommunityCompletedEventHandler SetSNMPCommunityCompleted;
        
        /// <remarks/>
        public event GetSNMPCommunityCompletedEventHandler GetSNMPCommunityCompleted;
        
        /// <remarks/>
        public event SetSNMPTrapTargetCompletedEventHandler SetSNMPTrapTargetCompleted;
        
        /// <remarks/>
        public event GetSNMPTrapTargetCompletedEventHandler GetSNMPTrapTargetCompleted;
        
        /// <remarks/>
        public event SetSNMPv3UsernameCompletedEventHandler SetSNMPv3UsernameCompleted;
        
        /// <remarks/>
        public event GetSNMPv3UsernameCompletedEventHandler GetSNMPv3UsernameCompleted;
        
        /// <remarks/>
        public event SetSNMPv3PasswordCompletedEventHandler SetSNMPv3PasswordCompleted;
        
        /// <remarks/>
        public event GetSNMPv3PasswordCompletedEventHandler GetSNMPv3PasswordCompleted;
        
        /// <remarks/>
        public event SetSNMPAuthenticationTypeCompletedEventHandler SetSNMPAuthenticationTypeCompleted;
        
        /// <remarks/>
        public event GetSNMPAuthenticationTypeCompletedEventHandler GetSNMPAuthenticationTypeCompleted;
        
        /// <remarks/>
        public event SetSNMPPrivacyTypeCompletedEventHandler SetSNMPPrivacyTypeCompleted;
        
        /// <remarks/>
        public event GetSNMPPrivacyTypeCompletedEventHandler GetSNMPPrivacyTypeCompleted;
        
        /// <remarks/>
        public event SetSSHServerEnabledCompletedEventHandler SetSSHServerEnabledCompleted;
        
        /// <remarks/>
        public event GetSSHServerEnabledCompletedEventHandler GetSSHServerEnabledCompleted;
        
        /// <remarks/>
        public event SetFTPServerEnabledCompletedEventHandler SetFTPServerEnabledCompleted;
        
        /// <remarks/>
        public event GetFTPServerEnabledCompletedEventHandler GetFTPServerEnabledCompleted;
        
        /// <remarks/>
        public event SetTelnetServerEnabledCompletedEventHandler SetTelnetServerEnabledCompleted;
        
        /// <remarks/>
        public event GetTelnetServerEnabledCompletedEventHandler GetTelnetServerEnabledCompleted;
        
        /// <remarks/>
        public event SetBonjourAdvertisementEnabledCompletedEventHandler SetBonjourAdvertisementEnabledCompleted;
        
        /// <remarks/>
        public event GetBonjourAdvertisementEnabledCompletedEventHandler GetBonjourAdvertisementEnabledCompleted;
        
        /// <remarks/>
        public event SetUPnPDiscoveryEnabledCompletedEventHandler SetUPnPDiscoveryEnabledCompleted;
        
        /// <remarks/>
        public event GetUPnPDiscoveryEnabledCompletedEventHandler GetUPnPDiscoveryEnabledCompleted;
        
        /// <remarks/>
        public event SetWebserverInsecureEnabledCompletedEventHandler SetWebserverInsecureEnabledCompleted;
        
        /// <remarks/>
        public event GetWebserverInsecureEnabledCompletedEventHandler GetWebserverInsecureEnabledCompleted;
        
        /// <remarks/>
        public event SetWebserverSecureEnabledCompletedEventHandler SetWebserverSecureEnabledCompleted;
        
        /// <remarks/>
        public event GetWebserverSecureEnabledCompletedEventHandler GetWebserverSecureEnabledCompleted;
        
        /// <remarks/>
        public event SetDeviceWebServicesInsecureEnabledCompletedEventHandler SetDeviceWebServicesInsecureEnabledCompleted;
        
        /// <remarks/>
        public event GetDeviceWebServicesInsecureEnabledCompletedEventHandler GetDeviceWebServicesInsecureEnabledCompleted;
        
        /// <remarks/>
        public event SetDeviceWebServicesSecureEnabledCompletedEventHandler SetDeviceWebServicesSecureEnabledCompleted;
        
        /// <remarks/>
        public event GetDeviceWebServicesSecureEnabledCompletedEventHandler GetDeviceWebServicesSecureEnabledCompleted;
        
        /// <remarks/>
        public event SetCIFSServiceEnabledCompletedEventHandler SetCIFSServiceEnabledCompleted;
        
        /// <remarks/>
        public event GetCIFSServiceEnabledCompletedEventHandler GetCIFSServiceEnabledCompleted;
        
        /// <remarks/>
        public event SetCIFSServiceUsernameCompletedEventHandler SetCIFSServiceUsernameCompleted;
        
        /// <remarks/>
        public event GetCIFSServiceUsernameCompletedEventHandler GetCIFSServiceUsernameCompleted;
        
        /// <remarks/>
        public event SetCIFSServicePasswordCompletedEventHandler SetCIFSServicePasswordCompleted;
        
        /// <remarks/>
        public event GetCIFSServicePasswordCompletedEventHandler GetCIFSServicePasswordCompleted;
        
        /// <remarks/>
        public event EdgewareSetAutoStartCompletedEventHandler EdgewareSetAutoStartCompleted;
        
        /// <remarks/>
        public event EdgewareGetAutoStartCompletedEventHandler EdgewareGetAutoStartCompleted;
        
        /// <remarks/>
        public event EdgewareStartApplicationCompletedEventHandler EdgewareStartApplicationCompleted;
        
        /// <remarks/>
        public event EdgewareStopApplicationCompletedEventHandler EdgewareStopApplicationCompleted;
        
        /// <remarks/>
        public event EdgewareUninstallApplicationCompletedEventHandler EdgewareUninstallApplicationCompleted;
        
        /// <remarks/>
        public event UserappUninstallApplicationCompletedEventHandler UserappUninstallApplicationCompleted;
        
        /// <remarks/>
        public event EdgewareGetInstalledApplicationsCompletedEventHandler EdgewareGetInstalledApplicationsCompleted;
        
        /// <remarks/>
        public event EdgewareGetApplicationStatusCompletedEventHandler EdgewareGetApplicationStatusCompleted;
        
        /// <remarks/>
        public event EdgewareSetSyslogRedirectionCompletedEventHandler EdgewareSetSyslogRedirectionCompleted;
        
        /// <remarks/>
        public event EdgewareGetSyslogRedirectionCompletedEventHandler EdgewareGetSyslogRedirectionCompleted;
        
        /// <remarks/>
        public event SetBRIExternalConnectionsEnabledCompletedEventHandler SetBRIExternalConnectionsEnabledCompleted;
        
        /// <remarks/>
        public event GetBRIExternalConnectionsEnabledCompletedEventHandler GetBRIExternalConnectionsEnabledCompleted;
        
        /// <remarks/>
        public event SetBRIListeningPortCompletedEventHandler SetBRIListeningPortCompleted;
        
        /// <remarks/>
        public event GetBRIListeningPortCompletedEventHandler GetBRIListeningPortCompleted;
        
        /// <remarks/>
        public event SetBRILoggingEnabledCompletedEventHandler SetBRILoggingEnabledCompleted;
        
        /// <remarks/>
        public event GetBRILoggingEnabledCompletedEventHandler GetBRILoggingEnabledCompleted;
        
        /// <remarks/>
        public event SetLLRPSecureEnabledCompletedEventHandler SetLLRPSecureEnabledCompleted;
        
        /// <remarks/>
        public event GetLLRPSecureEnabledCompletedEventHandler GetLLRPSecureEnabledCompleted;
        
        /// <remarks/>
        public event SetLLRPInsecureEnabledCompletedEventHandler SetLLRPInsecureEnabledCompleted;
        
        /// <remarks/>
        public event GetLLRPInsecureEnabledCompletedEventHandler GetLLRPInsecureEnabledCompleted;
        
        /// <remarks/>
        public event LLRPTerminateClientCompletedEventHandler LLRPTerminateClientCompleted;
        
        /// <remarks/>
        public event SetBRIOverSerialEnabledCompletedEventHandler SetBRIOverSerialEnabledCompleted;
        
        /// <remarks/>
        public event GetBRIOverSerialEnabledCompletedEventHandler GetBRIOverSerialEnabledCompleted;
        
        /// <remarks/>
        public event SetBRISerialBaudRateCompletedEventHandler SetBRISerialBaudRateCompleted;
        
        /// <remarks/>
        public event GetBRISerialBaudRateCompletedEventHandler GetBRISerialBaudRateCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeTagTypeEnabledCompletedEventHandler SetBRIAttributeTagTypeEnabledCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeTagTypeEnabledCompletedEventHandler GetBRIAttributeTagTypeEnabledCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeRDTRIESCompletedEventHandler SetBRIAttributeRDTRIESCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeRDTRIESCompletedEventHandler GetBRIAttributeRDTRIESCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeWRTRIESCompletedEventHandler SetBRIAttributeWRTRIESCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeWRTRIESCompletedEventHandler GetBRIAttributeWRTRIESCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeLOCKTRIESCompletedEventHandler SetBRIAttributeLOCKTRIESCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeLOCKTRIESCompletedEventHandler GetBRIAttributeLOCKTRIESCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeFIELDSEPCompletedEventHandler SetBRIAttributeFIELDSEPCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeFIELDSEPCompletedEventHandler GetBRIAttributeFIELDSEPCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeIDREPORTCompletedEventHandler SetBRIAttributeIDREPORTCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeIDREPORTCompletedEventHandler GetBRIAttributeIDREPORTCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeNOTAGREPORTCompletedEventHandler SetBRIAttributeNOTAGREPORTCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeNOTAGREPORTCompletedEventHandler GetBRIAttributeNOTAGREPORTCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeRPTTIMEOUTCompletedEventHandler SetBRIAttributeRPTTIMEOUTCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeRPTTIMEOUTCompletedEventHandler GetBRIAttributeRPTTIMEOUTCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeSELECTTRIESCompletedEventHandler SetBRIAttributeSELECTTRIESCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeSELECTTRIESCompletedEventHandler GetBRIAttributeSELECTTRIESCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeUNSELECTTRIESCompletedEventHandler SetBRIAttributeUNSELECTTRIESCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeUNSELECTTRIESCompletedEventHandler GetBRIAttributeUNSELECTTRIESCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeINITIALQCompletedEventHandler SetBRIAttributeINITIALQCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeINITIALQCompletedEventHandler GetBRIAttributeINITIALQCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeTIMEOUTMODECompletedEventHandler SetBRIAttributeTIMEOUTMODECompleted;
        
        /// <remarks/>
        public event GetBRIAttributeTIMEOUTMODECompletedEventHandler GetBRIAttributeTIMEOUTMODECompleted;
        
        /// <remarks/>
        public event SetBRIAttributeINITTRIESCompletedEventHandler SetBRIAttributeINITTRIESCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeINITTRIESCompletedEventHandler GetBRIAttributeINITTRIESCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeIDTRIESCompletedEventHandler SetBRIAttributeIDTRIESCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeIDTRIESCompletedEventHandler GetBRIAttributeIDTRIESCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeANTTRIESCompletedEventHandler SetBRIAttributeANTTRIESCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeANTTRIESCompletedEventHandler GetBRIAttributeANTTRIESCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeIDTIMEOUTCompletedEventHandler SetBRIAttributeIDTIMEOUTCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeIDTIMEOUTCompletedEventHandler GetBRIAttributeIDTIMEOUTCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeANTTIMEOUTCompletedEventHandler SetBRIAttributeANTTIMEOUTCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeANTTIMEOUTCompletedEventHandler GetBRIAttributeANTTIMEOUTCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeDENSEREADERMODECompletedEventHandler SetBRIAttributeDENSEREADERMODECompleted;
        
        /// <remarks/>
        public event GetBRIAttributeDENSEREADERMODECompletedEventHandler GetBRIAttributeDENSEREADERMODECompleted;
        
        /// <remarks/>
        public event SetBRIAttributeEPCC1G2AdvancedModeCompletedEventHandler SetBRIAttributeEPCC1G2AdvancedModeCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeEPCC1G2AdvancedModeCompletedEventHandler GetBRIAttributeEPCC1G2AdvancedModeCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeEPCC1G2PARMSCompletedEventHandler SetBRIAttributeEPCC1G2PARMSCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeEPCC1G2PARMSCompletedEventHandler GetBRIAttributeEPCC1G2PARMSCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeEPCC1G2PARMSListCompletedEventHandler GetBRIAttributeEPCC1G2PARMSListCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeLBTSCANENABLECompletedEventHandler SetBRIAttributeLBTSCANENABLECompleted;
        
        /// <remarks/>
        public event GetBRIAttributeLBTSCANENABLECompletedEventHandler GetBRIAttributeLBTSCANENABLECompleted;
        
        /// <remarks/>
        public event SetBRIAttributeLBTCHANNELCompletedEventHandler SetBRIAttributeLBTCHANNELCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeLBTCHANNELCompletedEventHandler GetBRIAttributeLBTCHANNELCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeSESSIONCompletedEventHandler SetBRIAttributeSESSIONCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeSESSIONCompletedEventHandler GetBRIAttributeSESSIONCompleted;
        
        /// <remarks/>
        public event GetBRIPhysicalAntennaCountCompletedEventHandler GetBRIPhysicalAntennaCountCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeAntennaFieldStrengthCompletedEventHandler SetBRIAttributeAntennaFieldStrengthCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeAntennaFieldStrengthCompletedEventHandler GetBRIAttributeAntennaFieldStrengthCompleted;
        
        /// <remarks/>
        public event SetBRIAttributeAntennaSequenceCompletedEventHandler SetBRIAttributeAntennaSequenceCompleted;
        
        /// <remarks/>
        public event GetBRIAttributeAntennaSequenceCompletedEventHandler GetBRIAttributeAntennaSequenceCompleted;
        
        /// <remarks/>
        public event PrepareFirmwareInstallationCompletedEventHandler PrepareFirmwareInstallationCompleted;
        
        /// <remarks/>
        public event InstallFirmwareCompletedEventHandler InstallFirmwareCompleted;
        
        /// <remarks/>
        public event TransferFirmwareCompletedEventHandler TransferFirmwareCompleted;
        
        /// <remarks/>
        public event InstallEdgewareApplicationCompletedEventHandler InstallEdgewareApplicationCompleted;
        
        /// <remarks/>
        public event InstallUserApplicationCompletedEventHandler InstallUserApplicationCompleted;
        
        /// <remarks/>
        public event TransferFileCompletedEventHandler TransferFileCompleted;
        
        /// <remarks/>
        public event InstallCertificateCompletedEventHandler InstallCertificateCompleted;
        
        /// <remarks/>
        public event UninstallCertificateCompletedEventHandler UninstallCertificateCompleted;
        
        /// <remarks/>
        public event SetUsernameCompletedEventHandler SetUsernameCompleted;
        
        /// <remarks/>
        public event GetUsernameCompletedEventHandler GetUsernameCompleted;
        
        /// <remarks/>
        public event SetPasswordCompletedEventHandler SetPasswordCompleted;
        
        /// <remarks/>
        public event GetPasswordCompletedEventHandler GetPasswordCompleted;
        
        /// <remarks/>
        public event SetReadonlyPasswordCompletedEventHandler SetReadonlyPasswordCompleted;
        
        /// <remarks/>
        public event GetReadonlyPasswordCompletedEventHandler GetReadonlyPasswordCompleted;
        
        /// <remarks/>
        public event SetRadiusEnabledCompletedEventHandler SetRadiusEnabledCompleted;
        
        /// <remarks/>
        public event GetRadiusEnabledCompletedEventHandler GetRadiusEnabledCompleted;
        
        /// <remarks/>
        public event SetRadiusServerAddressCompletedEventHandler SetRadiusServerAddressCompleted;
        
        /// <remarks/>
        public event GetRadiusServerAddressCompletedEventHandler GetRadiusServerAddressCompleted;
        
        /// <remarks/>
        public event SetRadiusServerSecretCompletedEventHandler SetRadiusServerSecretCompleted;
        
        /// <remarks/>
        public event GetRadiusServerSecretCompletedEventHandler GetRadiusServerSecretCompleted;
        
        /// <remarks/>
        public event SetRadiusServerPortCompletedEventHandler SetRadiusServerPortCompleted;
        
        /// <remarks/>
        public event GetRadiusServerPortCompletedEventHandler GetRadiusServerPortCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Version", IsNullable=true)]
        public string GetServiceVersion() {
            object[] results = this.Invoke("GetServiceVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceVersionAsync() {
            this.GetServiceVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetServiceVersionAsync(object userState) {
            if ((this.GetServiceVersionOperationCompleted == null)) {
                this.GetServiceVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceVersionOperationCompleted);
            }
            this.InvokeAsync("GetServiceVersion", new object[0], this.GetServiceVersionOperationCompleted, userState);
        }
        
        private void OnGetServiceVersionOperationCompleted(object arg) {
            if ((this.GetServiceVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceVersionCompleted(this, new GetServiceVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool CommitChanges() {
            object[] results = this.Invoke("CommitChanges", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CommitChangesAsync() {
            this.CommitChangesAsync(null);
        }
        
        /// <remarks/>
        public void CommitChangesAsync(object userState) {
            if ((this.CommitChangesOperationCompleted == null)) {
                this.CommitChangesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitChangesOperationCompleted);
            }
            this.InvokeAsync("CommitChanges", new object[0], this.CommitChangesOperationCompleted, userState);
        }
        
        private void OnCommitChangesOperationCompleted(object arg) {
            if ((this.CommitChangesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitChangesCompleted(this, new CommitChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool DiscardChanges() {
            object[] results = this.Invoke("DiscardChanges", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DiscardChangesAsync() {
            this.DiscardChangesAsync(null);
        }
        
        /// <remarks/>
        public void DiscardChangesAsync(object userState) {
            if ((this.DiscardChangesOperationCompleted == null)) {
                this.DiscardChangesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDiscardChangesOperationCompleted);
            }
            this.InvokeAsync("DiscardChanges", new object[0], this.DiscardChangesOperationCompleted, userState);
        }
        
        private void OnDiscardChangesOperationCompleted(object arg) {
            if ((this.DiscardChangesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DiscardChangesCompleted(this, new DiscardChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetDeviceDefaults() {
            object[] results = this.Invoke("SetDeviceDefaults", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDeviceDefaultsAsync() {
            this.SetDeviceDefaultsAsync(null);
        }
        
        /// <remarks/>
        public void SetDeviceDefaultsAsync(object userState) {
            if ((this.SetDeviceDefaultsOperationCompleted == null)) {
                this.SetDeviceDefaultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDeviceDefaultsOperationCompleted);
            }
            this.InvokeAsync("SetDeviceDefaults", new object[0], this.SetDeviceDefaultsOperationCompleted, userState);
        }
        
        private void OnSetDeviceDefaultsOperationCompleted(object arg) {
            if ((this.SetDeviceDefaultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDeviceDefaultsCompleted(this, new SetDeviceDefaultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("version", IsNullable=true)]
        public string GetSoftwareVersion() {
            object[] results = this.Invoke("GetSoftwareVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSoftwareVersionAsync() {
            this.GetSoftwareVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetSoftwareVersionAsync(object userState) {
            if ((this.GetSoftwareVersionOperationCompleted == null)) {
                this.GetSoftwareVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSoftwareVersionOperationCompleted);
            }
            this.InvokeAsync("GetSoftwareVersion", new object[0], this.GetSoftwareVersionOperationCompleted, userState);
        }
        
        private void OnGetSoftwareVersionOperationCompleted(object arg) {
            if ((this.GetSoftwareVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSoftwareVersionCompleted(this, new GetSoftwareVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("version", IsNullable=true)]
        public string GetBIOSVersion() {
            object[] results = this.Invoke("GetBIOSVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBIOSVersionAsync() {
            this.GetBIOSVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetBIOSVersionAsync(object userState) {
            if ((this.GetBIOSVersionOperationCompleted == null)) {
                this.GetBIOSVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBIOSVersionOperationCompleted);
            }
            this.InvokeAsync("GetBIOSVersion", new object[0], this.GetBIOSVersionOperationCompleted, userState);
        }
        
        private void OnGetBIOSVersionOperationCompleted(object arg) {
            if ((this.GetBIOSVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBIOSVersionCompleted(this, new GetBIOSVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("version", IsNullable=true)]
        public string GetBootloaderVersion() {
            object[] results = this.Invoke("GetBootloaderVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBootloaderVersionAsync() {
            this.GetBootloaderVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetBootloaderVersionAsync(object userState) {
            if ((this.GetBootloaderVersionOperationCompleted == null)) {
                this.GetBootloaderVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBootloaderVersionOperationCompleted);
            }
            this.InvokeAsync("GetBootloaderVersion", new object[0], this.GetBootloaderVersionOperationCompleted, userState);
        }
        
        private void OnGetBootloaderVersionOperationCompleted(object arg) {
            if ((this.GetBootloaderVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBootloaderVersionCompleted(this, new GetBootloaderVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SN", IsNullable=true)]
        public string GetSerialNumber() {
            object[] results = this.Invoke("GetSerialNumber", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSerialNumberAsync() {
            this.GetSerialNumberAsync(null);
        }
        
        /// <remarks/>
        public void GetSerialNumberAsync(object userState) {
            if ((this.GetSerialNumberOperationCompleted == null)) {
                this.GetSerialNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSerialNumberOperationCompleted);
            }
            this.InvokeAsync("GetSerialNumber", new object[0], this.GetSerialNumberOperationCompleted, userState);
        }
        
        private void OnGetSerialNumberOperationCompleted(object arg) {
            if ((this.GetSerialNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSerialNumberCompleted(this, new GetSerialNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("CS", IsNullable=true)]
        public string GetConfigString() {
            object[] results = this.Invoke("GetConfigString", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetConfigStringAsync() {
            this.GetConfigStringAsync(null);
        }
        
        /// <remarks/>
        public void GetConfigStringAsync(object userState) {
            if ((this.GetConfigStringOperationCompleted == null)) {
                this.GetConfigStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConfigStringOperationCompleted);
            }
            this.InvokeAsync("GetConfigString", new object[0], this.GetConfigStringOperationCompleted, userState);
        }
        
        private void OnGetConfigStringOperationCompleted(object arg) {
            if ((this.GetConfigStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConfigStringCompleted(this, new GetConfigStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("State")]
        public ReadyToWorkState GetReadyToWorkState() {
            object[] results = this.Invoke("GetReadyToWorkState", new object[0]);
            return ((ReadyToWorkState)(results[0]));
        }
        
        /// <remarks/>
        public void GetReadyToWorkStateAsync() {
            this.GetReadyToWorkStateAsync(null);
        }
        
        /// <remarks/>
        public void GetReadyToWorkStateAsync(object userState) {
            if ((this.GetReadyToWorkStateOperationCompleted == null)) {
                this.GetReadyToWorkStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReadyToWorkStateOperationCompleted);
            }
            this.InvokeAsync("GetReadyToWorkState", new object[0], this.GetReadyToWorkStateOperationCompleted, userState);
        }
        
        private void OnGetReadyToWorkStateOperationCompleted(object arg) {
            if ((this.GetReadyToWorkStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReadyToWorkStateCompleted(this, new GetReadyToWorkStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UUID", IsNullable=true)]
        public string GetUUID() {
            object[] results = this.Invoke("GetUUID", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUUIDAsync() {
            this.GetUUIDAsync(null);
        }
        
        /// <remarks/>
        public void GetUUIDAsync(object userState) {
            if ((this.GetUUIDOperationCompleted == null)) {
                this.GetUUIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUUIDOperationCompleted);
            }
            this.InvokeAsync("GetUUID", new object[0], this.GetUUIDOperationCompleted, userState);
        }
        
        private void OnGetUUIDOperationCompleted(object arg) {
            if ((this.GetUUIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUUIDCompleted(this, new GetUUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool DeviceLocateStart() {
            object[] results = this.Invoke("DeviceLocateStart", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeviceLocateStartAsync() {
            this.DeviceLocateStartAsync(null);
        }
        
        /// <remarks/>
        public void DeviceLocateStartAsync(object userState) {
            if ((this.DeviceLocateStartOperationCompleted == null)) {
                this.DeviceLocateStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeviceLocateStartOperationCompleted);
            }
            this.InvokeAsync("DeviceLocateStart", new object[0], this.DeviceLocateStartOperationCompleted, userState);
        }
        
        private void OnDeviceLocateStartOperationCompleted(object arg) {
            if ((this.DeviceLocateStartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeviceLocateStartCompleted(this, new DeviceLocateStartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool DeviceLocateStop() {
            object[] results = this.Invoke("DeviceLocateStop", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeviceLocateStopAsync() {
            this.DeviceLocateStopAsync(null);
        }
        
        /// <remarks/>
        public void DeviceLocateStopAsync(object userState) {
            if ((this.DeviceLocateStopOperationCompleted == null)) {
                this.DeviceLocateStopOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeviceLocateStopOperationCompleted);
            }
            this.InvokeAsync("DeviceLocateStop", new object[0], this.DeviceLocateStopOperationCompleted, userState);
        }
        
        private void OnDeviceLocateStopOperationCompleted(object arg) {
            if ((this.DeviceLocateStopCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeviceLocateStopCompleted(this, new DeviceLocateStopCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool RebootDevice() {
            object[] results = this.Invoke("RebootDevice", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RebootDeviceAsync() {
            this.RebootDeviceAsync(null);
        }
        
        /// <remarks/>
        public void RebootDeviceAsync(object userState) {
            if ((this.RebootDeviceOperationCompleted == null)) {
                this.RebootDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRebootDeviceOperationCompleted);
            }
            this.InvokeAsync("RebootDevice", new object[0], this.RebootDeviceOperationCompleted, userState);
        }
        
        private void OnRebootDeviceOperationCompleted(object arg) {
            if ((this.RebootDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RebootDeviceCompleted(this, new RebootDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetSerialConfigurationEnabled(bool Enabled) {
            object[] results = this.Invoke("SetSerialConfigurationEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSerialConfigurationEnabledAsync(bool Enabled) {
            this.SetSerialConfigurationEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetSerialConfigurationEnabledAsync(bool Enabled, object userState) {
            if ((this.SetSerialConfigurationEnabledOperationCompleted == null)) {
                this.SetSerialConfigurationEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSerialConfigurationEnabledOperationCompleted);
            }
            this.InvokeAsync("SetSerialConfigurationEnabled", new object[] {
                        Enabled}, this.SetSerialConfigurationEnabledOperationCompleted, userState);
        }
        
        private void OnSetSerialConfigurationEnabledOperationCompleted(object arg) {
            if ((this.SetSerialConfigurationEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSerialConfigurationEnabledCompleted(this, new SetSerialConfigurationEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetSerialConfigurationEnabled() {
            object[] results = this.Invoke("GetSerialConfigurationEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetSerialConfigurationEnabledAsync() {
            this.GetSerialConfigurationEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetSerialConfigurationEnabledAsync(object userState) {
            if ((this.GetSerialConfigurationEnabledOperationCompleted == null)) {
                this.GetSerialConfigurationEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSerialConfigurationEnabledOperationCompleted);
            }
            this.InvokeAsync("GetSerialConfigurationEnabled", new object[0], this.GetSerialConfigurationEnabledOperationCompleted, userState);
        }
        
        private void OnGetSerialConfigurationEnabledOperationCompleted(object arg) {
            if ((this.GetSerialConfigurationEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSerialConfigurationEnabledCompleted(this, new GetSerialConfigurationEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetSerialLoginEnabled(bool Enabled) {
            object[] results = this.Invoke("SetSerialLoginEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSerialLoginEnabledAsync(bool Enabled) {
            this.SetSerialLoginEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetSerialLoginEnabledAsync(bool Enabled, object userState) {
            if ((this.SetSerialLoginEnabledOperationCompleted == null)) {
                this.SetSerialLoginEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSerialLoginEnabledOperationCompleted);
            }
            this.InvokeAsync("SetSerialLoginEnabled", new object[] {
                        Enabled}, this.SetSerialLoginEnabledOperationCompleted, userState);
        }
        
        private void OnSetSerialLoginEnabledOperationCompleted(object arg) {
            if ((this.SetSerialLoginEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSerialLoginEnabledCompleted(this, new SetSerialLoginEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetSerialLoginEnabled() {
            object[] results = this.Invoke("GetSerialLoginEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetSerialLoginEnabledAsync() {
            this.GetSerialLoginEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetSerialLoginEnabledAsync(object userState) {
            if ((this.GetSerialLoginEnabledOperationCompleted == null)) {
                this.GetSerialLoginEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSerialLoginEnabledOperationCompleted);
            }
            this.InvokeAsync("GetSerialLoginEnabled", new object[0], this.GetSerialLoginEnabledOperationCompleted, userState);
        }
        
        private void OnGetSerialLoginEnabledOperationCompleted(object arg) {
            if ((this.GetSerialLoginEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSerialLoginEnabledCompleted(this, new GetSerialLoginEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetExternalUSBEnabled(bool Enabled) {
            object[] results = this.Invoke("SetExternalUSBEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetExternalUSBEnabledAsync(bool Enabled) {
            this.SetExternalUSBEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetExternalUSBEnabledAsync(bool Enabled, object userState) {
            if ((this.SetExternalUSBEnabledOperationCompleted == null)) {
                this.SetExternalUSBEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetExternalUSBEnabledOperationCompleted);
            }
            this.InvokeAsync("SetExternalUSBEnabled", new object[] {
                        Enabled}, this.SetExternalUSBEnabledOperationCompleted, userState);
        }
        
        private void OnSetExternalUSBEnabledOperationCompleted(object arg) {
            if ((this.SetExternalUSBEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetExternalUSBEnabledCompleted(this, new SetExternalUSBEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetExternalUSBEnabled() {
            object[] results = this.Invoke("GetExternalUSBEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetExternalUSBEnabledAsync() {
            this.GetExternalUSBEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetExternalUSBEnabledAsync(object userState) {
            if ((this.GetExternalUSBEnabledOperationCompleted == null)) {
                this.GetExternalUSBEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExternalUSBEnabledOperationCompleted);
            }
            this.InvokeAsync("GetExternalUSBEnabled", new object[0], this.GetExternalUSBEnabledOperationCompleted, userState);
        }
        
        private void OnGetExternalUSBEnabledOperationCompleted(object arg) {
            if ((this.GetExternalUSBEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExternalUSBEnabledCompleted(this, new GetExternalUSBEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SyncFileSystems() {
            object[] results = this.Invoke("SyncFileSystems", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SyncFileSystemsAsync() {
            this.SyncFileSystemsAsync(null);
        }
        
        /// <remarks/>
        public void SyncFileSystemsAsync(object userState) {
            if ((this.SyncFileSystemsOperationCompleted == null)) {
                this.SyncFileSystemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSyncFileSystemsOperationCompleted);
            }
            this.InvokeAsync("SyncFileSystems", new object[0], this.SyncFileSystemsOperationCompleted, userState);
        }
        
        private void OnSyncFileSystemsOperationCompleted(object arg) {
            if ((this.SyncFileSystemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SyncFileSystemsCompleted(this, new SyncFileSystemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("InterfaceCount")]
        public int GetEthernetInterfaceCount() {
            object[] results = this.Invoke("GetEthernetInterfaceCount", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetEthernetInterfaceCountAsync() {
            this.GetEthernetInterfaceCountAsync(null);
        }
        
        /// <remarks/>
        public void GetEthernetInterfaceCountAsync(object userState) {
            if ((this.GetEthernetInterfaceCountOperationCompleted == null)) {
                this.GetEthernetInterfaceCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEthernetInterfaceCountOperationCompleted);
            }
            this.InvokeAsync("GetEthernetInterfaceCount", new object[0], this.GetEthernetInterfaceCountOperationCompleted, userState);
        }
        
        private void OnGetEthernetInterfaceCountOperationCompleted(object arg) {
            if ((this.GetEthernetInterfaceCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEthernetInterfaceCountCompleted(this, new GetEthernetInterfaceCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetEthernetIPv4DHCPEnabled([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface, bool DHCPEnabed) {
            object[] results = this.Invoke("SetEthernetIPv4DHCPEnabled", new object[] {
                        ethinterface,
                        DHCPEnabed});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetEthernetIPv4DHCPEnabledAsync(int ethinterface, bool DHCPEnabed) {
            this.SetEthernetIPv4DHCPEnabledAsync(ethinterface, DHCPEnabed, null);
        }
        
        /// <remarks/>
        public void SetEthernetIPv4DHCPEnabledAsync(int ethinterface, bool DHCPEnabed, object userState) {
            if ((this.SetEthernetIPv4DHCPEnabledOperationCompleted == null)) {
                this.SetEthernetIPv4DHCPEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEthernetIPv4DHCPEnabledOperationCompleted);
            }
            this.InvokeAsync("SetEthernetIPv4DHCPEnabled", new object[] {
                        ethinterface,
                        DHCPEnabed}, this.SetEthernetIPv4DHCPEnabledOperationCompleted, userState);
        }
        
        private void OnSetEthernetIPv4DHCPEnabledOperationCompleted(object arg) {
            if ((this.SetEthernetIPv4DHCPEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEthernetIPv4DHCPEnabledCompleted(this, new SetEthernetIPv4DHCPEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("DHCPEnabled")]
        public bool GetEthernetIPv4DHCPEnabled([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface) {
            object[] results = this.Invoke("GetEthernetIPv4DHCPEnabled", new object[] {
                        ethinterface});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetEthernetIPv4DHCPEnabledAsync(int ethinterface) {
            this.GetEthernetIPv4DHCPEnabledAsync(ethinterface, null);
        }
        
        /// <remarks/>
        public void GetEthernetIPv4DHCPEnabledAsync(int ethinterface, object userState) {
            if ((this.GetEthernetIPv4DHCPEnabledOperationCompleted == null)) {
                this.GetEthernetIPv4DHCPEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEthernetIPv4DHCPEnabledOperationCompleted);
            }
            this.InvokeAsync("GetEthernetIPv4DHCPEnabled", new object[] {
                        ethinterface}, this.GetEthernetIPv4DHCPEnabledOperationCompleted, userState);
        }
        
        private void OnGetEthernetIPv4DHCPEnabledOperationCompleted(object arg) {
            if ((this.GetEthernetIPv4DHCPEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEthernetIPv4DHCPEnabledCompleted(this, new GetEthernetIPv4DHCPEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetEthernetIPv4StaticAddress([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface, string address) {
            object[] results = this.Invoke("SetEthernetIPv4StaticAddress", new object[] {
                        ethinterface,
                        address});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetEthernetIPv4StaticAddressAsync(int ethinterface, string address) {
            this.SetEthernetIPv4StaticAddressAsync(ethinterface, address, null);
        }
        
        /// <remarks/>
        public void SetEthernetIPv4StaticAddressAsync(int ethinterface, string address, object userState) {
            if ((this.SetEthernetIPv4StaticAddressOperationCompleted == null)) {
                this.SetEthernetIPv4StaticAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEthernetIPv4StaticAddressOperationCompleted);
            }
            this.InvokeAsync("SetEthernetIPv4StaticAddress", new object[] {
                        ethinterface,
                        address}, this.SetEthernetIPv4StaticAddressOperationCompleted, userState);
        }
        
        private void OnSetEthernetIPv4StaticAddressOperationCompleted(object arg) {
            if ((this.SetEthernetIPv4StaticAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEthernetIPv4StaticAddressCompleted(this, new SetEthernetIPv4StaticAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("address", IsNullable=true)]
        public string GetEthernetIPv4StaticAddress([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface) {
            object[] results = this.Invoke("GetEthernetIPv4StaticAddress", new object[] {
                        ethinterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEthernetIPv4StaticAddressAsync(int ethinterface) {
            this.GetEthernetIPv4StaticAddressAsync(ethinterface, null);
        }
        
        /// <remarks/>
        public void GetEthernetIPv4StaticAddressAsync(int ethinterface, object userState) {
            if ((this.GetEthernetIPv4StaticAddressOperationCompleted == null)) {
                this.GetEthernetIPv4StaticAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEthernetIPv4StaticAddressOperationCompleted);
            }
            this.InvokeAsync("GetEthernetIPv4StaticAddress", new object[] {
                        ethinterface}, this.GetEthernetIPv4StaticAddressOperationCompleted, userState);
        }
        
        private void OnGetEthernetIPv4StaticAddressOperationCompleted(object arg) {
            if ((this.GetEthernetIPv4StaticAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEthernetIPv4StaticAddressCompleted(this, new GetEthernetIPv4StaticAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("address", IsNullable=true)]
        public string GetEthernetIPv4CurrentAddress([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface) {
            object[] results = this.Invoke("GetEthernetIPv4CurrentAddress", new object[] {
                        ethinterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEthernetIPv4CurrentAddressAsync(int ethinterface) {
            this.GetEthernetIPv4CurrentAddressAsync(ethinterface, null);
        }
        
        /// <remarks/>
        public void GetEthernetIPv4CurrentAddressAsync(int ethinterface, object userState) {
            if ((this.GetEthernetIPv4CurrentAddressOperationCompleted == null)) {
                this.GetEthernetIPv4CurrentAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEthernetIPv4CurrentAddressOperationCompleted);
            }
            this.InvokeAsync("GetEthernetIPv4CurrentAddress", new object[] {
                        ethinterface}, this.GetEthernetIPv4CurrentAddressOperationCompleted, userState);
        }
        
        private void OnGetEthernetIPv4CurrentAddressOperationCompleted(object arg) {
            if ((this.GetEthernetIPv4CurrentAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEthernetIPv4CurrentAddressCompleted(this, new GetEthernetIPv4CurrentAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetEthernetIPv4StaticSubnet([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface, string subnet) {
            object[] results = this.Invoke("SetEthernetIPv4StaticSubnet", new object[] {
                        ethinterface,
                        subnet});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetEthernetIPv4StaticSubnetAsync(int ethinterface, string subnet) {
            this.SetEthernetIPv4StaticSubnetAsync(ethinterface, subnet, null);
        }
        
        /// <remarks/>
        public void SetEthernetIPv4StaticSubnetAsync(int ethinterface, string subnet, object userState) {
            if ((this.SetEthernetIPv4StaticSubnetOperationCompleted == null)) {
                this.SetEthernetIPv4StaticSubnetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEthernetIPv4StaticSubnetOperationCompleted);
            }
            this.InvokeAsync("SetEthernetIPv4StaticSubnet", new object[] {
                        ethinterface,
                        subnet}, this.SetEthernetIPv4StaticSubnetOperationCompleted, userState);
        }
        
        private void OnSetEthernetIPv4StaticSubnetOperationCompleted(object arg) {
            if ((this.SetEthernetIPv4StaticSubnetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEthernetIPv4StaticSubnetCompleted(this, new SetEthernetIPv4StaticSubnetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("subnet", IsNullable=true)]
        public string GetEthernetIPv4StaticSubnet([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface) {
            object[] results = this.Invoke("GetEthernetIPv4StaticSubnet", new object[] {
                        ethinterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEthernetIPv4StaticSubnetAsync(int ethinterface) {
            this.GetEthernetIPv4StaticSubnetAsync(ethinterface, null);
        }
        
        /// <remarks/>
        public void GetEthernetIPv4StaticSubnetAsync(int ethinterface, object userState) {
            if ((this.GetEthernetIPv4StaticSubnetOperationCompleted == null)) {
                this.GetEthernetIPv4StaticSubnetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEthernetIPv4StaticSubnetOperationCompleted);
            }
            this.InvokeAsync("GetEthernetIPv4StaticSubnet", new object[] {
                        ethinterface}, this.GetEthernetIPv4StaticSubnetOperationCompleted, userState);
        }
        
        private void OnGetEthernetIPv4StaticSubnetOperationCompleted(object arg) {
            if ((this.GetEthernetIPv4StaticSubnetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEthernetIPv4StaticSubnetCompleted(this, new GetEthernetIPv4StaticSubnetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("subnet", IsNullable=true)]
        public string GetEthernetIPv4CurrentSubnet([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface) {
            object[] results = this.Invoke("GetEthernetIPv4CurrentSubnet", new object[] {
                        ethinterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEthernetIPv4CurrentSubnetAsync(int ethinterface) {
            this.GetEthernetIPv4CurrentSubnetAsync(ethinterface, null);
        }
        
        /// <remarks/>
        public void GetEthernetIPv4CurrentSubnetAsync(int ethinterface, object userState) {
            if ((this.GetEthernetIPv4CurrentSubnetOperationCompleted == null)) {
                this.GetEthernetIPv4CurrentSubnetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEthernetIPv4CurrentSubnetOperationCompleted);
            }
            this.InvokeAsync("GetEthernetIPv4CurrentSubnet", new object[] {
                        ethinterface}, this.GetEthernetIPv4CurrentSubnetOperationCompleted, userState);
        }
        
        private void OnGetEthernetIPv4CurrentSubnetOperationCompleted(object arg) {
            if ((this.GetEthernetIPv4CurrentSubnetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEthernetIPv4CurrentSubnetCompleted(this, new GetEthernetIPv4CurrentSubnetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetEthernetIPv4StaticRouter([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface, string router) {
            object[] results = this.Invoke("SetEthernetIPv4StaticRouter", new object[] {
                        ethinterface,
                        router});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetEthernetIPv4StaticRouterAsync(int ethinterface, string router) {
            this.SetEthernetIPv4StaticRouterAsync(ethinterface, router, null);
        }
        
        /// <remarks/>
        public void SetEthernetIPv4StaticRouterAsync(int ethinterface, string router, object userState) {
            if ((this.SetEthernetIPv4StaticRouterOperationCompleted == null)) {
                this.SetEthernetIPv4StaticRouterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEthernetIPv4StaticRouterOperationCompleted);
            }
            this.InvokeAsync("SetEthernetIPv4StaticRouter", new object[] {
                        ethinterface,
                        router}, this.SetEthernetIPv4StaticRouterOperationCompleted, userState);
        }
        
        private void OnSetEthernetIPv4StaticRouterOperationCompleted(object arg) {
            if ((this.SetEthernetIPv4StaticRouterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEthernetIPv4StaticRouterCompleted(this, new SetEthernetIPv4StaticRouterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("router", IsNullable=true)]
        public string GetEthernetIPv4StaticRouter([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface) {
            object[] results = this.Invoke("GetEthernetIPv4StaticRouter", new object[] {
                        ethinterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEthernetIPv4StaticRouterAsync(int ethinterface) {
            this.GetEthernetIPv4StaticRouterAsync(ethinterface, null);
        }
        
        /// <remarks/>
        public void GetEthernetIPv4StaticRouterAsync(int ethinterface, object userState) {
            if ((this.GetEthernetIPv4StaticRouterOperationCompleted == null)) {
                this.GetEthernetIPv4StaticRouterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEthernetIPv4StaticRouterOperationCompleted);
            }
            this.InvokeAsync("GetEthernetIPv4StaticRouter", new object[] {
                        ethinterface}, this.GetEthernetIPv4StaticRouterOperationCompleted, userState);
        }
        
        private void OnGetEthernetIPv4StaticRouterOperationCompleted(object arg) {
            if ((this.GetEthernetIPv4StaticRouterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEthernetIPv4StaticRouterCompleted(this, new GetEthernetIPv4StaticRouterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetEthernetIPv6AutoConfigure([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface, bool AutoConfig) {
            object[] results = this.Invoke("SetEthernetIPv6AutoConfigure", new object[] {
                        ethinterface,
                        AutoConfig});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetEthernetIPv6AutoConfigureAsync(int ethinterface, bool AutoConfig) {
            this.SetEthernetIPv6AutoConfigureAsync(ethinterface, AutoConfig, null);
        }
        
        /// <remarks/>
        public void SetEthernetIPv6AutoConfigureAsync(int ethinterface, bool AutoConfig, object userState) {
            if ((this.SetEthernetIPv6AutoConfigureOperationCompleted == null)) {
                this.SetEthernetIPv6AutoConfigureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEthernetIPv6AutoConfigureOperationCompleted);
            }
            this.InvokeAsync("SetEthernetIPv6AutoConfigure", new object[] {
                        ethinterface,
                        AutoConfig}, this.SetEthernetIPv6AutoConfigureOperationCompleted, userState);
        }
        
        private void OnSetEthernetIPv6AutoConfigureOperationCompleted(object arg) {
            if ((this.SetEthernetIPv6AutoConfigureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEthernetIPv6AutoConfigureCompleted(this, new SetEthernetIPv6AutoConfigureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AutoConfig")]
        public bool GetEthernetIPv6AutoConfigure([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface) {
            object[] results = this.Invoke("GetEthernetIPv6AutoConfigure", new object[] {
                        ethinterface});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetEthernetIPv6AutoConfigureAsync(int ethinterface) {
            this.GetEthernetIPv6AutoConfigureAsync(ethinterface, null);
        }
        
        /// <remarks/>
        public void GetEthernetIPv6AutoConfigureAsync(int ethinterface, object userState) {
            if ((this.GetEthernetIPv6AutoConfigureOperationCompleted == null)) {
                this.GetEthernetIPv6AutoConfigureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEthernetIPv6AutoConfigureOperationCompleted);
            }
            this.InvokeAsync("GetEthernetIPv6AutoConfigure", new object[] {
                        ethinterface}, this.GetEthernetIPv6AutoConfigureOperationCompleted, userState);
        }
        
        private void OnGetEthernetIPv6AutoConfigureOperationCompleted(object arg) {
            if ((this.GetEthernetIPv6AutoConfigureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEthernetIPv6AutoConfigureCompleted(this, new GetEthernetIPv6AutoConfigureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetEthernetIPv6StaticAddress([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface, string address) {
            object[] results = this.Invoke("SetEthernetIPv6StaticAddress", new object[] {
                        ethinterface,
                        address});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetEthernetIPv6StaticAddressAsync(int ethinterface, string address) {
            this.SetEthernetIPv6StaticAddressAsync(ethinterface, address, null);
        }
        
        /// <remarks/>
        public void SetEthernetIPv6StaticAddressAsync(int ethinterface, string address, object userState) {
            if ((this.SetEthernetIPv6StaticAddressOperationCompleted == null)) {
                this.SetEthernetIPv6StaticAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEthernetIPv6StaticAddressOperationCompleted);
            }
            this.InvokeAsync("SetEthernetIPv6StaticAddress", new object[] {
                        ethinterface,
                        address}, this.SetEthernetIPv6StaticAddressOperationCompleted, userState);
        }
        
        private void OnSetEthernetIPv6StaticAddressOperationCompleted(object arg) {
            if ((this.SetEthernetIPv6StaticAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEthernetIPv6StaticAddressCompleted(this, new SetEthernetIPv6StaticAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("address", IsNullable=true)]
        public string GetEthernetIPv6StaticAddress([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface) {
            object[] results = this.Invoke("GetEthernetIPv6StaticAddress", new object[] {
                        ethinterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEthernetIPv6StaticAddressAsync(int ethinterface) {
            this.GetEthernetIPv6StaticAddressAsync(ethinterface, null);
        }
        
        /// <remarks/>
        public void GetEthernetIPv6StaticAddressAsync(int ethinterface, object userState) {
            if ((this.GetEthernetIPv6StaticAddressOperationCompleted == null)) {
                this.GetEthernetIPv6StaticAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEthernetIPv6StaticAddressOperationCompleted);
            }
            this.InvokeAsync("GetEthernetIPv6StaticAddress", new object[] {
                        ethinterface}, this.GetEthernetIPv6StaticAddressOperationCompleted, userState);
        }
        
        private void OnGetEthernetIPv6StaticAddressOperationCompleted(object arg) {
            if ((this.GetEthernetIPv6StaticAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEthernetIPv6StaticAddressCompleted(this, new GetEthernetIPv6StaticAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("address", IsNullable=true)]
        public string GetEthernetIPv6CurrentAddress([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface) {
            object[] results = this.Invoke("GetEthernetIPv6CurrentAddress", new object[] {
                        ethinterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEthernetIPv6CurrentAddressAsync(int ethinterface) {
            this.GetEthernetIPv6CurrentAddressAsync(ethinterface, null);
        }
        
        /// <remarks/>
        public void GetEthernetIPv6CurrentAddressAsync(int ethinterface, object userState) {
            if ((this.GetEthernetIPv6CurrentAddressOperationCompleted == null)) {
                this.GetEthernetIPv6CurrentAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEthernetIPv6CurrentAddressOperationCompleted);
            }
            this.InvokeAsync("GetEthernetIPv6CurrentAddress", new object[] {
                        ethinterface}, this.GetEthernetIPv6CurrentAddressOperationCompleted, userState);
        }
        
        private void OnGetEthernetIPv6CurrentAddressOperationCompleted(object arg) {
            if ((this.GetEthernetIPv6CurrentAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEthernetIPv6CurrentAddressCompleted(this, new GetEthernetIPv6CurrentAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetEthernetIPv6StaticSubnet([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface, string subnet) {
            object[] results = this.Invoke("SetEthernetIPv6StaticSubnet", new object[] {
                        ethinterface,
                        subnet});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetEthernetIPv6StaticSubnetAsync(int ethinterface, string subnet) {
            this.SetEthernetIPv6StaticSubnetAsync(ethinterface, subnet, null);
        }
        
        /// <remarks/>
        public void SetEthernetIPv6StaticSubnetAsync(int ethinterface, string subnet, object userState) {
            if ((this.SetEthernetIPv6StaticSubnetOperationCompleted == null)) {
                this.SetEthernetIPv6StaticSubnetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEthernetIPv6StaticSubnetOperationCompleted);
            }
            this.InvokeAsync("SetEthernetIPv6StaticSubnet", new object[] {
                        ethinterface,
                        subnet}, this.SetEthernetIPv6StaticSubnetOperationCompleted, userState);
        }
        
        private void OnSetEthernetIPv6StaticSubnetOperationCompleted(object arg) {
            if ((this.SetEthernetIPv6StaticSubnetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEthernetIPv6StaticSubnetCompleted(this, new SetEthernetIPv6StaticSubnetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("subnet", IsNullable=true)]
        public string GetEthernetIPv6StaticSubnet([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface) {
            object[] results = this.Invoke("GetEthernetIPv6StaticSubnet", new object[] {
                        ethinterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEthernetIPv6StaticSubnetAsync(int ethinterface) {
            this.GetEthernetIPv6StaticSubnetAsync(ethinterface, null);
        }
        
        /// <remarks/>
        public void GetEthernetIPv6StaticSubnetAsync(int ethinterface, object userState) {
            if ((this.GetEthernetIPv6StaticSubnetOperationCompleted == null)) {
                this.GetEthernetIPv6StaticSubnetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEthernetIPv6StaticSubnetOperationCompleted);
            }
            this.InvokeAsync("GetEthernetIPv6StaticSubnet", new object[] {
                        ethinterface}, this.GetEthernetIPv6StaticSubnetOperationCompleted, userState);
        }
        
        private void OnGetEthernetIPv6StaticSubnetOperationCompleted(object arg) {
            if ((this.GetEthernetIPv6StaticSubnetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEthernetIPv6StaticSubnetCompleted(this, new GetEthernetIPv6StaticSubnetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("subnet", IsNullable=true)]
        public string GetEthernetIPv6CurrentSubnet([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface) {
            object[] results = this.Invoke("GetEthernetIPv6CurrentSubnet", new object[] {
                        ethinterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEthernetIPv6CurrentSubnetAsync(int ethinterface) {
            this.GetEthernetIPv6CurrentSubnetAsync(ethinterface, null);
        }
        
        /// <remarks/>
        public void GetEthernetIPv6CurrentSubnetAsync(int ethinterface, object userState) {
            if ((this.GetEthernetIPv6CurrentSubnetOperationCompleted == null)) {
                this.GetEthernetIPv6CurrentSubnetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEthernetIPv6CurrentSubnetOperationCompleted);
            }
            this.InvokeAsync("GetEthernetIPv6CurrentSubnet", new object[] {
                        ethinterface}, this.GetEthernetIPv6CurrentSubnetOperationCompleted, userState);
        }
        
        private void OnGetEthernetIPv6CurrentSubnetOperationCompleted(object arg) {
            if ((this.GetEthernetIPv6CurrentSubnetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEthernetIPv6CurrentSubnetCompleted(this, new GetEthernetIPv6CurrentSubnetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetEthernetIPv6StaticRouter([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface, string router) {
            object[] results = this.Invoke("SetEthernetIPv6StaticRouter", new object[] {
                        ethinterface,
                        router});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetEthernetIPv6StaticRouterAsync(int ethinterface, string router) {
            this.SetEthernetIPv6StaticRouterAsync(ethinterface, router, null);
        }
        
        /// <remarks/>
        public void SetEthernetIPv6StaticRouterAsync(int ethinterface, string router, object userState) {
            if ((this.SetEthernetIPv6StaticRouterOperationCompleted == null)) {
                this.SetEthernetIPv6StaticRouterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEthernetIPv6StaticRouterOperationCompleted);
            }
            this.InvokeAsync("SetEthernetIPv6StaticRouter", new object[] {
                        ethinterface,
                        router}, this.SetEthernetIPv6StaticRouterOperationCompleted, userState);
        }
        
        private void OnSetEthernetIPv6StaticRouterOperationCompleted(object arg) {
            if ((this.SetEthernetIPv6StaticRouterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEthernetIPv6StaticRouterCompleted(this, new SetEthernetIPv6StaticRouterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("router", IsNullable=true)]
        public string GetEthernetIPv6StaticRouter([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface) {
            object[] results = this.Invoke("GetEthernetIPv6StaticRouter", new object[] {
                        ethinterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEthernetIPv6StaticRouterAsync(int ethinterface) {
            this.GetEthernetIPv6StaticRouterAsync(ethinterface, null);
        }
        
        /// <remarks/>
        public void GetEthernetIPv6StaticRouterAsync(int ethinterface, object userState) {
            if ((this.GetEthernetIPv6StaticRouterOperationCompleted == null)) {
                this.GetEthernetIPv6StaticRouterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEthernetIPv6StaticRouterOperationCompleted);
            }
            this.InvokeAsync("GetEthernetIPv6StaticRouter", new object[] {
                        ethinterface}, this.GetEthernetIPv6StaticRouterOperationCompleted, userState);
        }
        
        private void OnGetEthernetIPv6StaticRouterOperationCompleted(object arg) {
            if ((this.GetEthernetIPv6StaticRouterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEthernetIPv6StaticRouterCompleted(this, new GetEthernetIPv6StaticRouterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("addr", IsNullable=true)]
        public string GetEthernetLinkLocalAddress([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface) {
            object[] results = this.Invoke("GetEthernetLinkLocalAddress", new object[] {
                        ethinterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEthernetLinkLocalAddressAsync(int ethinterface) {
            this.GetEthernetLinkLocalAddressAsync(ethinterface, null);
        }
        
        /// <remarks/>
        public void GetEthernetLinkLocalAddressAsync(int ethinterface, object userState) {
            if ((this.GetEthernetLinkLocalAddressOperationCompleted == null)) {
                this.GetEthernetLinkLocalAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEthernetLinkLocalAddressOperationCompleted);
            }
            this.InvokeAsync("GetEthernetLinkLocalAddress", new object[] {
                        ethinterface}, this.GetEthernetLinkLocalAddressOperationCompleted, userState);
        }
        
        private void OnGetEthernetLinkLocalAddressOperationCompleted(object arg) {
            if ((this.GetEthernetLinkLocalAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEthernetLinkLocalAddressCompleted(this, new GetEthernetLinkLocalAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("mac", IsNullable=true)]
        public string GetEthernetMAC([System.Xml.Serialization.XmlElementAttribute("eth-interface")] int ethinterface) {
            object[] results = this.Invoke("GetEthernetMAC", new object[] {
                        ethinterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEthernetMACAsync(int ethinterface) {
            this.GetEthernetMACAsync(ethinterface, null);
        }
        
        /// <remarks/>
        public void GetEthernetMACAsync(int ethinterface, object userState) {
            if ((this.GetEthernetMACOperationCompleted == null)) {
                this.GetEthernetMACOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEthernetMACOperationCompleted);
            }
            this.InvokeAsync("GetEthernetMAC", new object[] {
                        ethinterface}, this.GetEthernetMACOperationCompleted, userState);
        }
        
        private void OnGetEthernetMACOperationCompleted(object arg) {
            if ((this.GetEthernetMACCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEthernetMACCompleted(this, new GetEthernetMACCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("InterfaceCount")]
        public int GetWirelessInterfaceCount() {
            object[] results = this.Invoke("GetWirelessInterfaceCount", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessInterfaceCountAsync() {
            this.GetWirelessInterfaceCountAsync(null);
        }
        
        /// <remarks/>
        public void GetWirelessInterfaceCountAsync(object userState) {
            if ((this.GetWirelessInterfaceCountOperationCompleted == null)) {
                this.GetWirelessInterfaceCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessInterfaceCountOperationCompleted);
            }
            this.InvokeAsync("GetWirelessInterfaceCount", new object[0], this.GetWirelessInterfaceCountOperationCompleted, userState);
        }
        
        private void OnGetWirelessInterfaceCountOperationCompleted(object arg) {
            if ((this.GetWirelessInterfaceCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessInterfaceCountCompleted(this, new GetWirelessInterfaceCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessEnabled([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, bool Enabled) {
            object[] results = this.Invoke("SetWirelessEnabled", new object[] {
                        wlaninterface,
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessEnabledAsync(int wlaninterface, bool Enabled) {
            this.SetWirelessEnabledAsync(wlaninterface, Enabled, null);
        }
        
        /// <remarks/>
        public void SetWirelessEnabledAsync(int wlaninterface, bool Enabled, object userState) {
            if ((this.SetWirelessEnabledOperationCompleted == null)) {
                this.SetWirelessEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessEnabledOperationCompleted);
            }
            this.InvokeAsync("SetWirelessEnabled", new object[] {
                        wlaninterface,
                        Enabled}, this.SetWirelessEnabledOperationCompleted, userState);
        }
        
        private void OnSetWirelessEnabledOperationCompleted(object arg) {
            if ((this.SetWirelessEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessEnabledCompleted(this, new SetWirelessEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetWirelessEnabled([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessEnabled", new object[] {
                        wlaninterface});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessEnabledAsync(int wlaninterface) {
            this.GetWirelessEnabledAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessEnabledAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessEnabledOperationCompleted == null)) {
                this.GetWirelessEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessEnabledOperationCompleted);
            }
            this.InvokeAsync("GetWirelessEnabled", new object[] {
                        wlaninterface}, this.GetWirelessEnabledOperationCompleted, userState);
        }
        
        private void OnGetWirelessEnabledOperationCompleted(object arg) {
            if ((this.GetWirelessEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessEnabledCompleted(this, new GetWirelessEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessSSID([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, string SSID) {
            object[] results = this.Invoke("SetWirelessSSID", new object[] {
                        wlaninterface,
                        SSID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessSSIDAsync(int wlaninterface, string SSID) {
            this.SetWirelessSSIDAsync(wlaninterface, SSID, null);
        }
        
        /// <remarks/>
        public void SetWirelessSSIDAsync(int wlaninterface, string SSID, object userState) {
            if ((this.SetWirelessSSIDOperationCompleted == null)) {
                this.SetWirelessSSIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessSSIDOperationCompleted);
            }
            this.InvokeAsync("SetWirelessSSID", new object[] {
                        wlaninterface,
                        SSID}, this.SetWirelessSSIDOperationCompleted, userState);
        }
        
        private void OnSetWirelessSSIDOperationCompleted(object arg) {
            if ((this.SetWirelessSSIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessSSIDCompleted(this, new SetWirelessSSIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SSID", IsNullable=true)]
        public string GetWirelessSSID([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessSSID", new object[] {
                        wlaninterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessSSIDAsync(int wlaninterface) {
            this.GetWirelessSSIDAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessSSIDAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessSSIDOperationCompleted == null)) {
                this.GetWirelessSSIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessSSIDOperationCompleted);
            }
            this.InvokeAsync("GetWirelessSSID", new object[] {
                        wlaninterface}, this.GetWirelessSSIDOperationCompleted, userState);
        }
        
        private void OnGetWirelessSSIDOperationCompleted(object arg) {
            if ((this.GetWirelessSSIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessSSIDCompleted(this, new GetWirelessSSIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("mac", IsNullable=true)]
        public string GetWirelessMAC([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessMAC", new object[] {
                        wlaninterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessMACAsync(int wlaninterface) {
            this.GetWirelessMACAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessMACAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessMACOperationCompleted == null)) {
                this.GetWirelessMACOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessMACOperationCompleted);
            }
            this.InvokeAsync("GetWirelessMAC", new object[] {
                        wlaninterface}, this.GetWirelessMACOperationCompleted, userState);
        }
        
        private void OnGetWirelessMACOperationCompleted(object arg) {
            if ((this.GetWirelessMACCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessMACCompleted(this, new GetWirelessMACCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessFragmentation([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, int Value) {
            object[] results = this.Invoke("SetWirelessFragmentation", new object[] {
                        wlaninterface,
                        Value});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessFragmentationAsync(int wlaninterface, int Value) {
            this.SetWirelessFragmentationAsync(wlaninterface, Value, null);
        }
        
        /// <remarks/>
        public void SetWirelessFragmentationAsync(int wlaninterface, int Value, object userState) {
            if ((this.SetWirelessFragmentationOperationCompleted == null)) {
                this.SetWirelessFragmentationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessFragmentationOperationCompleted);
            }
            this.InvokeAsync("SetWirelessFragmentation", new object[] {
                        wlaninterface,
                        Value}, this.SetWirelessFragmentationOperationCompleted, userState);
        }
        
        private void OnSetWirelessFragmentationOperationCompleted(object arg) {
            if ((this.SetWirelessFragmentationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessFragmentationCompleted(this, new SetWirelessFragmentationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Value")]
        public int GetWirelessFragmentation([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessFragmentation", new object[] {
                        wlaninterface});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessFragmentationAsync(int wlaninterface) {
            this.GetWirelessFragmentationAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessFragmentationAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessFragmentationOperationCompleted == null)) {
                this.GetWirelessFragmentationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessFragmentationOperationCompleted);
            }
            this.InvokeAsync("GetWirelessFragmentation", new object[] {
                        wlaninterface}, this.GetWirelessFragmentationOperationCompleted, userState);
        }
        
        private void OnGetWirelessFragmentationOperationCompleted(object arg) {
            if ((this.GetWirelessFragmentationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessFragmentationCompleted(this, new GetWirelessFragmentationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessMediumReservationEnabled([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, bool Enabled) {
            object[] results = this.Invoke("SetWirelessMediumReservationEnabled", new object[] {
                        wlaninterface,
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessMediumReservationEnabledAsync(int wlaninterface, bool Enabled) {
            this.SetWirelessMediumReservationEnabledAsync(wlaninterface, Enabled, null);
        }
        
        /// <remarks/>
        public void SetWirelessMediumReservationEnabledAsync(int wlaninterface, bool Enabled, object userState) {
            if ((this.SetWirelessMediumReservationEnabledOperationCompleted == null)) {
                this.SetWirelessMediumReservationEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessMediumReservationEnabledOperationCompleted);
            }
            this.InvokeAsync("SetWirelessMediumReservationEnabled", new object[] {
                        wlaninterface,
                        Enabled}, this.SetWirelessMediumReservationEnabledOperationCompleted, userState);
        }
        
        private void OnSetWirelessMediumReservationEnabledOperationCompleted(object arg) {
            if ((this.SetWirelessMediumReservationEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessMediumReservationEnabledCompleted(this, new SetWirelessMediumReservationEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool GetWirelessMediumReservationEnabled([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessMediumReservationEnabled", new object[] {
                        wlaninterface});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessMediumReservationEnabledAsync(int wlaninterface) {
            this.GetWirelessMediumReservationEnabledAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessMediumReservationEnabledAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessMediumReservationEnabledOperationCompleted == null)) {
                this.GetWirelessMediumReservationEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessMediumReservationEnabledOperationCompleted);
            }
            this.InvokeAsync("GetWirelessMediumReservationEnabled", new object[] {
                        wlaninterface}, this.GetWirelessMediumReservationEnabledOperationCompleted, userState);
        }
        
        private void OnGetWirelessMediumReservationEnabledOperationCompleted(object arg) {
            if ((this.GetWirelessMediumReservationEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessMediumReservationEnabledCompleted(this, new GetWirelessMediumReservationEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessMediumReservationThreshold([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, int Value) {
            object[] results = this.Invoke("SetWirelessMediumReservationThreshold", new object[] {
                        wlaninterface,
                        Value});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessMediumReservationThresholdAsync(int wlaninterface, int Value) {
            this.SetWirelessMediumReservationThresholdAsync(wlaninterface, Value, null);
        }
        
        /// <remarks/>
        public void SetWirelessMediumReservationThresholdAsync(int wlaninterface, int Value, object userState) {
            if ((this.SetWirelessMediumReservationThresholdOperationCompleted == null)) {
                this.SetWirelessMediumReservationThresholdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessMediumReservationThresholdOperationCompleted);
            }
            this.InvokeAsync("SetWirelessMediumReservationThreshold", new object[] {
                        wlaninterface,
                        Value}, this.SetWirelessMediumReservationThresholdOperationCompleted, userState);
        }
        
        private void OnSetWirelessMediumReservationThresholdOperationCompleted(object arg) {
            if ((this.SetWirelessMediumReservationThresholdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessMediumReservationThresholdCompleted(this, new SetWirelessMediumReservationThresholdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Value")]
        public int GetWirelessMediumReservationThreshold([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessMediumReservationThreshold", new object[] {
                        wlaninterface});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessMediumReservationThresholdAsync(int wlaninterface) {
            this.GetWirelessMediumReservationThresholdAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessMediumReservationThresholdAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessMediumReservationThresholdOperationCompleted == null)) {
                this.GetWirelessMediumReservationThresholdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessMediumReservationThresholdOperationCompleted);
            }
            this.InvokeAsync("GetWirelessMediumReservationThreshold", new object[] {
                        wlaninterface}, this.GetWirelessMediumReservationThresholdOperationCompleted, userState);
        }
        
        private void OnGetWirelessMediumReservationThresholdOperationCompleted(object arg) {
            if ((this.GetWirelessMediumReservationThresholdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessMediumReservationThresholdCompleted(this, new GetWirelessMediumReservationThresholdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessRadioMode([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, RadioMode mode) {
            object[] results = this.Invoke("SetWirelessRadioMode", new object[] {
                        wlaninterface,
                        mode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessRadioModeAsync(int wlaninterface, RadioMode mode) {
            this.SetWirelessRadioModeAsync(wlaninterface, mode, null);
        }
        
        /// <remarks/>
        public void SetWirelessRadioModeAsync(int wlaninterface, RadioMode mode, object userState) {
            if ((this.SetWirelessRadioModeOperationCompleted == null)) {
                this.SetWirelessRadioModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessRadioModeOperationCompleted);
            }
            this.InvokeAsync("SetWirelessRadioMode", new object[] {
                        wlaninterface,
                        mode}, this.SetWirelessRadioModeOperationCompleted, userState);
        }
        
        private void OnSetWirelessRadioModeOperationCompleted(object arg) {
            if ((this.SetWirelessRadioModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessRadioModeCompleted(this, new SetWirelessRadioModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("State")]
        public RadioMode GetWirelessRadioMode([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessRadioMode", new object[] {
                        wlaninterface});
            return ((RadioMode)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessRadioModeAsync(int wlaninterface) {
            this.GetWirelessRadioModeAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessRadioModeAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessRadioModeOperationCompleted == null)) {
                this.GetWirelessRadioModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessRadioModeOperationCompleted);
            }
            this.InvokeAsync("GetWirelessRadioMode", new object[] {
                        wlaninterface}, this.GetWirelessRadioModeOperationCompleted, userState);
        }
        
        private void OnGetWirelessRadioModeOperationCompleted(object arg) {
            if ((this.GetWirelessRadioModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessRadioModeCompleted(this, new GetWirelessRadioModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("router", IsNullable=true)]
        public string GetIPv4CurrentRouter() {
            object[] results = this.Invoke("GetIPv4CurrentRouter", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIPv4CurrentRouterAsync() {
            this.GetIPv4CurrentRouterAsync(null);
        }
        
        /// <remarks/>
        public void GetIPv4CurrentRouterAsync(object userState) {
            if ((this.GetIPv4CurrentRouterOperationCompleted == null)) {
                this.GetIPv4CurrentRouterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIPv4CurrentRouterOperationCompleted);
            }
            this.InvokeAsync("GetIPv4CurrentRouter", new object[0], this.GetIPv4CurrentRouterOperationCompleted, userState);
        }
        
        private void OnGetIPv4CurrentRouterOperationCompleted(object arg) {
            if ((this.GetIPv4CurrentRouterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIPv4CurrentRouterCompleted(this, new GetIPv4CurrentRouterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("router", IsNullable=true)]
        public string GetIPv6CurrentRouter() {
            object[] results = this.Invoke("GetIPv6CurrentRouter", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIPv6CurrentRouterAsync() {
            this.GetIPv6CurrentRouterAsync(null);
        }
        
        /// <remarks/>
        public void GetIPv6CurrentRouterAsync(object userState) {
            if ((this.GetIPv6CurrentRouterOperationCompleted == null)) {
                this.GetIPv6CurrentRouterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIPv6CurrentRouterOperationCompleted);
            }
            this.InvokeAsync("GetIPv6CurrentRouter", new object[0], this.GetIPv6CurrentRouterOperationCompleted, userState);
        }
        
        private void OnGetIPv6CurrentRouterOperationCompleted(object arg) {
            if ((this.GetIPv6CurrentRouterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIPv6CurrentRouterCompleted(this, new GetIPv6CurrentRouterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessIPv4DHCPEnabled([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, bool DHCPEnabed) {
            object[] results = this.Invoke("SetWirelessIPv4DHCPEnabled", new object[] {
                        wlaninterface,
                        DHCPEnabed});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessIPv4DHCPEnabledAsync(int wlaninterface, bool DHCPEnabed) {
            this.SetWirelessIPv4DHCPEnabledAsync(wlaninterface, DHCPEnabed, null);
        }
        
        /// <remarks/>
        public void SetWirelessIPv4DHCPEnabledAsync(int wlaninterface, bool DHCPEnabed, object userState) {
            if ((this.SetWirelessIPv4DHCPEnabledOperationCompleted == null)) {
                this.SetWirelessIPv4DHCPEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessIPv4DHCPEnabledOperationCompleted);
            }
            this.InvokeAsync("SetWirelessIPv4DHCPEnabled", new object[] {
                        wlaninterface,
                        DHCPEnabed}, this.SetWirelessIPv4DHCPEnabledOperationCompleted, userState);
        }
        
        private void OnSetWirelessIPv4DHCPEnabledOperationCompleted(object arg) {
            if ((this.SetWirelessIPv4DHCPEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessIPv4DHCPEnabledCompleted(this, new SetWirelessIPv4DHCPEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("DHCPEnabled")]
        public bool GetWirelessIPv4DHCPEnabled([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessIPv4DHCPEnabled", new object[] {
                        wlaninterface});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessIPv4DHCPEnabledAsync(int wlaninterface) {
            this.GetWirelessIPv4DHCPEnabledAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessIPv4DHCPEnabledAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessIPv4DHCPEnabledOperationCompleted == null)) {
                this.GetWirelessIPv4DHCPEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessIPv4DHCPEnabledOperationCompleted);
            }
            this.InvokeAsync("GetWirelessIPv4DHCPEnabled", new object[] {
                        wlaninterface}, this.GetWirelessIPv4DHCPEnabledOperationCompleted, userState);
        }
        
        private void OnGetWirelessIPv4DHCPEnabledOperationCompleted(object arg) {
            if ((this.GetWirelessIPv4DHCPEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessIPv4DHCPEnabledCompleted(this, new GetWirelessIPv4DHCPEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessIPv4StaticAddress([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, string address) {
            object[] results = this.Invoke("SetWirelessIPv4StaticAddress", new object[] {
                        wlaninterface,
                        address});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessIPv4StaticAddressAsync(int wlaninterface, string address) {
            this.SetWirelessIPv4StaticAddressAsync(wlaninterface, address, null);
        }
        
        /// <remarks/>
        public void SetWirelessIPv4StaticAddressAsync(int wlaninterface, string address, object userState) {
            if ((this.SetWirelessIPv4StaticAddressOperationCompleted == null)) {
                this.SetWirelessIPv4StaticAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessIPv4StaticAddressOperationCompleted);
            }
            this.InvokeAsync("SetWirelessIPv4StaticAddress", new object[] {
                        wlaninterface,
                        address}, this.SetWirelessIPv4StaticAddressOperationCompleted, userState);
        }
        
        private void OnSetWirelessIPv4StaticAddressOperationCompleted(object arg) {
            if ((this.SetWirelessIPv4StaticAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessIPv4StaticAddressCompleted(this, new SetWirelessIPv4StaticAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("address", IsNullable=true)]
        public string GetWirelessIPv4StaticAddress([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessIPv4StaticAddress", new object[] {
                        wlaninterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessIPv4StaticAddressAsync(int wlaninterface) {
            this.GetWirelessIPv4StaticAddressAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessIPv4StaticAddressAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessIPv4StaticAddressOperationCompleted == null)) {
                this.GetWirelessIPv4StaticAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessIPv4StaticAddressOperationCompleted);
            }
            this.InvokeAsync("GetWirelessIPv4StaticAddress", new object[] {
                        wlaninterface}, this.GetWirelessIPv4StaticAddressOperationCompleted, userState);
        }
        
        private void OnGetWirelessIPv4StaticAddressOperationCompleted(object arg) {
            if ((this.GetWirelessIPv4StaticAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessIPv4StaticAddressCompleted(this, new GetWirelessIPv4StaticAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("address", IsNullable=true)]
        public string GetWirelessIPv4CurrentAddress([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessIPv4CurrentAddress", new object[] {
                        wlaninterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessIPv4CurrentAddressAsync(int wlaninterface) {
            this.GetWirelessIPv4CurrentAddressAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessIPv4CurrentAddressAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessIPv4CurrentAddressOperationCompleted == null)) {
                this.GetWirelessIPv4CurrentAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessIPv4CurrentAddressOperationCompleted);
            }
            this.InvokeAsync("GetWirelessIPv4CurrentAddress", new object[] {
                        wlaninterface}, this.GetWirelessIPv4CurrentAddressOperationCompleted, userState);
        }
        
        private void OnGetWirelessIPv4CurrentAddressOperationCompleted(object arg) {
            if ((this.GetWirelessIPv4CurrentAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessIPv4CurrentAddressCompleted(this, new GetWirelessIPv4CurrentAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessIPv4StaticSubnet([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, string subnet) {
            object[] results = this.Invoke("SetWirelessIPv4StaticSubnet", new object[] {
                        wlaninterface,
                        subnet});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessIPv4StaticSubnetAsync(int wlaninterface, string subnet) {
            this.SetWirelessIPv4StaticSubnetAsync(wlaninterface, subnet, null);
        }
        
        /// <remarks/>
        public void SetWirelessIPv4StaticSubnetAsync(int wlaninterface, string subnet, object userState) {
            if ((this.SetWirelessIPv4StaticSubnetOperationCompleted == null)) {
                this.SetWirelessIPv4StaticSubnetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessIPv4StaticSubnetOperationCompleted);
            }
            this.InvokeAsync("SetWirelessIPv4StaticSubnet", new object[] {
                        wlaninterface,
                        subnet}, this.SetWirelessIPv4StaticSubnetOperationCompleted, userState);
        }
        
        private void OnSetWirelessIPv4StaticSubnetOperationCompleted(object arg) {
            if ((this.SetWirelessIPv4StaticSubnetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessIPv4StaticSubnetCompleted(this, new SetWirelessIPv4StaticSubnetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("subnet", IsNullable=true)]
        public string GetWirelessIPv4StaticSubnet([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessIPv4StaticSubnet", new object[] {
                        wlaninterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessIPv4StaticSubnetAsync(int wlaninterface) {
            this.GetWirelessIPv4StaticSubnetAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessIPv4StaticSubnetAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessIPv4StaticSubnetOperationCompleted == null)) {
                this.GetWirelessIPv4StaticSubnetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessIPv4StaticSubnetOperationCompleted);
            }
            this.InvokeAsync("GetWirelessIPv4StaticSubnet", new object[] {
                        wlaninterface}, this.GetWirelessIPv4StaticSubnetOperationCompleted, userState);
        }
        
        private void OnGetWirelessIPv4StaticSubnetOperationCompleted(object arg) {
            if ((this.GetWirelessIPv4StaticSubnetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessIPv4StaticSubnetCompleted(this, new GetWirelessIPv4StaticSubnetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("subnet", IsNullable=true)]
        public string GetWirelessIPv4CurrentSubnet([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessIPv4CurrentSubnet", new object[] {
                        wlaninterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessIPv4CurrentSubnetAsync(int wlaninterface) {
            this.GetWirelessIPv4CurrentSubnetAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessIPv4CurrentSubnetAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessIPv4CurrentSubnetOperationCompleted == null)) {
                this.GetWirelessIPv4CurrentSubnetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessIPv4CurrentSubnetOperationCompleted);
            }
            this.InvokeAsync("GetWirelessIPv4CurrentSubnet", new object[] {
                        wlaninterface}, this.GetWirelessIPv4CurrentSubnetOperationCompleted, userState);
        }
        
        private void OnGetWirelessIPv4CurrentSubnetOperationCompleted(object arg) {
            if ((this.GetWirelessIPv4CurrentSubnetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessIPv4CurrentSubnetCompleted(this, new GetWirelessIPv4CurrentSubnetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessIPv4StaticRouter([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, string router) {
            object[] results = this.Invoke("SetWirelessIPv4StaticRouter", new object[] {
                        wlaninterface,
                        router});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessIPv4StaticRouterAsync(int wlaninterface, string router) {
            this.SetWirelessIPv4StaticRouterAsync(wlaninterface, router, null);
        }
        
        /// <remarks/>
        public void SetWirelessIPv4StaticRouterAsync(int wlaninterface, string router, object userState) {
            if ((this.SetWirelessIPv4StaticRouterOperationCompleted == null)) {
                this.SetWirelessIPv4StaticRouterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessIPv4StaticRouterOperationCompleted);
            }
            this.InvokeAsync("SetWirelessIPv4StaticRouter", new object[] {
                        wlaninterface,
                        router}, this.SetWirelessIPv4StaticRouterOperationCompleted, userState);
        }
        
        private void OnSetWirelessIPv4StaticRouterOperationCompleted(object arg) {
            if ((this.SetWirelessIPv4StaticRouterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessIPv4StaticRouterCompleted(this, new SetWirelessIPv4StaticRouterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("router", IsNullable=true)]
        public string GetWirelessIPv4StaticRouter([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessIPv4StaticRouter", new object[] {
                        wlaninterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessIPv4StaticRouterAsync(int wlaninterface) {
            this.GetWirelessIPv4StaticRouterAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessIPv4StaticRouterAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessIPv4StaticRouterOperationCompleted == null)) {
                this.GetWirelessIPv4StaticRouterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessIPv4StaticRouterOperationCompleted);
            }
            this.InvokeAsync("GetWirelessIPv4StaticRouter", new object[] {
                        wlaninterface}, this.GetWirelessIPv4StaticRouterOperationCompleted, userState);
        }
        
        private void OnGetWirelessIPv4StaticRouterOperationCompleted(object arg) {
            if ((this.GetWirelessIPv4StaticRouterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessIPv4StaticRouterCompleted(this, new GetWirelessIPv4StaticRouterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessIPv6AutoConfigure([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, bool AutoConfig) {
            object[] results = this.Invoke("SetWirelessIPv6AutoConfigure", new object[] {
                        wlaninterface,
                        AutoConfig});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessIPv6AutoConfigureAsync(int wlaninterface, bool AutoConfig) {
            this.SetWirelessIPv6AutoConfigureAsync(wlaninterface, AutoConfig, null);
        }
        
        /// <remarks/>
        public void SetWirelessIPv6AutoConfigureAsync(int wlaninterface, bool AutoConfig, object userState) {
            if ((this.SetWirelessIPv6AutoConfigureOperationCompleted == null)) {
                this.SetWirelessIPv6AutoConfigureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessIPv6AutoConfigureOperationCompleted);
            }
            this.InvokeAsync("SetWirelessIPv6AutoConfigure", new object[] {
                        wlaninterface,
                        AutoConfig}, this.SetWirelessIPv6AutoConfigureOperationCompleted, userState);
        }
        
        private void OnSetWirelessIPv6AutoConfigureOperationCompleted(object arg) {
            if ((this.SetWirelessIPv6AutoConfigureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessIPv6AutoConfigureCompleted(this, new SetWirelessIPv6AutoConfigureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AutoConfig")]
        public bool GetWirelessIPv6AutoConfigure([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessIPv6AutoConfigure", new object[] {
                        wlaninterface});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessIPv6AutoConfigureAsync(int wlaninterface) {
            this.GetWirelessIPv6AutoConfigureAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessIPv6AutoConfigureAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessIPv6AutoConfigureOperationCompleted == null)) {
                this.GetWirelessIPv6AutoConfigureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessIPv6AutoConfigureOperationCompleted);
            }
            this.InvokeAsync("GetWirelessIPv6AutoConfigure", new object[] {
                        wlaninterface}, this.GetWirelessIPv6AutoConfigureOperationCompleted, userState);
        }
        
        private void OnGetWirelessIPv6AutoConfigureOperationCompleted(object arg) {
            if ((this.GetWirelessIPv6AutoConfigureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessIPv6AutoConfigureCompleted(this, new GetWirelessIPv6AutoConfigureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessIPv6StaticAddress([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, string address) {
            object[] results = this.Invoke("SetWirelessIPv6StaticAddress", new object[] {
                        wlaninterface,
                        address});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessIPv6StaticAddressAsync(int wlaninterface, string address) {
            this.SetWirelessIPv6StaticAddressAsync(wlaninterface, address, null);
        }
        
        /// <remarks/>
        public void SetWirelessIPv6StaticAddressAsync(int wlaninterface, string address, object userState) {
            if ((this.SetWirelessIPv6StaticAddressOperationCompleted == null)) {
                this.SetWirelessIPv6StaticAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessIPv6StaticAddressOperationCompleted);
            }
            this.InvokeAsync("SetWirelessIPv6StaticAddress", new object[] {
                        wlaninterface,
                        address}, this.SetWirelessIPv6StaticAddressOperationCompleted, userState);
        }
        
        private void OnSetWirelessIPv6StaticAddressOperationCompleted(object arg) {
            if ((this.SetWirelessIPv6StaticAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessIPv6StaticAddressCompleted(this, new SetWirelessIPv6StaticAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("address", IsNullable=true)]
        public string GetWirelessIPv6StaticAddress([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessIPv6StaticAddress", new object[] {
                        wlaninterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessIPv6StaticAddressAsync(int wlaninterface) {
            this.GetWirelessIPv6StaticAddressAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessIPv6StaticAddressAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessIPv6StaticAddressOperationCompleted == null)) {
                this.GetWirelessIPv6StaticAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessIPv6StaticAddressOperationCompleted);
            }
            this.InvokeAsync("GetWirelessIPv6StaticAddress", new object[] {
                        wlaninterface}, this.GetWirelessIPv6StaticAddressOperationCompleted, userState);
        }
        
        private void OnGetWirelessIPv6StaticAddressOperationCompleted(object arg) {
            if ((this.GetWirelessIPv6StaticAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessIPv6StaticAddressCompleted(this, new GetWirelessIPv6StaticAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("address", IsNullable=true)]
        public string GetWirelessIPv6CurrentAddress([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessIPv6CurrentAddress", new object[] {
                        wlaninterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessIPv6CurrentAddressAsync(int wlaninterface) {
            this.GetWirelessIPv6CurrentAddressAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessIPv6CurrentAddressAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessIPv6CurrentAddressOperationCompleted == null)) {
                this.GetWirelessIPv6CurrentAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessIPv6CurrentAddressOperationCompleted);
            }
            this.InvokeAsync("GetWirelessIPv6CurrentAddress", new object[] {
                        wlaninterface}, this.GetWirelessIPv6CurrentAddressOperationCompleted, userState);
        }
        
        private void OnGetWirelessIPv6CurrentAddressOperationCompleted(object arg) {
            if ((this.GetWirelessIPv6CurrentAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessIPv6CurrentAddressCompleted(this, new GetWirelessIPv6CurrentAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessIPv6StaticSubnet([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, string subnet) {
            object[] results = this.Invoke("SetWirelessIPv6StaticSubnet", new object[] {
                        wlaninterface,
                        subnet});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessIPv6StaticSubnetAsync(int wlaninterface, string subnet) {
            this.SetWirelessIPv6StaticSubnetAsync(wlaninterface, subnet, null);
        }
        
        /// <remarks/>
        public void SetWirelessIPv6StaticSubnetAsync(int wlaninterface, string subnet, object userState) {
            if ((this.SetWirelessIPv6StaticSubnetOperationCompleted == null)) {
                this.SetWirelessIPv6StaticSubnetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessIPv6StaticSubnetOperationCompleted);
            }
            this.InvokeAsync("SetWirelessIPv6StaticSubnet", new object[] {
                        wlaninterface,
                        subnet}, this.SetWirelessIPv6StaticSubnetOperationCompleted, userState);
        }
        
        private void OnSetWirelessIPv6StaticSubnetOperationCompleted(object arg) {
            if ((this.SetWirelessIPv6StaticSubnetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessIPv6StaticSubnetCompleted(this, new SetWirelessIPv6StaticSubnetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("subnet", IsNullable=true)]
        public string GetWirelessIPv6StaticSubnet([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessIPv6StaticSubnet", new object[] {
                        wlaninterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessIPv6StaticSubnetAsync(int wlaninterface) {
            this.GetWirelessIPv6StaticSubnetAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessIPv6StaticSubnetAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessIPv6StaticSubnetOperationCompleted == null)) {
                this.GetWirelessIPv6StaticSubnetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessIPv6StaticSubnetOperationCompleted);
            }
            this.InvokeAsync("GetWirelessIPv6StaticSubnet", new object[] {
                        wlaninterface}, this.GetWirelessIPv6StaticSubnetOperationCompleted, userState);
        }
        
        private void OnGetWirelessIPv6StaticSubnetOperationCompleted(object arg) {
            if ((this.GetWirelessIPv6StaticSubnetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessIPv6StaticSubnetCompleted(this, new GetWirelessIPv6StaticSubnetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("subnet", IsNullable=true)]
        public string GetWirelessIPv6CurrentSubnet([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessIPv6CurrentSubnet", new object[] {
                        wlaninterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessIPv6CurrentSubnetAsync(int wlaninterface) {
            this.GetWirelessIPv6CurrentSubnetAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessIPv6CurrentSubnetAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessIPv6CurrentSubnetOperationCompleted == null)) {
                this.GetWirelessIPv6CurrentSubnetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessIPv6CurrentSubnetOperationCompleted);
            }
            this.InvokeAsync("GetWirelessIPv6CurrentSubnet", new object[] {
                        wlaninterface}, this.GetWirelessIPv6CurrentSubnetOperationCompleted, userState);
        }
        
        private void OnGetWirelessIPv6CurrentSubnetOperationCompleted(object arg) {
            if ((this.GetWirelessIPv6CurrentSubnetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessIPv6CurrentSubnetCompleted(this, new GetWirelessIPv6CurrentSubnetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessIPv6StaticRouter([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, string router) {
            object[] results = this.Invoke("SetWirelessIPv6StaticRouter", new object[] {
                        wlaninterface,
                        router});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessIPv6StaticRouterAsync(int wlaninterface, string router) {
            this.SetWirelessIPv6StaticRouterAsync(wlaninterface, router, null);
        }
        
        /// <remarks/>
        public void SetWirelessIPv6StaticRouterAsync(int wlaninterface, string router, object userState) {
            if ((this.SetWirelessIPv6StaticRouterOperationCompleted == null)) {
                this.SetWirelessIPv6StaticRouterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessIPv6StaticRouterOperationCompleted);
            }
            this.InvokeAsync("SetWirelessIPv6StaticRouter", new object[] {
                        wlaninterface,
                        router}, this.SetWirelessIPv6StaticRouterOperationCompleted, userState);
        }
        
        private void OnSetWirelessIPv6StaticRouterOperationCompleted(object arg) {
            if ((this.SetWirelessIPv6StaticRouterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessIPv6StaticRouterCompleted(this, new SetWirelessIPv6StaticRouterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("router", IsNullable=true)]
        public string GetWirelessIPv6StaticRouter([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessIPv6StaticRouter", new object[] {
                        wlaninterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessIPv6StaticRouterAsync(int wlaninterface) {
            this.GetWirelessIPv6StaticRouterAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessIPv6StaticRouterAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessIPv6StaticRouterOperationCompleted == null)) {
                this.GetWirelessIPv6StaticRouterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessIPv6StaticRouterOperationCompleted);
            }
            this.InvokeAsync("GetWirelessIPv6StaticRouter", new object[] {
                        wlaninterface}, this.GetWirelessIPv6StaticRouterOperationCompleted, userState);
        }
        
        private void OnGetWirelessIPv6StaticRouterOperationCompleted(object arg) {
            if ((this.GetWirelessIPv6StaticRouterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessIPv6StaticRouterCompleted(this, new GetWirelessIPv6StaticRouterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessSecurityMode([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, WirelessSecurityModes mode) {
            object[] results = this.Invoke("SetWirelessSecurityMode", new object[] {
                        wlaninterface,
                        mode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessSecurityModeAsync(int wlaninterface, WirelessSecurityModes mode) {
            this.SetWirelessSecurityModeAsync(wlaninterface, mode, null);
        }
        
        /// <remarks/>
        public void SetWirelessSecurityModeAsync(int wlaninterface, WirelessSecurityModes mode, object userState) {
            if ((this.SetWirelessSecurityModeOperationCompleted == null)) {
                this.SetWirelessSecurityModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessSecurityModeOperationCompleted);
            }
            this.InvokeAsync("SetWirelessSecurityMode", new object[] {
                        wlaninterface,
                        mode}, this.SetWirelessSecurityModeOperationCompleted, userState);
        }
        
        private void OnSetWirelessSecurityModeOperationCompleted(object arg) {
            if ((this.SetWirelessSecurityModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessSecurityModeCompleted(this, new SetWirelessSecurityModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Mode")]
        public WirelessSecurityModes GetWirelessSecurityMode([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessSecurityMode", new object[] {
                        wlaninterface});
            return ((WirelessSecurityModes)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessSecurityModeAsync(int wlaninterface) {
            this.GetWirelessSecurityModeAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessSecurityModeAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessSecurityModeOperationCompleted == null)) {
                this.GetWirelessSecurityModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessSecurityModeOperationCompleted);
            }
            this.InvokeAsync("GetWirelessSecurityMode", new object[] {
                        wlaninterface}, this.GetWirelessSecurityModeOperationCompleted, userState);
        }
        
        private void OnGetWirelessSecurityModeOperationCompleted(object arg) {
            if ((this.GetWirelessSecurityModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessSecurityModeCompleted(this, new GetWirelessSecurityModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessWEPAuthentication([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, WEPAuthenticationTypes auth) {
            object[] results = this.Invoke("SetWirelessWEPAuthentication", new object[] {
                        wlaninterface,
                        auth});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessWEPAuthenticationAsync(int wlaninterface, WEPAuthenticationTypes auth) {
            this.SetWirelessWEPAuthenticationAsync(wlaninterface, auth, null);
        }
        
        /// <remarks/>
        public void SetWirelessWEPAuthenticationAsync(int wlaninterface, WEPAuthenticationTypes auth, object userState) {
            if ((this.SetWirelessWEPAuthenticationOperationCompleted == null)) {
                this.SetWirelessWEPAuthenticationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessWEPAuthenticationOperationCompleted);
            }
            this.InvokeAsync("SetWirelessWEPAuthentication", new object[] {
                        wlaninterface,
                        auth}, this.SetWirelessWEPAuthenticationOperationCompleted, userState);
        }
        
        private void OnSetWirelessWEPAuthenticationOperationCompleted(object arg) {
            if ((this.SetWirelessWEPAuthenticationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessWEPAuthenticationCompleted(this, new SetWirelessWEPAuthenticationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("authtype")]
        public WEPAuthenticationTypes GetWirelessWEPAuthentication(int wlaninterface) {
            object[] results = this.Invoke("GetWirelessWEPAuthentication", new object[] {
                        wlaninterface});
            return ((WEPAuthenticationTypes)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessWEPAuthenticationAsync(int wlaninterface) {
            this.GetWirelessWEPAuthenticationAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessWEPAuthenticationAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessWEPAuthenticationOperationCompleted == null)) {
                this.GetWirelessWEPAuthenticationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessWEPAuthenticationOperationCompleted);
            }
            this.InvokeAsync("GetWirelessWEPAuthentication", new object[] {
                        wlaninterface}, this.GetWirelessWEPAuthenticationOperationCompleted, userState);
        }
        
        private void OnGetWirelessWEPAuthenticationOperationCompleted(object arg) {
            if ((this.GetWirelessWEPAuthenticationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessWEPAuthenticationCompleted(this, new GetWirelessWEPAuthenticationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessStaticWEPKey([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, int KeyNumber, string Value) {
            object[] results = this.Invoke("SetWirelessStaticWEPKey", new object[] {
                        wlaninterface,
                        KeyNumber,
                        Value});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessStaticWEPKeyAsync(int wlaninterface, int KeyNumber, string Value) {
            this.SetWirelessStaticWEPKeyAsync(wlaninterface, KeyNumber, Value, null);
        }
        
        /// <remarks/>
        public void SetWirelessStaticWEPKeyAsync(int wlaninterface, int KeyNumber, string Value, object userState) {
            if ((this.SetWirelessStaticWEPKeyOperationCompleted == null)) {
                this.SetWirelessStaticWEPKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessStaticWEPKeyOperationCompleted);
            }
            this.InvokeAsync("SetWirelessStaticWEPKey", new object[] {
                        wlaninterface,
                        KeyNumber,
                        Value}, this.SetWirelessStaticWEPKeyOperationCompleted, userState);
        }
        
        private void OnSetWirelessStaticWEPKeyOperationCompleted(object arg) {
            if ((this.SetWirelessStaticWEPKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessStaticWEPKeyCompleted(this, new SetWirelessStaticWEPKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Value", IsNullable=true)]
        public string GetWirelessStaticWEPKey([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, int KeyNumber) {
            object[] results = this.Invoke("GetWirelessStaticWEPKey", new object[] {
                        wlaninterface,
                        KeyNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessStaticWEPKeyAsync(int wlaninterface, int KeyNumber) {
            this.GetWirelessStaticWEPKeyAsync(wlaninterface, KeyNumber, null);
        }
        
        /// <remarks/>
        public void GetWirelessStaticWEPKeyAsync(int wlaninterface, int KeyNumber, object userState) {
            if ((this.GetWirelessStaticWEPKeyOperationCompleted == null)) {
                this.GetWirelessStaticWEPKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessStaticWEPKeyOperationCompleted);
            }
            this.InvokeAsync("GetWirelessStaticWEPKey", new object[] {
                        wlaninterface,
                        KeyNumber}, this.GetWirelessStaticWEPKeyOperationCompleted, userState);
        }
        
        private void OnGetWirelessStaticWEPKeyOperationCompleted(object arg) {
            if ((this.GetWirelessStaticWEPKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessStaticWEPKeyCompleted(this, new GetWirelessStaticWEPKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessStaticWEPTransmitKey([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, int KeyNumber) {
            object[] results = this.Invoke("SetWirelessStaticWEPTransmitKey", new object[] {
                        wlaninterface,
                        KeyNumber});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessStaticWEPTransmitKeyAsync(int wlaninterface, int KeyNumber) {
            this.SetWirelessStaticWEPTransmitKeyAsync(wlaninterface, KeyNumber, null);
        }
        
        /// <remarks/>
        public void SetWirelessStaticWEPTransmitKeyAsync(int wlaninterface, int KeyNumber, object userState) {
            if ((this.SetWirelessStaticWEPTransmitKeyOperationCompleted == null)) {
                this.SetWirelessStaticWEPTransmitKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessStaticWEPTransmitKeyOperationCompleted);
            }
            this.InvokeAsync("SetWirelessStaticWEPTransmitKey", new object[] {
                        wlaninterface,
                        KeyNumber}, this.SetWirelessStaticWEPTransmitKeyOperationCompleted, userState);
        }
        
        private void OnSetWirelessStaticWEPTransmitKeyOperationCompleted(object arg) {
            if ((this.SetWirelessStaticWEPTransmitKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessStaticWEPTransmitKeyCompleted(this, new SetWirelessStaticWEPTransmitKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Key")]
        public int GetWirelessStaticWEPTransmitKey([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessStaticWEPTransmitKey", new object[] {
                        wlaninterface});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessStaticWEPTransmitKeyAsync(int wlaninterface) {
            this.GetWirelessStaticWEPTransmitKeyAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessStaticWEPTransmitKeyAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessStaticWEPTransmitKeyOperationCompleted == null)) {
                this.GetWirelessStaticWEPTransmitKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessStaticWEPTransmitKeyOperationCompleted);
            }
            this.InvokeAsync("GetWirelessStaticWEPTransmitKey", new object[] {
                        wlaninterface}, this.GetWirelessStaticWEPTransmitKeyOperationCompleted, userState);
        }
        
        private void OnGetWirelessStaticWEPTransmitKeyOperationCompleted(object arg) {
            if ((this.GetWirelessStaticWEPTransmitKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessStaticWEPTransmitKeyCompleted(this, new GetWirelessStaticWEPTransmitKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessMixedCellEnabled([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, bool Enabled) {
            object[] results = this.Invoke("SetWirelessMixedCellEnabled", new object[] {
                        wlaninterface,
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessMixedCellEnabledAsync(int wlaninterface, bool Enabled) {
            this.SetWirelessMixedCellEnabledAsync(wlaninterface, Enabled, null);
        }
        
        /// <remarks/>
        public void SetWirelessMixedCellEnabledAsync(int wlaninterface, bool Enabled, object userState) {
            if ((this.SetWirelessMixedCellEnabledOperationCompleted == null)) {
                this.SetWirelessMixedCellEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessMixedCellEnabledOperationCompleted);
            }
            this.InvokeAsync("SetWirelessMixedCellEnabled", new object[] {
                        wlaninterface,
                        Enabled}, this.SetWirelessMixedCellEnabledOperationCompleted, userState);
        }
        
        private void OnSetWirelessMixedCellEnabledOperationCompleted(object arg) {
            if ((this.SetWirelessMixedCellEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessMixedCellEnabledCompleted(this, new SetWirelessMixedCellEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool GetWirelessMixedCellEnabled([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessMixedCellEnabled", new object[] {
                        wlaninterface});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessMixedCellEnabledAsync(int wlaninterface) {
            this.GetWirelessMixedCellEnabledAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessMixedCellEnabledAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessMixedCellEnabledOperationCompleted == null)) {
                this.GetWirelessMixedCellEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessMixedCellEnabledOperationCompleted);
            }
            this.InvokeAsync("GetWirelessMixedCellEnabled", new object[] {
                        wlaninterface}, this.GetWirelessMixedCellEnabledOperationCompleted, userState);
        }
        
        private void OnGetWirelessMixedCellEnabledOperationCompleted(object arg) {
            if ((this.GetWirelessMixedCellEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessMixedCellEnabledCompleted(this, new GetWirelessMixedCellEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessPSK([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, string Value) {
            object[] results = this.Invoke("SetWirelessPSK", new object[] {
                        wlaninterface,
                        Value});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessPSKAsync(int wlaninterface, string Value) {
            this.SetWirelessPSKAsync(wlaninterface, Value, null);
        }
        
        /// <remarks/>
        public void SetWirelessPSKAsync(int wlaninterface, string Value, object userState) {
            if ((this.SetWirelessPSKOperationCompleted == null)) {
                this.SetWirelessPSKOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessPSKOperationCompleted);
            }
            this.InvokeAsync("SetWirelessPSK", new object[] {
                        wlaninterface,
                        Value}, this.SetWirelessPSKOperationCompleted, userState);
        }
        
        private void OnSetWirelessPSKOperationCompleted(object arg) {
            if ((this.SetWirelessPSKCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessPSKCompleted(this, new SetWirelessPSKCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Value", IsNullable=true)]
        public string GetWirelessPSK([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWirelessPSK", new object[] {
                        wlaninterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessPSKAsync(int wlaninterface) {
            this.GetWirelessPSKAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessPSKAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessPSKOperationCompleted == null)) {
                this.GetWirelessPSKOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessPSKOperationCompleted);
            }
            this.InvokeAsync("GetWirelessPSK", new object[] {
                        wlaninterface}, this.GetWirelessPSKOperationCompleted, userState);
        }
        
        private void OnGetWirelessPSKOperationCompleted(object arg) {
            if ((this.GetWirelessPSKCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessPSKCompleted(this, new GetWirelessPSKCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWireless802xUsername([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, string Value) {
            object[] results = this.Invoke("SetWireless802xUsername", new object[] {
                        wlaninterface,
                        Value});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWireless802xUsernameAsync(int wlaninterface, string Value) {
            this.SetWireless802xUsernameAsync(wlaninterface, Value, null);
        }
        
        /// <remarks/>
        public void SetWireless802xUsernameAsync(int wlaninterface, string Value, object userState) {
            if ((this.SetWireless802xUsernameOperationCompleted == null)) {
                this.SetWireless802xUsernameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWireless802xUsernameOperationCompleted);
            }
            this.InvokeAsync("SetWireless802xUsername", new object[] {
                        wlaninterface,
                        Value}, this.SetWireless802xUsernameOperationCompleted, userState);
        }
        
        private void OnSetWireless802xUsernameOperationCompleted(object arg) {
            if ((this.SetWireless802xUsernameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWireless802xUsernameCompleted(this, new SetWireless802xUsernameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Value", IsNullable=true)]
        public string GetWireless802xUsername([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWireless802xUsername", new object[] {
                        wlaninterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWireless802xUsernameAsync(int wlaninterface) {
            this.GetWireless802xUsernameAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWireless802xUsernameAsync(int wlaninterface, object userState) {
            if ((this.GetWireless802xUsernameOperationCompleted == null)) {
                this.GetWireless802xUsernameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWireless802xUsernameOperationCompleted);
            }
            this.InvokeAsync("GetWireless802xUsername", new object[] {
                        wlaninterface}, this.GetWireless802xUsernameOperationCompleted, userState);
        }
        
        private void OnGetWireless802xUsernameOperationCompleted(object arg) {
            if ((this.GetWireless802xUsernameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWireless802xUsernameCompleted(this, new GetWireless802xUsernameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWireless802xPassword([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, string Value) {
            object[] results = this.Invoke("SetWireless802xPassword", new object[] {
                        wlaninterface,
                        Value});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWireless802xPasswordAsync(int wlaninterface, string Value) {
            this.SetWireless802xPasswordAsync(wlaninterface, Value, null);
        }
        
        /// <remarks/>
        public void SetWireless802xPasswordAsync(int wlaninterface, string Value, object userState) {
            if ((this.SetWireless802xPasswordOperationCompleted == null)) {
                this.SetWireless802xPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWireless802xPasswordOperationCompleted);
            }
            this.InvokeAsync("SetWireless802xPassword", new object[] {
                        wlaninterface,
                        Value}, this.SetWireless802xPasswordOperationCompleted, userState);
        }
        
        private void OnSetWireless802xPasswordOperationCompleted(object arg) {
            if ((this.SetWireless802xPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWireless802xPasswordCompleted(this, new SetWireless802xPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Value", IsNullable=true)]
        public string GetWireless802xPassword([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWireless802xPassword", new object[] {
                        wlaninterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWireless802xPasswordAsync(int wlaninterface) {
            this.GetWireless802xPasswordAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWireless802xPasswordAsync(int wlaninterface, object userState) {
            if ((this.GetWireless802xPasswordOperationCompleted == null)) {
                this.GetWireless802xPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWireless802xPasswordOperationCompleted);
            }
            this.InvokeAsync("GetWireless802xPassword", new object[] {
                        wlaninterface}, this.GetWireless802xPasswordOperationCompleted, userState);
        }
        
        private void OnGetWireless802xPasswordOperationCompleted(object arg) {
            if ((this.GetWireless802xPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWireless802xPasswordCompleted(this, new GetWireless802xPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessMinimumWPAMulticastEncryption([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, EncryptionType enc) {
            object[] results = this.Invoke("SetWirelessMinimumWPAMulticastEncryption", new object[] {
                        wlaninterface,
                        enc});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessMinimumWPAMulticastEncryptionAsync(int wlaninterface, EncryptionType enc) {
            this.SetWirelessMinimumWPAMulticastEncryptionAsync(wlaninterface, enc, null);
        }
        
        /// <remarks/>
        public void SetWirelessMinimumWPAMulticastEncryptionAsync(int wlaninterface, EncryptionType enc, object userState) {
            if ((this.SetWirelessMinimumWPAMulticastEncryptionOperationCompleted == null)) {
                this.SetWirelessMinimumWPAMulticastEncryptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessMinimumWPAMulticastEncryptionOperationCompleted);
            }
            this.InvokeAsync("SetWirelessMinimumWPAMulticastEncryption", new object[] {
                        wlaninterface,
                        enc}, this.SetWirelessMinimumWPAMulticastEncryptionOperationCompleted, userState);
        }
        
        private void OnSetWirelessMinimumWPAMulticastEncryptionOperationCompleted(object arg) {
            if ((this.SetWirelessMinimumWPAMulticastEncryptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessMinimumWPAMulticastEncryptionCompleted(this, new SetWirelessMinimumWPAMulticastEncryptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("enc")]
        public EncryptionType GetWirelessMinimumWPAMulticastEncryption(int wlaninterface) {
            object[] results = this.Invoke("GetWirelessMinimumWPAMulticastEncryption", new object[] {
                        wlaninterface});
            return ((EncryptionType)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessMinimumWPAMulticastEncryptionAsync(int wlaninterface) {
            this.GetWirelessMinimumWPAMulticastEncryptionAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessMinimumWPAMulticastEncryptionAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessMinimumWPAMulticastEncryptionOperationCompleted == null)) {
                this.GetWirelessMinimumWPAMulticastEncryptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessMinimumWPAMulticastEncryptionOperationCompleted);
            }
            this.InvokeAsync("GetWirelessMinimumWPAMulticastEncryption", new object[] {
                        wlaninterface}, this.GetWirelessMinimumWPAMulticastEncryptionOperationCompleted, userState);
        }
        
        private void OnGetWirelessMinimumWPAMulticastEncryptionOperationCompleted(object arg) {
            if ((this.GetWirelessMinimumWPAMulticastEncryptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessMinimumWPAMulticastEncryptionCompleted(this, new GetWirelessMinimumWPAMulticastEncryptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessMinimumWPA2MulticastEncryption([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, EncryptionType enc) {
            object[] results = this.Invoke("SetWirelessMinimumWPA2MulticastEncryption", new object[] {
                        wlaninterface,
                        enc});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessMinimumWPA2MulticastEncryptionAsync(int wlaninterface, EncryptionType enc) {
            this.SetWirelessMinimumWPA2MulticastEncryptionAsync(wlaninterface, enc, null);
        }
        
        /// <remarks/>
        public void SetWirelessMinimumWPA2MulticastEncryptionAsync(int wlaninterface, EncryptionType enc, object userState) {
            if ((this.SetWirelessMinimumWPA2MulticastEncryptionOperationCompleted == null)) {
                this.SetWirelessMinimumWPA2MulticastEncryptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessMinimumWPA2MulticastEncryptionOperationCompleted);
            }
            this.InvokeAsync("SetWirelessMinimumWPA2MulticastEncryption", new object[] {
                        wlaninterface,
                        enc}, this.SetWirelessMinimumWPA2MulticastEncryptionOperationCompleted, userState);
        }
        
        private void OnSetWirelessMinimumWPA2MulticastEncryptionOperationCompleted(object arg) {
            if ((this.SetWirelessMinimumWPA2MulticastEncryptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessMinimumWPA2MulticastEncryptionCompleted(this, new SetWirelessMinimumWPA2MulticastEncryptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("enc")]
        public EncryptionType GetWirelessMinimumWPA2MulticastEncryption(int wlaninterface) {
            object[] results = this.Invoke("GetWirelessMinimumWPA2MulticastEncryption", new object[] {
                        wlaninterface});
            return ((EncryptionType)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessMinimumWPA2MulticastEncryptionAsync(int wlaninterface) {
            this.GetWirelessMinimumWPA2MulticastEncryptionAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessMinimumWPA2MulticastEncryptionAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessMinimumWPA2MulticastEncryptionOperationCompleted == null)) {
                this.GetWirelessMinimumWPA2MulticastEncryptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessMinimumWPA2MulticastEncryptionOperationCompleted);
            }
            this.InvokeAsync("GetWirelessMinimumWPA2MulticastEncryption", new object[] {
                        wlaninterface}, this.GetWirelessMinimumWPA2MulticastEncryptionOperationCompleted, userState);
        }
        
        private void OnGetWirelessMinimumWPA2MulticastEncryptionOperationCompleted(object arg) {
            if ((this.GetWirelessMinimumWPA2MulticastEncryptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessMinimumWPA2MulticastEncryptionCompleted(this, new GetWirelessMinimumWPA2MulticastEncryptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWireless802xRejectExpiredCertificates([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, bool Enabled) {
            object[] results = this.Invoke("SetWireless802xRejectExpiredCertificates", new object[] {
                        wlaninterface,
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWireless802xRejectExpiredCertificatesAsync(int wlaninterface, bool Enabled) {
            this.SetWireless802xRejectExpiredCertificatesAsync(wlaninterface, Enabled, null);
        }
        
        /// <remarks/>
        public void SetWireless802xRejectExpiredCertificatesAsync(int wlaninterface, bool Enabled, object userState) {
            if ((this.SetWireless802xRejectExpiredCertificatesOperationCompleted == null)) {
                this.SetWireless802xRejectExpiredCertificatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWireless802xRejectExpiredCertificatesOperationCompleted);
            }
            this.InvokeAsync("SetWireless802xRejectExpiredCertificates", new object[] {
                        wlaninterface,
                        Enabled}, this.SetWireless802xRejectExpiredCertificatesOperationCompleted, userState);
        }
        
        private void OnSetWireless802xRejectExpiredCertificatesOperationCompleted(object arg) {
            if ((this.SetWireless802xRejectExpiredCertificatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWireless802xRejectExpiredCertificatesCompleted(this, new SetWireless802xRejectExpiredCertificatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool GetWireless802xRejectExpiredCertificates([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWireless802xRejectExpiredCertificates", new object[] {
                        wlaninterface});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetWireless802xRejectExpiredCertificatesAsync(int wlaninterface) {
            this.GetWireless802xRejectExpiredCertificatesAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWireless802xRejectExpiredCertificatesAsync(int wlaninterface, object userState) {
            if ((this.GetWireless802xRejectExpiredCertificatesOperationCompleted == null)) {
                this.GetWireless802xRejectExpiredCertificatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWireless802xRejectExpiredCertificatesOperationCompleted);
            }
            this.InvokeAsync("GetWireless802xRejectExpiredCertificates", new object[] {
                        wlaninterface}, this.GetWireless802xRejectExpiredCertificatesOperationCompleted, userState);
        }
        
        private void OnGetWireless802xRejectExpiredCertificatesOperationCompleted(object arg) {
            if ((this.GetWireless802xRejectExpiredCertificatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWireless802xRejectExpiredCertificatesCompleted(this, new GetWireless802xRejectExpiredCertificatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWireless802xValidateCA([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, bool Enabled) {
            object[] results = this.Invoke("SetWireless802xValidateCA", new object[] {
                        wlaninterface,
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWireless802xValidateCAAsync(int wlaninterface, bool Enabled) {
            this.SetWireless802xValidateCAAsync(wlaninterface, Enabled, null);
        }
        
        /// <remarks/>
        public void SetWireless802xValidateCAAsync(int wlaninterface, bool Enabled, object userState) {
            if ((this.SetWireless802xValidateCAOperationCompleted == null)) {
                this.SetWireless802xValidateCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWireless802xValidateCAOperationCompleted);
            }
            this.InvokeAsync("SetWireless802xValidateCA", new object[] {
                        wlaninterface,
                        Enabled}, this.SetWireless802xValidateCAOperationCompleted, userState);
        }
        
        private void OnSetWireless802xValidateCAOperationCompleted(object arg) {
            if ((this.SetWireless802xValidateCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWireless802xValidateCACompleted(this, new SetWireless802xValidateCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool GetWireless802xValidateCA([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWireless802xValidateCA", new object[] {
                        wlaninterface});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetWireless802xValidateCAAsync(int wlaninterface) {
            this.GetWireless802xValidateCAAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWireless802xValidateCAAsync(int wlaninterface, object userState) {
            if ((this.GetWireless802xValidateCAOperationCompleted == null)) {
                this.GetWireless802xValidateCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWireless802xValidateCAOperationCompleted);
            }
            this.InvokeAsync("GetWireless802xValidateCA", new object[] {
                        wlaninterface}, this.GetWireless802xValidateCAOperationCompleted, userState);
        }
        
        private void OnGetWireless802xValidateCAOperationCompleted(object arg) {
            if ((this.GetWireless802xValidateCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWireless802xValidateCACompleted(this, new GetWireless802xValidateCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWireless802xServerCommonName([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, string Value) {
            object[] results = this.Invoke("SetWireless802xServerCommonName", new object[] {
                        wlaninterface,
                        Value});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWireless802xServerCommonNameAsync(int wlaninterface, string Value) {
            this.SetWireless802xServerCommonNameAsync(wlaninterface, Value, null);
        }
        
        /// <remarks/>
        public void SetWireless802xServerCommonNameAsync(int wlaninterface, string Value, object userState) {
            if ((this.SetWireless802xServerCommonNameOperationCompleted == null)) {
                this.SetWireless802xServerCommonNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWireless802xServerCommonNameOperationCompleted);
            }
            this.InvokeAsync("SetWireless802xServerCommonName", new object[] {
                        wlaninterface,
                        Value}, this.SetWireless802xServerCommonNameOperationCompleted, userState);
        }
        
        private void OnSetWireless802xServerCommonNameOperationCompleted(object arg) {
            if ((this.SetWireless802xServerCommonNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWireless802xServerCommonNameCompleted(this, new SetWireless802xServerCommonNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Value", IsNullable=true)]
        public string GetWireless802xServerCommonName([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface) {
            object[] results = this.Invoke("GetWireless802xServerCommonName", new object[] {
                        wlaninterface});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWireless802xServerCommonNameAsync(int wlaninterface) {
            this.GetWireless802xServerCommonNameAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWireless802xServerCommonNameAsync(int wlaninterface, object userState) {
            if ((this.GetWireless802xServerCommonNameOperationCompleted == null)) {
                this.GetWireless802xServerCommonNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWireless802xServerCommonNameOperationCompleted);
            }
            this.InvokeAsync("GetWireless802xServerCommonName", new object[] {
                        wlaninterface}, this.GetWireless802xServerCommonNameOperationCompleted, userState);
        }
        
        private void OnGetWireless802xServerCommonNameOperationCompleted(object arg) {
            if ((this.GetWireless802xServerCommonNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWireless802xServerCommonNameCompleted(this, new GetWireless802xServerCommonNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessWPAPairwiseKey([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, EncryptionType key) {
            object[] results = this.Invoke("SetWirelessWPAPairwiseKey", new object[] {
                        wlaninterface,
                        key});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessWPAPairwiseKeyAsync(int wlaninterface, EncryptionType key) {
            this.SetWirelessWPAPairwiseKeyAsync(wlaninterface, key, null);
        }
        
        /// <remarks/>
        public void SetWirelessWPAPairwiseKeyAsync(int wlaninterface, EncryptionType key, object userState) {
            if ((this.SetWirelessWPAPairwiseKeyOperationCompleted == null)) {
                this.SetWirelessWPAPairwiseKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessWPAPairwiseKeyOperationCompleted);
            }
            this.InvokeAsync("SetWirelessWPAPairwiseKey", new object[] {
                        wlaninterface,
                        key}, this.SetWirelessWPAPairwiseKeyOperationCompleted, userState);
        }
        
        private void OnSetWirelessWPAPairwiseKeyOperationCompleted(object arg) {
            if ((this.SetWirelessWPAPairwiseKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessWPAPairwiseKeyCompleted(this, new SetWirelessWPAPairwiseKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("key")]
        public EncryptionType GetWirelessWPAPairwiseKey(int wlaninterface) {
            object[] results = this.Invoke("GetWirelessWPAPairwiseKey", new object[] {
                        wlaninterface});
            return ((EncryptionType)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessWPAPairwiseKeyAsync(int wlaninterface) {
            this.GetWirelessWPAPairwiseKeyAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessWPAPairwiseKeyAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessWPAPairwiseKeyOperationCompleted == null)) {
                this.GetWirelessWPAPairwiseKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessWPAPairwiseKeyOperationCompleted);
            }
            this.InvokeAsync("GetWirelessWPAPairwiseKey", new object[] {
                        wlaninterface}, this.GetWirelessWPAPairwiseKeyOperationCompleted, userState);
        }
        
        private void OnGetWirelessWPAPairwiseKeyOperationCompleted(object arg) {
            if ((this.GetWirelessWPAPairwiseKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessWPAPairwiseKeyCompleted(this, new GetWirelessWPAPairwiseKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessWPA2PairwiseKey([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, EncryptionType key) {
            object[] results = this.Invoke("SetWirelessWPA2PairwiseKey", new object[] {
                        wlaninterface,
                        key});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessWPA2PairwiseKeyAsync(int wlaninterface, EncryptionType key) {
            this.SetWirelessWPA2PairwiseKeyAsync(wlaninterface, key, null);
        }
        
        /// <remarks/>
        public void SetWirelessWPA2PairwiseKeyAsync(int wlaninterface, EncryptionType key, object userState) {
            if ((this.SetWirelessWPA2PairwiseKeyOperationCompleted == null)) {
                this.SetWirelessWPA2PairwiseKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessWPA2PairwiseKeyOperationCompleted);
            }
            this.InvokeAsync("SetWirelessWPA2PairwiseKey", new object[] {
                        wlaninterface,
                        key}, this.SetWirelessWPA2PairwiseKeyOperationCompleted, userState);
        }
        
        private void OnSetWirelessWPA2PairwiseKeyOperationCompleted(object arg) {
            if ((this.SetWirelessWPA2PairwiseKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessWPA2PairwiseKeyCompleted(this, new SetWirelessWPA2PairwiseKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("key")]
        public EncryptionType GetWirelessWPA2PairwiseKey(int wlaninterface) {
            object[] results = this.Invoke("GetWirelessWPA2PairwiseKey", new object[] {
                        wlaninterface});
            return ((EncryptionType)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessWPA2PairwiseKeyAsync(int wlaninterface) {
            this.GetWirelessWPA2PairwiseKeyAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessWPA2PairwiseKeyAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessWPA2PairwiseKeyOperationCompleted == null)) {
                this.GetWirelessWPA2PairwiseKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessWPA2PairwiseKeyOperationCompleted);
            }
            this.InvokeAsync("GetWirelessWPA2PairwiseKey", new object[] {
                        wlaninterface}, this.GetWirelessWPA2PairwiseKeyOperationCompleted, userState);
        }
        
        private void OnGetWirelessWPA2PairwiseKeyOperationCompleted(object arg) {
            if ((this.GetWirelessWPA2PairwiseKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessWPA2PairwiseKeyCompleted(this, new GetWirelessWPA2PairwiseKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWirelessEAPAuthenticationMethod([System.Xml.Serialization.XmlElementAttribute("wlan-interface")] int wlaninterface, EAPType type) {
            object[] results = this.Invoke("SetWirelessEAPAuthenticationMethod", new object[] {
                        wlaninterface,
                        type});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWirelessEAPAuthenticationMethodAsync(int wlaninterface, EAPType type) {
            this.SetWirelessEAPAuthenticationMethodAsync(wlaninterface, type, null);
        }
        
        /// <remarks/>
        public void SetWirelessEAPAuthenticationMethodAsync(int wlaninterface, EAPType type, object userState) {
            if ((this.SetWirelessEAPAuthenticationMethodOperationCompleted == null)) {
                this.SetWirelessEAPAuthenticationMethodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWirelessEAPAuthenticationMethodOperationCompleted);
            }
            this.InvokeAsync("SetWirelessEAPAuthenticationMethod", new object[] {
                        wlaninterface,
                        type}, this.SetWirelessEAPAuthenticationMethodOperationCompleted, userState);
        }
        
        private void OnSetWirelessEAPAuthenticationMethodOperationCompleted(object arg) {
            if ((this.SetWirelessEAPAuthenticationMethodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWirelessEAPAuthenticationMethodCompleted(this, new SetWirelessEAPAuthenticationMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("type")]
        public EAPType GetWirelessEAPAuthenticationMethod(int wlaninterface) {
            object[] results = this.Invoke("GetWirelessEAPAuthenticationMethod", new object[] {
                        wlaninterface});
            return ((EAPType)(results[0]));
        }
        
        /// <remarks/>
        public void GetWirelessEAPAuthenticationMethodAsync(int wlaninterface) {
            this.GetWirelessEAPAuthenticationMethodAsync(wlaninterface, null);
        }
        
        /// <remarks/>
        public void GetWirelessEAPAuthenticationMethodAsync(int wlaninterface, object userState) {
            if ((this.GetWirelessEAPAuthenticationMethodOperationCompleted == null)) {
                this.GetWirelessEAPAuthenticationMethodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWirelessEAPAuthenticationMethodOperationCompleted);
            }
            this.InvokeAsync("GetWirelessEAPAuthenticationMethod", new object[] {
                        wlaninterface}, this.GetWirelessEAPAuthenticationMethodOperationCompleted, userState);
        }
        
        private void OnGetWirelessEAPAuthenticationMethodOperationCompleted(object arg) {
            if ((this.GetWirelessEAPAuthenticationMethodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWirelessEAPAuthenticationMethodCompleted(this, new GetWirelessEAPAuthenticationMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetHostname(string hostname) {
            object[] results = this.Invoke("SetHostname", new object[] {
                        hostname});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetHostnameAsync(string hostname) {
            this.SetHostnameAsync(hostname, null);
        }
        
        /// <remarks/>
        public void SetHostnameAsync(string hostname, object userState) {
            if ((this.SetHostnameOperationCompleted == null)) {
                this.SetHostnameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetHostnameOperationCompleted);
            }
            this.InvokeAsync("SetHostname", new object[] {
                        hostname}, this.SetHostnameOperationCompleted, userState);
        }
        
        private void OnSetHostnameOperationCompleted(object arg) {
            if ((this.SetHostnameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetHostnameCompleted(this, new SetHostnameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("hostname", IsNullable=true)]
        public string GetHostname() {
            object[] results = this.Invoke("GetHostname", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHostnameAsync() {
            this.GetHostnameAsync(null);
        }
        
        /// <remarks/>
        public void GetHostnameAsync(object userState) {
            if ((this.GetHostnameOperationCompleted == null)) {
                this.GetHostnameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHostnameOperationCompleted);
            }
            this.InvokeAsync("GetHostname", new object[0], this.GetHostnameOperationCompleted, userState);
        }
        
        private void OnGetHostnameOperationCompleted(object arg) {
            if ((this.GetHostnameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHostnameCompleted(this, new GetHostnameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ServerCount")]
        public int GetSupportedDNSServerCount() {
            object[] results = this.Invoke("GetSupportedDNSServerCount", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetSupportedDNSServerCountAsync() {
            this.GetSupportedDNSServerCountAsync(null);
        }
        
        /// <remarks/>
        public void GetSupportedDNSServerCountAsync(object userState) {
            if ((this.GetSupportedDNSServerCountOperationCompleted == null)) {
                this.GetSupportedDNSServerCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSupportedDNSServerCountOperationCompleted);
            }
            this.InvokeAsync("GetSupportedDNSServerCount", new object[0], this.GetSupportedDNSServerCountOperationCompleted, userState);
        }
        
        private void OnGetSupportedDNSServerCountOperationCompleted(object arg) {
            if ((this.GetSupportedDNSServerCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSupportedDNSServerCountCompleted(this, new GetSupportedDNSServerCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetDNSServer(int serverIndex, string server) {
            object[] results = this.Invoke("SetDNSServer", new object[] {
                        serverIndex,
                        server});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDNSServerAsync(int serverIndex, string server) {
            this.SetDNSServerAsync(serverIndex, server, null);
        }
        
        /// <remarks/>
        public void SetDNSServerAsync(int serverIndex, string server, object userState) {
            if ((this.SetDNSServerOperationCompleted == null)) {
                this.SetDNSServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDNSServerOperationCompleted);
            }
            this.InvokeAsync("SetDNSServer", new object[] {
                        serverIndex,
                        server}, this.SetDNSServerOperationCompleted, userState);
        }
        
        private void OnSetDNSServerOperationCompleted(object arg) {
            if ((this.SetDNSServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDNSServerCompleted(this, new SetDNSServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("server", IsNullable=true)]
        public string GetDNSServer(int serverIndex) {
            object[] results = this.Invoke("GetDNSServer", new object[] {
                        serverIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDNSServerAsync(int serverIndex) {
            this.GetDNSServerAsync(serverIndex, null);
        }
        
        /// <remarks/>
        public void GetDNSServerAsync(int serverIndex, object userState) {
            if ((this.GetDNSServerOperationCompleted == null)) {
                this.GetDNSServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDNSServerOperationCompleted);
            }
            this.InvokeAsync("GetDNSServer", new object[] {
                        serverIndex}, this.GetDNSServerOperationCompleted, userState);
        }
        
        private void OnGetDNSServerOperationCompleted(object arg) {
            if ((this.GetDNSServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDNSServerCompleted(this, new GetDNSServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ServerCount")]
        public int GetSupportedDNSSuffixCount() {
            object[] results = this.Invoke("GetSupportedDNSSuffixCount", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetSupportedDNSSuffixCountAsync() {
            this.GetSupportedDNSSuffixCountAsync(null);
        }
        
        /// <remarks/>
        public void GetSupportedDNSSuffixCountAsync(object userState) {
            if ((this.GetSupportedDNSSuffixCountOperationCompleted == null)) {
                this.GetSupportedDNSSuffixCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSupportedDNSSuffixCountOperationCompleted);
            }
            this.InvokeAsync("GetSupportedDNSSuffixCount", new object[0], this.GetSupportedDNSSuffixCountOperationCompleted, userState);
        }
        
        private void OnGetSupportedDNSSuffixCountOperationCompleted(object arg) {
            if ((this.GetSupportedDNSSuffixCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSupportedDNSSuffixCountCompleted(this, new GetSupportedDNSSuffixCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetDNSSuffix(int suffixIndex, string suffix) {
            object[] results = this.Invoke("SetDNSSuffix", new object[] {
                        suffixIndex,
                        suffix});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDNSSuffixAsync(int suffixIndex, string suffix) {
            this.SetDNSSuffixAsync(suffixIndex, suffix, null);
        }
        
        /// <remarks/>
        public void SetDNSSuffixAsync(int suffixIndex, string suffix, object userState) {
            if ((this.SetDNSSuffixOperationCompleted == null)) {
                this.SetDNSSuffixOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDNSSuffixOperationCompleted);
            }
            this.InvokeAsync("SetDNSSuffix", new object[] {
                        suffixIndex,
                        suffix}, this.SetDNSSuffixOperationCompleted, userState);
        }
        
        private void OnSetDNSSuffixOperationCompleted(object arg) {
            if ((this.SetDNSSuffixCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDNSSuffixCompleted(this, new SetDNSSuffixCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("suffix", IsNullable=true)]
        public string GetDNSSuffix(int suffixIndex) {
            object[] results = this.Invoke("GetDNSSuffix", new object[] {
                        suffixIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDNSSuffixAsync(int suffixIndex) {
            this.GetDNSSuffixAsync(suffixIndex, null);
        }
        
        /// <remarks/>
        public void GetDNSSuffixAsync(int suffixIndex, object userState) {
            if ((this.GetDNSSuffixOperationCompleted == null)) {
                this.GetDNSSuffixOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDNSSuffixOperationCompleted);
            }
            this.InvokeAsync("GetDNSSuffix", new object[] {
                        suffixIndex}, this.GetDNSSuffixOperationCompleted, userState);
        }
        
        private void OnGetDNSSuffixOperationCompleted(object arg) {
            if ((this.GetDNSSuffixCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDNSSuffixCompleted(this, new GetDNSSuffixCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ServerCount")]
        public int GetSupportedSyslogServerCount() {
            object[] results = this.Invoke("GetSupportedSyslogServerCount", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetSupportedSyslogServerCountAsync() {
            this.GetSupportedSyslogServerCountAsync(null);
        }
        
        /// <remarks/>
        public void GetSupportedSyslogServerCountAsync(object userState) {
            if ((this.GetSupportedSyslogServerCountOperationCompleted == null)) {
                this.GetSupportedSyslogServerCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSupportedSyslogServerCountOperationCompleted);
            }
            this.InvokeAsync("GetSupportedSyslogServerCount", new object[0], this.GetSupportedSyslogServerCountOperationCompleted, userState);
        }
        
        private void OnGetSupportedSyslogServerCountOperationCompleted(object arg) {
            if ((this.GetSupportedSyslogServerCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSupportedSyslogServerCountCompleted(this, new GetSupportedSyslogServerCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetSyslogServer(int serverIndex, string server) {
            object[] results = this.Invoke("SetSyslogServer", new object[] {
                        serverIndex,
                        server});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSyslogServerAsync(int serverIndex, string server) {
            this.SetSyslogServerAsync(serverIndex, server, null);
        }
        
        /// <remarks/>
        public void SetSyslogServerAsync(int serverIndex, string server, object userState) {
            if ((this.SetSyslogServerOperationCompleted == null)) {
                this.SetSyslogServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSyslogServerOperationCompleted);
            }
            this.InvokeAsync("SetSyslogServer", new object[] {
                        serverIndex,
                        server}, this.SetSyslogServerOperationCompleted, userState);
        }
        
        private void OnSetSyslogServerOperationCompleted(object arg) {
            if ((this.SetSyslogServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSyslogServerCompleted(this, new SetSyslogServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("server", IsNullable=true)]
        public string GetSyslogServer(int serverIndex) {
            object[] results = this.Invoke("GetSyslogServer", new object[] {
                        serverIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSyslogServerAsync(int serverIndex) {
            this.GetSyslogServerAsync(serverIndex, null);
        }
        
        /// <remarks/>
        public void GetSyslogServerAsync(int serverIndex, object userState) {
            if ((this.GetSyslogServerOperationCompleted == null)) {
                this.GetSyslogServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSyslogServerOperationCompleted);
            }
            this.InvokeAsync("GetSyslogServer", new object[] {
                        serverIndex}, this.GetSyslogServerOperationCompleted, userState);
        }
        
        private void OnGetSyslogServerOperationCompleted(object arg) {
            if ((this.GetSyslogServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSyslogServerCompleted(this, new GetSyslogServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ServerCount")]
        public int GetSupportedSNTPServerCount() {
            object[] results = this.Invoke("GetSupportedSNTPServerCount", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetSupportedSNTPServerCountAsync() {
            this.GetSupportedSNTPServerCountAsync(null);
        }
        
        /// <remarks/>
        public void GetSupportedSNTPServerCountAsync(object userState) {
            if ((this.GetSupportedSNTPServerCountOperationCompleted == null)) {
                this.GetSupportedSNTPServerCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSupportedSNTPServerCountOperationCompleted);
            }
            this.InvokeAsync("GetSupportedSNTPServerCount", new object[0], this.GetSupportedSNTPServerCountOperationCompleted, userState);
        }
        
        private void OnGetSupportedSNTPServerCountOperationCompleted(object arg) {
            if ((this.GetSupportedSNTPServerCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSupportedSNTPServerCountCompleted(this, new GetSupportedSNTPServerCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetSNTPServer(int serverIndex, string server) {
            object[] results = this.Invoke("SetSNTPServer", new object[] {
                        serverIndex,
                        server});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSNTPServerAsync(int serverIndex, string server) {
            this.SetSNTPServerAsync(serverIndex, server, null);
        }
        
        /// <remarks/>
        public void SetSNTPServerAsync(int serverIndex, string server, object userState) {
            if ((this.SetSNTPServerOperationCompleted == null)) {
                this.SetSNTPServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSNTPServerOperationCompleted);
            }
            this.InvokeAsync("SetSNTPServer", new object[] {
                        serverIndex,
                        server}, this.SetSNTPServerOperationCompleted, userState);
        }
        
        private void OnSetSNTPServerOperationCompleted(object arg) {
            if ((this.SetSNTPServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSNTPServerCompleted(this, new SetSNTPServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("server", IsNullable=true)]
        public string GetSNTPServer(int serverIndex) {
            object[] results = this.Invoke("GetSNTPServer", new object[] {
                        serverIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSNTPServerAsync(int serverIndex) {
            this.GetSNTPServerAsync(serverIndex, null);
        }
        
        /// <remarks/>
        public void GetSNTPServerAsync(int serverIndex, object userState) {
            if ((this.GetSNTPServerOperationCompleted == null)) {
                this.GetSNTPServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSNTPServerOperationCompleted);
            }
            this.InvokeAsync("GetSNTPServer", new object[] {
                        serverIndex}, this.GetSNTPServerOperationCompleted, userState);
        }
        
        private void OnGetSNTPServerOperationCompleted(object arg) {
            if ((this.GetSNTPServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSNTPServerCompleted(this, new GetSNTPServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetTimeZone(string TimeZoneName) {
            object[] results = this.Invoke("SetTimeZone", new object[] {
                        TimeZoneName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetTimeZoneAsync(string TimeZoneName) {
            this.SetTimeZoneAsync(TimeZoneName, null);
        }
        
        /// <remarks/>
        public void SetTimeZoneAsync(string TimeZoneName, object userState) {
            if ((this.SetTimeZoneOperationCompleted == null)) {
                this.SetTimeZoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTimeZoneOperationCompleted);
            }
            this.InvokeAsync("SetTimeZone", new object[] {
                        TimeZoneName}, this.SetTimeZoneOperationCompleted, userState);
        }
        
        private void OnSetTimeZoneOperationCompleted(object arg) {
            if ((this.SetTimeZoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTimeZoneCompleted(this, new SetTimeZoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("TimeZoneName", IsNullable=true)]
        public string GetTimeZone() {
            object[] results = this.Invoke("GetTimeZone", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTimeZoneAsync() {
            this.GetTimeZoneAsync(null);
        }
        
        /// <remarks/>
        public void GetTimeZoneAsync(object userState) {
            if ((this.GetTimeZoneOperationCompleted == null)) {
                this.GetTimeZoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTimeZoneOperationCompleted);
            }
            this.InvokeAsync("GetTimeZone", new object[0], this.GetTimeZoneOperationCompleted, userState);
        }
        
        private void OnGetTimeZoneOperationCompleted(object arg) {
            if ((this.GetTimeZoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTimeZoneCompleted(this, new GetTimeZoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Output")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item")]
        public string[] GetTimeZoneList() {
            object[] results = this.Invoke("GetTimeZoneList", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTimeZoneListAsync() {
            this.GetTimeZoneListAsync(null);
        }
        
        /// <remarks/>
        public void GetTimeZoneListAsync(object userState) {
            if ((this.GetTimeZoneListOperationCompleted == null)) {
                this.GetTimeZoneListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTimeZoneListOperationCompleted);
            }
            this.InvokeAsync("GetTimeZoneList", new object[0], this.GetTimeZoneListOperationCompleted, userState);
        }
        
        private void OnGetTimeZoneListOperationCompleted(object arg) {
            if ((this.GetTimeZoneListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTimeZoneListCompleted(this, new GetTimeZoneListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetUTCTime(int Hour, int Minute, int Second) {
            object[] results = this.Invoke("SetUTCTime", new object[] {
                        Hour,
                        Minute,
                        Second});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetUTCTimeAsync(int Hour, int Minute, int Second) {
            this.SetUTCTimeAsync(Hour, Minute, Second, null);
        }
        
        /// <remarks/>
        public void SetUTCTimeAsync(int Hour, int Minute, int Second, object userState) {
            if ((this.SetUTCTimeOperationCompleted == null)) {
                this.SetUTCTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUTCTimeOperationCompleted);
            }
            this.InvokeAsync("SetUTCTime", new object[] {
                        Hour,
                        Minute,
                        Second}, this.SetUTCTimeOperationCompleted, userState);
        }
        
        private void OnSetUTCTimeOperationCompleted(object arg) {
            if ((this.SetUTCTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUTCTimeCompleted(this, new SetUTCTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool GetUTCTime(out int Hour, out int Minute, out int Second) {
            object[] results = this.Invoke("GetUTCTime", new object[0]);
            Hour = ((int)(results[1]));
            Minute = ((int)(results[2]));
            Second = ((int)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetUTCTimeAsync() {
            this.GetUTCTimeAsync(null);
        }
        
        /// <remarks/>
        public void GetUTCTimeAsync(object userState) {
            if ((this.GetUTCTimeOperationCompleted == null)) {
                this.GetUTCTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUTCTimeOperationCompleted);
            }
            this.InvokeAsync("GetUTCTime", new object[0], this.GetUTCTimeOperationCompleted, userState);
        }
        
        private void OnGetUTCTimeOperationCompleted(object arg) {
            if ((this.GetUTCTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUTCTimeCompleted(this, new GetUTCTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetSystemDate(int Month, int Day, int Year) {
            object[] results = this.Invoke("SetSystemDate", new object[] {
                        Month,
                        Day,
                        Year});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSystemDateAsync(int Month, int Day, int Year) {
            this.SetSystemDateAsync(Month, Day, Year, null);
        }
        
        /// <remarks/>
        public void SetSystemDateAsync(int Month, int Day, int Year, object userState) {
            if ((this.SetSystemDateOperationCompleted == null)) {
                this.SetSystemDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSystemDateOperationCompleted);
            }
            this.InvokeAsync("SetSystemDate", new object[] {
                        Month,
                        Day,
                        Year}, this.SetSystemDateOperationCompleted, userState);
        }
        
        private void OnSetSystemDateOperationCompleted(object arg) {
            if ((this.SetSystemDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSystemDateCompleted(this, new SetSystemDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool GetSystemDate(out int Month, out int Day, out int Year) {
            object[] results = this.Invoke("GetSystemDate", new object[0]);
            Month = ((int)(results[1]));
            Day = ((int)(results[2]));
            Year = ((int)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetSystemDateAsync() {
            this.GetSystemDateAsync(null);
        }
        
        /// <remarks/>
        public void GetSystemDateAsync(object userState) {
            if ((this.GetSystemDateOperationCompleted == null)) {
                this.GetSystemDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemDateOperationCompleted);
            }
            this.InvokeAsync("GetSystemDate", new object[0], this.GetSystemDateOperationCompleted, userState);
        }
        
        private void OnGetSystemDateOperationCompleted(object arg) {
            if ((this.GetSystemDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSystemDateCompleted(this, new GetSystemDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Count")]
        public int GetSupportedCIFSMountCount() {
            object[] results = this.Invoke("GetSupportedCIFSMountCount", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetSupportedCIFSMountCountAsync() {
            this.GetSupportedCIFSMountCountAsync(null);
        }
        
        /// <remarks/>
        public void GetSupportedCIFSMountCountAsync(object userState) {
            if ((this.GetSupportedCIFSMountCountOperationCompleted == null)) {
                this.GetSupportedCIFSMountCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSupportedCIFSMountCountOperationCompleted);
            }
            this.InvokeAsync("GetSupportedCIFSMountCount", new object[0], this.GetSupportedCIFSMountCountOperationCompleted, userState);
        }
        
        private void OnGetSupportedCIFSMountCountOperationCompleted(object arg) {
            if ((this.GetSupportedCIFSMountCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSupportedCIFSMountCountCompleted(this, new GetSupportedCIFSMountCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool AddCIFSMount(string LocalMountPoint, string RemoteHost, string RemoteShare, string Username, string Password, string Domain) {
            object[] results = this.Invoke("AddCIFSMount", new object[] {
                        LocalMountPoint,
                        RemoteHost,
                        RemoteShare,
                        Username,
                        Password,
                        Domain});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddCIFSMountAsync(string LocalMountPoint, string RemoteHost, string RemoteShare, string Username, string Password, string Domain) {
            this.AddCIFSMountAsync(LocalMountPoint, RemoteHost, RemoteShare, Username, Password, Domain, null);
        }
        
        /// <remarks/>
        public void AddCIFSMountAsync(string LocalMountPoint, string RemoteHost, string RemoteShare, string Username, string Password, string Domain, object userState) {
            if ((this.AddCIFSMountOperationCompleted == null)) {
                this.AddCIFSMountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCIFSMountOperationCompleted);
            }
            this.InvokeAsync("AddCIFSMount", new object[] {
                        LocalMountPoint,
                        RemoteHost,
                        RemoteShare,
                        Username,
                        Password,
                        Domain}, this.AddCIFSMountOperationCompleted, userState);
        }
        
        private void OnAddCIFSMountOperationCompleted(object arg) {
            if ((this.AddCIFSMountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCIFSMountCompleted(this, new AddCIFSMountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool RemoveCIFSMount(string LocalMountPoint) {
            object[] results = this.Invoke("RemoveCIFSMount", new object[] {
                        LocalMountPoint});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveCIFSMountAsync(string LocalMountPoint) {
            this.RemoveCIFSMountAsync(LocalMountPoint, null);
        }
        
        /// <remarks/>
        public void RemoveCIFSMountAsync(string LocalMountPoint, object userState) {
            if ((this.RemoveCIFSMountOperationCompleted == null)) {
                this.RemoveCIFSMountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCIFSMountOperationCompleted);
            }
            this.InvokeAsync("RemoveCIFSMount", new object[] {
                        LocalMountPoint}, this.RemoveCIFSMountOperationCompleted, userState);
        }
        
        private void OnRemoveCIFSMountOperationCompleted(object arg) {
            if ((this.RemoveCIFSMountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCIFSMountCompleted(this, new RemoveCIFSMountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Output", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item")]
        public string[] GetCIFSMounts() {
            object[] results = this.Invoke("GetCIFSMounts", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCIFSMountsAsync() {
            this.GetCIFSMountsAsync(null);
        }
        
        /// <remarks/>
        public void GetCIFSMountsAsync(object userState) {
            if ((this.GetCIFSMountsOperationCompleted == null)) {
                this.GetCIFSMountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCIFSMountsOperationCompleted);
            }
            this.InvokeAsync("GetCIFSMounts", new object[0], this.GetCIFSMountsOperationCompleted, userState);
        }
        
        private void OnGetCIFSMountsOperationCompleted(object arg) {
            if ((this.GetCIFSMountsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCIFSMountsCompleted(this, new GetCIFSMountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Status")]
        public LocalMountStatus GetCIFSMountStatus(string LocalMountPoint) {
            object[] results = this.Invoke("GetCIFSMountStatus", new object[] {
                        LocalMountPoint});
            return ((LocalMountStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetCIFSMountStatusAsync(string LocalMountPoint) {
            this.GetCIFSMountStatusAsync(LocalMountPoint, null);
        }
        
        /// <remarks/>
        public void GetCIFSMountStatusAsync(string LocalMountPoint, object userState) {
            if ((this.GetCIFSMountStatusOperationCompleted == null)) {
                this.GetCIFSMountStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCIFSMountStatusOperationCompleted);
            }
            this.InvokeAsync("GetCIFSMountStatus", new object[] {
                        LocalMountPoint}, this.GetCIFSMountStatusOperationCompleted, userState);
        }
        
        private void OnGetCIFSMountStatusOperationCompleted(object arg) {
            if ((this.GetCIFSMountStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCIFSMountStatusCompleted(this, new GetCIFSMountStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("RemoteHost", IsNullable=true)]
        public string GetCIFSMountDetails(string LocalMountPoint, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string RemoteShare, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string Username, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string Password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string Domain) {
            object[] results = this.Invoke("GetCIFSMountDetails", new object[] {
                        LocalMountPoint});
            RemoteShare = ((string)(results[1]));
            Username = ((string)(results[2]));
            Password = ((string)(results[3]));
            Domain = ((string)(results[4]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCIFSMountDetailsAsync(string LocalMountPoint) {
            this.GetCIFSMountDetailsAsync(LocalMountPoint, null);
        }
        
        /// <remarks/>
        public void GetCIFSMountDetailsAsync(string LocalMountPoint, object userState) {
            if ((this.GetCIFSMountDetailsOperationCompleted == null)) {
                this.GetCIFSMountDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCIFSMountDetailsOperationCompleted);
            }
            this.InvokeAsync("GetCIFSMountDetails", new object[] {
                        LocalMountPoint}, this.GetCIFSMountDetailsOperationCompleted, userState);
        }
        
        private void OnGetCIFSMountDetailsOperationCompleted(object arg) {
            if ((this.GetCIFSMountDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCIFSMountDetailsCompleted(this, new GetCIFSMountDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Count")]
        public int GetSupportedNFSMountCount() {
            object[] results = this.Invoke("GetSupportedNFSMountCount", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetSupportedNFSMountCountAsync() {
            this.GetSupportedNFSMountCountAsync(null);
        }
        
        /// <remarks/>
        public void GetSupportedNFSMountCountAsync(object userState) {
            if ((this.GetSupportedNFSMountCountOperationCompleted == null)) {
                this.GetSupportedNFSMountCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSupportedNFSMountCountOperationCompleted);
            }
            this.InvokeAsync("GetSupportedNFSMountCount", new object[0], this.GetSupportedNFSMountCountOperationCompleted, userState);
        }
        
        private void OnGetSupportedNFSMountCountOperationCompleted(object arg) {
            if ((this.GetSupportedNFSMountCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSupportedNFSMountCountCompleted(this, new GetSupportedNFSMountCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool AddNFSMount(string LocalMountPoint, string RemoteHost, string RemotePath) {
            object[] results = this.Invoke("AddNFSMount", new object[] {
                        LocalMountPoint,
                        RemoteHost,
                        RemotePath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddNFSMountAsync(string LocalMountPoint, string RemoteHost, string RemotePath) {
            this.AddNFSMountAsync(LocalMountPoint, RemoteHost, RemotePath, null);
        }
        
        /// <remarks/>
        public void AddNFSMountAsync(string LocalMountPoint, string RemoteHost, string RemotePath, object userState) {
            if ((this.AddNFSMountOperationCompleted == null)) {
                this.AddNFSMountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNFSMountOperationCompleted);
            }
            this.InvokeAsync("AddNFSMount", new object[] {
                        LocalMountPoint,
                        RemoteHost,
                        RemotePath}, this.AddNFSMountOperationCompleted, userState);
        }
        
        private void OnAddNFSMountOperationCompleted(object arg) {
            if ((this.AddNFSMountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNFSMountCompleted(this, new AddNFSMountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool RemoveNFSMount(string LocalMountPoint) {
            object[] results = this.Invoke("RemoveNFSMount", new object[] {
                        LocalMountPoint});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveNFSMountAsync(string LocalMountPoint) {
            this.RemoveNFSMountAsync(LocalMountPoint, null);
        }
        
        /// <remarks/>
        public void RemoveNFSMountAsync(string LocalMountPoint, object userState) {
            if ((this.RemoveNFSMountOperationCompleted == null)) {
                this.RemoveNFSMountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveNFSMountOperationCompleted);
            }
            this.InvokeAsync("RemoveNFSMount", new object[] {
                        LocalMountPoint}, this.RemoveNFSMountOperationCompleted, userState);
        }
        
        private void OnRemoveNFSMountOperationCompleted(object arg) {
            if ((this.RemoveNFSMountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveNFSMountCompleted(this, new RemoveNFSMountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Output", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item")]
        public string[] GetNFSMounts() {
            object[] results = this.Invoke("GetNFSMounts", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetNFSMountsAsync() {
            this.GetNFSMountsAsync(null);
        }
        
        /// <remarks/>
        public void GetNFSMountsAsync(object userState) {
            if ((this.GetNFSMountsOperationCompleted == null)) {
                this.GetNFSMountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNFSMountsOperationCompleted);
            }
            this.InvokeAsync("GetNFSMounts", new object[0], this.GetNFSMountsOperationCompleted, userState);
        }
        
        private void OnGetNFSMountsOperationCompleted(object arg) {
            if ((this.GetNFSMountsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNFSMountsCompleted(this, new GetNFSMountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Status")]
        public LocalMountStatus GetNFSMountStatus(string LocalMountPoint) {
            object[] results = this.Invoke("GetNFSMountStatus", new object[] {
                        LocalMountPoint});
            return ((LocalMountStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetNFSMountStatusAsync(string LocalMountPoint) {
            this.GetNFSMountStatusAsync(LocalMountPoint, null);
        }
        
        /// <remarks/>
        public void GetNFSMountStatusAsync(string LocalMountPoint, object userState) {
            if ((this.GetNFSMountStatusOperationCompleted == null)) {
                this.GetNFSMountStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNFSMountStatusOperationCompleted);
            }
            this.InvokeAsync("GetNFSMountStatus", new object[] {
                        LocalMountPoint}, this.GetNFSMountStatusOperationCompleted, userState);
        }
        
        private void OnGetNFSMountStatusOperationCompleted(object arg) {
            if ((this.GetNFSMountStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNFSMountStatusCompleted(this, new GetNFSMountStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("RemoteHost", IsNullable=true)]
        public string GetNFSMountDetails(string LocalMountPoint, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] out string RemotePath) {
            object[] results = this.Invoke("GetNFSMountDetails", new object[] {
                        LocalMountPoint});
            RemotePath = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNFSMountDetailsAsync(string LocalMountPoint) {
            this.GetNFSMountDetailsAsync(LocalMountPoint, null);
        }
        
        /// <remarks/>
        public void GetNFSMountDetailsAsync(string LocalMountPoint, object userState) {
            if ((this.GetNFSMountDetailsOperationCompleted == null)) {
                this.GetNFSMountDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNFSMountDetailsOperationCompleted);
            }
            this.InvokeAsync("GetNFSMountDetails", new object[] {
                        LocalMountPoint}, this.GetNFSMountDetailsOperationCompleted, userState);
        }
        
        private void OnGetNFSMountDetailsOperationCompleted(object arg) {
            if ((this.GetNFSMountDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNFSMountDetailsCompleted(this, new GetNFSMountDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetAvalancheAccessEnabled(bool Enabled) {
            object[] results = this.Invoke("SetAvalancheAccessEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetAvalancheAccessEnabledAsync(bool Enabled) {
            this.SetAvalancheAccessEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetAvalancheAccessEnabledAsync(bool Enabled, object userState) {
            if ((this.SetAvalancheAccessEnabledOperationCompleted == null)) {
                this.SetAvalancheAccessEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAvalancheAccessEnabledOperationCompleted);
            }
            this.InvokeAsync("SetAvalancheAccessEnabled", new object[] {
                        Enabled}, this.SetAvalancheAccessEnabledOperationCompleted, userState);
        }
        
        private void OnSetAvalancheAccessEnabledOperationCompleted(object arg) {
            if ((this.SetAvalancheAccessEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAvalancheAccessEnabledCompleted(this, new SetAvalancheAccessEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetAvalancheAccessEnabled() {
            object[] results = this.Invoke("GetAvalancheAccessEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvalancheAccessEnabledAsync() {
            this.GetAvalancheAccessEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetAvalancheAccessEnabledAsync(object userState) {
            if ((this.GetAvalancheAccessEnabledOperationCompleted == null)) {
                this.GetAvalancheAccessEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvalancheAccessEnabledOperationCompleted);
            }
            this.InvokeAsync("GetAvalancheAccessEnabled", new object[0], this.GetAvalancheAccessEnabledOperationCompleted, userState);
        }
        
        private void OnGetAvalancheAccessEnabledOperationCompleted(object arg) {
            if ((this.GetAvalancheAccessEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvalancheAccessEnabledCompleted(this, new GetAvalancheAccessEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetAvalancheAgentName(string address) {
            object[] results = this.Invoke("SetAvalancheAgentName", new object[] {
                        address});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetAvalancheAgentNameAsync(string address) {
            this.SetAvalancheAgentNameAsync(address, null);
        }
        
        /// <remarks/>
        public void SetAvalancheAgentNameAsync(string address, object userState) {
            if ((this.SetAvalancheAgentNameOperationCompleted == null)) {
                this.SetAvalancheAgentNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAvalancheAgentNameOperationCompleted);
            }
            this.InvokeAsync("SetAvalancheAgentName", new object[] {
                        address}, this.SetAvalancheAgentNameOperationCompleted, userState);
        }
        
        private void OnSetAvalancheAgentNameOperationCompleted(object arg) {
            if ((this.SetAvalancheAgentNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAvalancheAgentNameCompleted(this, new SetAvalancheAgentNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("address", IsNullable=true)]
        public string GetAvalancheAgentName() {
            object[] results = this.Invoke("GetAvalancheAgentName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvalancheAgentNameAsync() {
            this.GetAvalancheAgentNameAsync(null);
        }
        
        /// <remarks/>
        public void GetAvalancheAgentNameAsync(object userState) {
            if ((this.GetAvalancheAgentNameOperationCompleted == null)) {
                this.GetAvalancheAgentNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvalancheAgentNameOperationCompleted);
            }
            this.InvokeAsync("GetAvalancheAgentName", new object[0], this.GetAvalancheAgentNameOperationCompleted, userState);
        }
        
        private void OnGetAvalancheAgentNameOperationCompleted(object arg) {
            if ((this.GetAvalancheAgentNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvalancheAgentNameCompleted(this, new GetAvalancheAgentNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetSmartSystemsEnabled(bool Enabled) {
            object[] results = this.Invoke("SetSmartSystemsEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSmartSystemsEnabledAsync(bool Enabled) {
            this.SetSmartSystemsEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetSmartSystemsEnabledAsync(bool Enabled, object userState) {
            if ((this.SetSmartSystemsEnabledOperationCompleted == null)) {
                this.SetSmartSystemsEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSmartSystemsEnabledOperationCompleted);
            }
            this.InvokeAsync("SetSmartSystemsEnabled", new object[] {
                        Enabled}, this.SetSmartSystemsEnabledOperationCompleted, userState);
        }
        
        private void OnSetSmartSystemsEnabledOperationCompleted(object arg) {
            if ((this.SetSmartSystemsEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSmartSystemsEnabledCompleted(this, new SetSmartSystemsEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetSmartSystemsEnabled() {
            object[] results = this.Invoke("GetSmartSystemsEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetSmartSystemsEnabledAsync() {
            this.GetSmartSystemsEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetSmartSystemsEnabledAsync(object userState) {
            if ((this.GetSmartSystemsEnabledOperationCompleted == null)) {
                this.GetSmartSystemsEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSmartSystemsEnabledOperationCompleted);
            }
            this.InvokeAsync("GetSmartSystemsEnabled", new object[0], this.GetSmartSystemsEnabledOperationCompleted, userState);
        }
        
        private void OnGetSmartSystemsEnabledOperationCompleted(object arg) {
            if ((this.GetSmartSystemsEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSmartSystemsEnabledCompleted(this, new GetSmartSystemsEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetSmartSystemsServerName(string address) {
            object[] results = this.Invoke("SetSmartSystemsServerName", new object[] {
                        address});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSmartSystemsServerNameAsync(string address) {
            this.SetSmartSystemsServerNameAsync(address, null);
        }
        
        /// <remarks/>
        public void SetSmartSystemsServerNameAsync(string address, object userState) {
            if ((this.SetSmartSystemsServerNameOperationCompleted == null)) {
                this.SetSmartSystemsServerNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSmartSystemsServerNameOperationCompleted);
            }
            this.InvokeAsync("SetSmartSystemsServerName", new object[] {
                        address}, this.SetSmartSystemsServerNameOperationCompleted, userState);
        }
        
        private void OnSetSmartSystemsServerNameOperationCompleted(object arg) {
            if ((this.SetSmartSystemsServerNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSmartSystemsServerNameCompleted(this, new SetSmartSystemsServerNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("address", IsNullable=true)]
        public string GetSmartSystemsServerName() {
            object[] results = this.Invoke("GetSmartSystemsServerName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSmartSystemsServerNameAsync() {
            this.GetSmartSystemsServerNameAsync(null);
        }
        
        /// <remarks/>
        public void GetSmartSystemsServerNameAsync(object userState) {
            if ((this.GetSmartSystemsServerNameOperationCompleted == null)) {
                this.GetSmartSystemsServerNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSmartSystemsServerNameOperationCompleted);
            }
            this.InvokeAsync("GetSmartSystemsServerName", new object[0], this.GetSmartSystemsServerNameOperationCompleted, userState);
        }
        
        private void OnGetSmartSystemsServerNameOperationCompleted(object arg) {
            if ((this.GetSmartSystemsServerNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSmartSystemsServerNameCompleted(this, new GetSmartSystemsServerNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetSNMPEnabled(bool Enabled) {
            object[] results = this.Invoke("SetSNMPEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSNMPEnabledAsync(bool Enabled) {
            this.SetSNMPEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetSNMPEnabledAsync(bool Enabled, object userState) {
            if ((this.SetSNMPEnabledOperationCompleted == null)) {
                this.SetSNMPEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSNMPEnabledOperationCompleted);
            }
            this.InvokeAsync("SetSNMPEnabled", new object[] {
                        Enabled}, this.SetSNMPEnabledOperationCompleted, userState);
        }
        
        private void OnSetSNMPEnabledOperationCompleted(object arg) {
            if ((this.SetSNMPEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSNMPEnabledCompleted(this, new SetSNMPEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetSNMPEnabled() {
            object[] results = this.Invoke("GetSNMPEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetSNMPEnabledAsync() {
            this.GetSNMPEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetSNMPEnabledAsync(object userState) {
            if ((this.GetSNMPEnabledOperationCompleted == null)) {
                this.GetSNMPEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSNMPEnabledOperationCompleted);
            }
            this.InvokeAsync("GetSNMPEnabled", new object[0], this.GetSNMPEnabledOperationCompleted, userState);
        }
        
        private void OnGetSNMPEnabledOperationCompleted(object arg) {
            if ((this.GetSNMPEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSNMPEnabledCompleted(this, new GetSNMPEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetSNMPCommunity(SNMPAccessMode mode, string community) {
            object[] results = this.Invoke("SetSNMPCommunity", new object[] {
                        mode,
                        community});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSNMPCommunityAsync(SNMPAccessMode mode, string community) {
            this.SetSNMPCommunityAsync(mode, community, null);
        }
        
        /// <remarks/>
        public void SetSNMPCommunityAsync(SNMPAccessMode mode, string community, object userState) {
            if ((this.SetSNMPCommunityOperationCompleted == null)) {
                this.SetSNMPCommunityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSNMPCommunityOperationCompleted);
            }
            this.InvokeAsync("SetSNMPCommunity", new object[] {
                        mode,
                        community}, this.SetSNMPCommunityOperationCompleted, userState);
        }
        
        private void OnSetSNMPCommunityOperationCompleted(object arg) {
            if ((this.SetSNMPCommunityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSNMPCommunityCompleted(this, new SetSNMPCommunityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("community", IsNullable=true)]
        public string GetSNMPCommunity(SNMPAccessMode mode) {
            object[] results = this.Invoke("GetSNMPCommunity", new object[] {
                        mode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSNMPCommunityAsync(SNMPAccessMode mode) {
            this.GetSNMPCommunityAsync(mode, null);
        }
        
        /// <remarks/>
        public void GetSNMPCommunityAsync(SNMPAccessMode mode, object userState) {
            if ((this.GetSNMPCommunityOperationCompleted == null)) {
                this.GetSNMPCommunityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSNMPCommunityOperationCompleted);
            }
            this.InvokeAsync("GetSNMPCommunity", new object[] {
                        mode}, this.GetSNMPCommunityOperationCompleted, userState);
        }
        
        private void OnGetSNMPCommunityOperationCompleted(object arg) {
            if ((this.GetSNMPCommunityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSNMPCommunityCompleted(this, new GetSNMPCommunityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetSNMPTrapTarget(int targetindex, string name) {
            object[] results = this.Invoke("SetSNMPTrapTarget", new object[] {
                        targetindex,
                        name});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSNMPTrapTargetAsync(int targetindex, string name) {
            this.SetSNMPTrapTargetAsync(targetindex, name, null);
        }
        
        /// <remarks/>
        public void SetSNMPTrapTargetAsync(int targetindex, string name, object userState) {
            if ((this.SetSNMPTrapTargetOperationCompleted == null)) {
                this.SetSNMPTrapTargetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSNMPTrapTargetOperationCompleted);
            }
            this.InvokeAsync("SetSNMPTrapTarget", new object[] {
                        targetindex,
                        name}, this.SetSNMPTrapTargetOperationCompleted, userState);
        }
        
        private void OnSetSNMPTrapTargetOperationCompleted(object arg) {
            if ((this.SetSNMPTrapTargetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSNMPTrapTargetCompleted(this, new SetSNMPTrapTargetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("name", IsNullable=true)]
        public string GetSNMPTrapTarget(int targetindex) {
            object[] results = this.Invoke("GetSNMPTrapTarget", new object[] {
                        targetindex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSNMPTrapTargetAsync(int targetindex) {
            this.GetSNMPTrapTargetAsync(targetindex, null);
        }
        
        /// <remarks/>
        public void GetSNMPTrapTargetAsync(int targetindex, object userState) {
            if ((this.GetSNMPTrapTargetOperationCompleted == null)) {
                this.GetSNMPTrapTargetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSNMPTrapTargetOperationCompleted);
            }
            this.InvokeAsync("GetSNMPTrapTarget", new object[] {
                        targetindex}, this.GetSNMPTrapTargetOperationCompleted, userState);
        }
        
        private void OnGetSNMPTrapTargetOperationCompleted(object arg) {
            if ((this.GetSNMPTrapTargetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSNMPTrapTargetCompleted(this, new GetSNMPTrapTargetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetSNMPv3Username(SNMPAccessMode mode, string username) {
            object[] results = this.Invoke("SetSNMPv3Username", new object[] {
                        mode,
                        username});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSNMPv3UsernameAsync(SNMPAccessMode mode, string username) {
            this.SetSNMPv3UsernameAsync(mode, username, null);
        }
        
        /// <remarks/>
        public void SetSNMPv3UsernameAsync(SNMPAccessMode mode, string username, object userState) {
            if ((this.SetSNMPv3UsernameOperationCompleted == null)) {
                this.SetSNMPv3UsernameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSNMPv3UsernameOperationCompleted);
            }
            this.InvokeAsync("SetSNMPv3Username", new object[] {
                        mode,
                        username}, this.SetSNMPv3UsernameOperationCompleted, userState);
        }
        
        private void OnSetSNMPv3UsernameOperationCompleted(object arg) {
            if ((this.SetSNMPv3UsernameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSNMPv3UsernameCompleted(this, new SetSNMPv3UsernameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("username", IsNullable=true)]
        public string GetSNMPv3Username(SNMPAccessMode mode) {
            object[] results = this.Invoke("GetSNMPv3Username", new object[] {
                        mode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSNMPv3UsernameAsync(SNMPAccessMode mode) {
            this.GetSNMPv3UsernameAsync(mode, null);
        }
        
        /// <remarks/>
        public void GetSNMPv3UsernameAsync(SNMPAccessMode mode, object userState) {
            if ((this.GetSNMPv3UsernameOperationCompleted == null)) {
                this.GetSNMPv3UsernameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSNMPv3UsernameOperationCompleted);
            }
            this.InvokeAsync("GetSNMPv3Username", new object[] {
                        mode}, this.GetSNMPv3UsernameOperationCompleted, userState);
        }
        
        private void OnGetSNMPv3UsernameOperationCompleted(object arg) {
            if ((this.GetSNMPv3UsernameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSNMPv3UsernameCompleted(this, new GetSNMPv3UsernameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetSNMPv3Password(SNMPAccessMode mode, string password) {
            object[] results = this.Invoke("SetSNMPv3Password", new object[] {
                        mode,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSNMPv3PasswordAsync(SNMPAccessMode mode, string password) {
            this.SetSNMPv3PasswordAsync(mode, password, null);
        }
        
        /// <remarks/>
        public void SetSNMPv3PasswordAsync(SNMPAccessMode mode, string password, object userState) {
            if ((this.SetSNMPv3PasswordOperationCompleted == null)) {
                this.SetSNMPv3PasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSNMPv3PasswordOperationCompleted);
            }
            this.InvokeAsync("SetSNMPv3Password", new object[] {
                        mode,
                        password}, this.SetSNMPv3PasswordOperationCompleted, userState);
        }
        
        private void OnSetSNMPv3PasswordOperationCompleted(object arg) {
            if ((this.SetSNMPv3PasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSNMPv3PasswordCompleted(this, new SetSNMPv3PasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("password", IsNullable=true)]
        public string GetSNMPv3Password(SNMPAccessMode mode) {
            object[] results = this.Invoke("GetSNMPv3Password", new object[] {
                        mode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSNMPv3PasswordAsync(SNMPAccessMode mode) {
            this.GetSNMPv3PasswordAsync(mode, null);
        }
        
        /// <remarks/>
        public void GetSNMPv3PasswordAsync(SNMPAccessMode mode, object userState) {
            if ((this.GetSNMPv3PasswordOperationCompleted == null)) {
                this.GetSNMPv3PasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSNMPv3PasswordOperationCompleted);
            }
            this.InvokeAsync("GetSNMPv3Password", new object[] {
                        mode}, this.GetSNMPv3PasswordOperationCompleted, userState);
        }
        
        private void OnGetSNMPv3PasswordOperationCompleted(object arg) {
            if ((this.GetSNMPv3PasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSNMPv3PasswordCompleted(this, new GetSNMPv3PasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetSNMPAuthenticationType(SNMPAccessMode mode, SNMPAuthenticationType type) {
            object[] results = this.Invoke("SetSNMPAuthenticationType", new object[] {
                        mode,
                        type});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSNMPAuthenticationTypeAsync(SNMPAccessMode mode, SNMPAuthenticationType type) {
            this.SetSNMPAuthenticationTypeAsync(mode, type, null);
        }
        
        /// <remarks/>
        public void SetSNMPAuthenticationTypeAsync(SNMPAccessMode mode, SNMPAuthenticationType type, object userState) {
            if ((this.SetSNMPAuthenticationTypeOperationCompleted == null)) {
                this.SetSNMPAuthenticationTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSNMPAuthenticationTypeOperationCompleted);
            }
            this.InvokeAsync("SetSNMPAuthenticationType", new object[] {
                        mode,
                        type}, this.SetSNMPAuthenticationTypeOperationCompleted, userState);
        }
        
        private void OnSetSNMPAuthenticationTypeOperationCompleted(object arg) {
            if ((this.SetSNMPAuthenticationTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSNMPAuthenticationTypeCompleted(this, new SetSNMPAuthenticationTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("type")]
        public SNMPAuthenticationType GetSNMPAuthenticationType(SNMPAccessMode mode) {
            object[] results = this.Invoke("GetSNMPAuthenticationType", new object[] {
                        mode});
            return ((SNMPAuthenticationType)(results[0]));
        }
        
        /// <remarks/>
        public void GetSNMPAuthenticationTypeAsync(SNMPAccessMode mode) {
            this.GetSNMPAuthenticationTypeAsync(mode, null);
        }
        
        /// <remarks/>
        public void GetSNMPAuthenticationTypeAsync(SNMPAccessMode mode, object userState) {
            if ((this.GetSNMPAuthenticationTypeOperationCompleted == null)) {
                this.GetSNMPAuthenticationTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSNMPAuthenticationTypeOperationCompleted);
            }
            this.InvokeAsync("GetSNMPAuthenticationType", new object[] {
                        mode}, this.GetSNMPAuthenticationTypeOperationCompleted, userState);
        }
        
        private void OnGetSNMPAuthenticationTypeOperationCompleted(object arg) {
            if ((this.GetSNMPAuthenticationTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSNMPAuthenticationTypeCompleted(this, new GetSNMPAuthenticationTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetSNMPPrivacyType(SNMPAccessMode mode, SNMPPrivacyType type) {
            object[] results = this.Invoke("SetSNMPPrivacyType", new object[] {
                        mode,
                        type});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSNMPPrivacyTypeAsync(SNMPAccessMode mode, SNMPPrivacyType type) {
            this.SetSNMPPrivacyTypeAsync(mode, type, null);
        }
        
        /// <remarks/>
        public void SetSNMPPrivacyTypeAsync(SNMPAccessMode mode, SNMPPrivacyType type, object userState) {
            if ((this.SetSNMPPrivacyTypeOperationCompleted == null)) {
                this.SetSNMPPrivacyTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSNMPPrivacyTypeOperationCompleted);
            }
            this.InvokeAsync("SetSNMPPrivacyType", new object[] {
                        mode,
                        type}, this.SetSNMPPrivacyTypeOperationCompleted, userState);
        }
        
        private void OnSetSNMPPrivacyTypeOperationCompleted(object arg) {
            if ((this.SetSNMPPrivacyTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSNMPPrivacyTypeCompleted(this, new SetSNMPPrivacyTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("type")]
        public SNMPPrivacyType GetSNMPPrivacyType(SNMPAccessMode mode) {
            object[] results = this.Invoke("GetSNMPPrivacyType", new object[] {
                        mode});
            return ((SNMPPrivacyType)(results[0]));
        }
        
        /// <remarks/>
        public void GetSNMPPrivacyTypeAsync(SNMPAccessMode mode) {
            this.GetSNMPPrivacyTypeAsync(mode, null);
        }
        
        /// <remarks/>
        public void GetSNMPPrivacyTypeAsync(SNMPAccessMode mode, object userState) {
            if ((this.GetSNMPPrivacyTypeOperationCompleted == null)) {
                this.GetSNMPPrivacyTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSNMPPrivacyTypeOperationCompleted);
            }
            this.InvokeAsync("GetSNMPPrivacyType", new object[] {
                        mode}, this.GetSNMPPrivacyTypeOperationCompleted, userState);
        }
        
        private void OnGetSNMPPrivacyTypeOperationCompleted(object arg) {
            if ((this.GetSNMPPrivacyTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSNMPPrivacyTypeCompleted(this, new GetSNMPPrivacyTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetSSHServerEnabled(bool Enabled) {
            object[] results = this.Invoke("SetSSHServerEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetSSHServerEnabledAsync(bool Enabled) {
            this.SetSSHServerEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetSSHServerEnabledAsync(bool Enabled, object userState) {
            if ((this.SetSSHServerEnabledOperationCompleted == null)) {
                this.SetSSHServerEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSSHServerEnabledOperationCompleted);
            }
            this.InvokeAsync("SetSSHServerEnabled", new object[] {
                        Enabled}, this.SetSSHServerEnabledOperationCompleted, userState);
        }
        
        private void OnSetSSHServerEnabledOperationCompleted(object arg) {
            if ((this.SetSSHServerEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSSHServerEnabledCompleted(this, new SetSSHServerEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetSSHServerEnabled() {
            object[] results = this.Invoke("GetSSHServerEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetSSHServerEnabledAsync() {
            this.GetSSHServerEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetSSHServerEnabledAsync(object userState) {
            if ((this.GetSSHServerEnabledOperationCompleted == null)) {
                this.GetSSHServerEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSSHServerEnabledOperationCompleted);
            }
            this.InvokeAsync("GetSSHServerEnabled", new object[0], this.GetSSHServerEnabledOperationCompleted, userState);
        }
        
        private void OnGetSSHServerEnabledOperationCompleted(object arg) {
            if ((this.GetSSHServerEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSSHServerEnabledCompleted(this, new GetSSHServerEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetFTPServerEnabled(bool Enabled) {
            object[] results = this.Invoke("SetFTPServerEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetFTPServerEnabledAsync(bool Enabled) {
            this.SetFTPServerEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetFTPServerEnabledAsync(bool Enabled, object userState) {
            if ((this.SetFTPServerEnabledOperationCompleted == null)) {
                this.SetFTPServerEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFTPServerEnabledOperationCompleted);
            }
            this.InvokeAsync("SetFTPServerEnabled", new object[] {
                        Enabled}, this.SetFTPServerEnabledOperationCompleted, userState);
        }
        
        private void OnSetFTPServerEnabledOperationCompleted(object arg) {
            if ((this.SetFTPServerEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFTPServerEnabledCompleted(this, new SetFTPServerEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetFTPServerEnabled() {
            object[] results = this.Invoke("GetFTPServerEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetFTPServerEnabledAsync() {
            this.GetFTPServerEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetFTPServerEnabledAsync(object userState) {
            if ((this.GetFTPServerEnabledOperationCompleted == null)) {
                this.GetFTPServerEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFTPServerEnabledOperationCompleted);
            }
            this.InvokeAsync("GetFTPServerEnabled", new object[0], this.GetFTPServerEnabledOperationCompleted, userState);
        }
        
        private void OnGetFTPServerEnabledOperationCompleted(object arg) {
            if ((this.GetFTPServerEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFTPServerEnabledCompleted(this, new GetFTPServerEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetTelnetServerEnabled(bool Enabled) {
            object[] results = this.Invoke("SetTelnetServerEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetTelnetServerEnabledAsync(bool Enabled) {
            this.SetTelnetServerEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetTelnetServerEnabledAsync(bool Enabled, object userState) {
            if ((this.SetTelnetServerEnabledOperationCompleted == null)) {
                this.SetTelnetServerEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTelnetServerEnabledOperationCompleted);
            }
            this.InvokeAsync("SetTelnetServerEnabled", new object[] {
                        Enabled}, this.SetTelnetServerEnabledOperationCompleted, userState);
        }
        
        private void OnSetTelnetServerEnabledOperationCompleted(object arg) {
            if ((this.SetTelnetServerEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTelnetServerEnabledCompleted(this, new SetTelnetServerEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetTelnetServerEnabled() {
            object[] results = this.Invoke("GetTelnetServerEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetTelnetServerEnabledAsync() {
            this.GetTelnetServerEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetTelnetServerEnabledAsync(object userState) {
            if ((this.GetTelnetServerEnabledOperationCompleted == null)) {
                this.GetTelnetServerEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTelnetServerEnabledOperationCompleted);
            }
            this.InvokeAsync("GetTelnetServerEnabled", new object[0], this.GetTelnetServerEnabledOperationCompleted, userState);
        }
        
        private void OnGetTelnetServerEnabledOperationCompleted(object arg) {
            if ((this.GetTelnetServerEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTelnetServerEnabledCompleted(this, new GetTelnetServerEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBonjourAdvertisementEnabled(bool Enabled) {
            object[] results = this.Invoke("SetBonjourAdvertisementEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBonjourAdvertisementEnabledAsync(bool Enabled) {
            this.SetBonjourAdvertisementEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetBonjourAdvertisementEnabledAsync(bool Enabled, object userState) {
            if ((this.SetBonjourAdvertisementEnabledOperationCompleted == null)) {
                this.SetBonjourAdvertisementEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBonjourAdvertisementEnabledOperationCompleted);
            }
            this.InvokeAsync("SetBonjourAdvertisementEnabled", new object[] {
                        Enabled}, this.SetBonjourAdvertisementEnabledOperationCompleted, userState);
        }
        
        private void OnSetBonjourAdvertisementEnabledOperationCompleted(object arg) {
            if ((this.SetBonjourAdvertisementEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBonjourAdvertisementEnabledCompleted(this, new SetBonjourAdvertisementEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetBonjourAdvertisementEnabled() {
            object[] results = this.Invoke("GetBonjourAdvertisementEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetBonjourAdvertisementEnabledAsync() {
            this.GetBonjourAdvertisementEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetBonjourAdvertisementEnabledAsync(object userState) {
            if ((this.GetBonjourAdvertisementEnabledOperationCompleted == null)) {
                this.GetBonjourAdvertisementEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBonjourAdvertisementEnabledOperationCompleted);
            }
            this.InvokeAsync("GetBonjourAdvertisementEnabled", new object[0], this.GetBonjourAdvertisementEnabledOperationCompleted, userState);
        }
        
        private void OnGetBonjourAdvertisementEnabledOperationCompleted(object arg) {
            if ((this.GetBonjourAdvertisementEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBonjourAdvertisementEnabledCompleted(this, new GetBonjourAdvertisementEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetUPnPDiscoveryEnabled(bool Enabled) {
            object[] results = this.Invoke("SetUPnPDiscoveryEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetUPnPDiscoveryEnabledAsync(bool Enabled) {
            this.SetUPnPDiscoveryEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetUPnPDiscoveryEnabledAsync(bool Enabled, object userState) {
            if ((this.SetUPnPDiscoveryEnabledOperationCompleted == null)) {
                this.SetUPnPDiscoveryEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUPnPDiscoveryEnabledOperationCompleted);
            }
            this.InvokeAsync("SetUPnPDiscoveryEnabled", new object[] {
                        Enabled}, this.SetUPnPDiscoveryEnabledOperationCompleted, userState);
        }
        
        private void OnSetUPnPDiscoveryEnabledOperationCompleted(object arg) {
            if ((this.SetUPnPDiscoveryEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUPnPDiscoveryEnabledCompleted(this, new SetUPnPDiscoveryEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetUPnPDiscoveryEnabled() {
            object[] results = this.Invoke("GetUPnPDiscoveryEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetUPnPDiscoveryEnabledAsync() {
            this.GetUPnPDiscoveryEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetUPnPDiscoveryEnabledAsync(object userState) {
            if ((this.GetUPnPDiscoveryEnabledOperationCompleted == null)) {
                this.GetUPnPDiscoveryEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUPnPDiscoveryEnabledOperationCompleted);
            }
            this.InvokeAsync("GetUPnPDiscoveryEnabled", new object[0], this.GetUPnPDiscoveryEnabledOperationCompleted, userState);
        }
        
        private void OnGetUPnPDiscoveryEnabledOperationCompleted(object arg) {
            if ((this.GetUPnPDiscoveryEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUPnPDiscoveryEnabledCompleted(this, new GetUPnPDiscoveryEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWebserverInsecureEnabled(bool Enabled) {
            object[] results = this.Invoke("SetWebserverInsecureEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWebserverInsecureEnabledAsync(bool Enabled) {
            this.SetWebserverInsecureEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetWebserverInsecureEnabledAsync(bool Enabled, object userState) {
            if ((this.SetWebserverInsecureEnabledOperationCompleted == null)) {
                this.SetWebserverInsecureEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWebserverInsecureEnabledOperationCompleted);
            }
            this.InvokeAsync("SetWebserverInsecureEnabled", new object[] {
                        Enabled}, this.SetWebserverInsecureEnabledOperationCompleted, userState);
        }
        
        private void OnSetWebserverInsecureEnabledOperationCompleted(object arg) {
            if ((this.SetWebserverInsecureEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWebserverInsecureEnabledCompleted(this, new SetWebserverInsecureEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool GetWebserverInsecureEnabled() {
            object[] results = this.Invoke("GetWebserverInsecureEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetWebserverInsecureEnabledAsync() {
            this.GetWebserverInsecureEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetWebserverInsecureEnabledAsync(object userState) {
            if ((this.GetWebserverInsecureEnabledOperationCompleted == null)) {
                this.GetWebserverInsecureEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebserverInsecureEnabledOperationCompleted);
            }
            this.InvokeAsync("GetWebserverInsecureEnabled", new object[0], this.GetWebserverInsecureEnabledOperationCompleted, userState);
        }
        
        private void OnGetWebserverInsecureEnabledOperationCompleted(object arg) {
            if ((this.GetWebserverInsecureEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebserverInsecureEnabledCompleted(this, new GetWebserverInsecureEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetWebserverSecureEnabled(bool Enabled) {
            object[] results = this.Invoke("SetWebserverSecureEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetWebserverSecureEnabledAsync(bool Enabled) {
            this.SetWebserverSecureEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetWebserverSecureEnabledAsync(bool Enabled, object userState) {
            if ((this.SetWebserverSecureEnabledOperationCompleted == null)) {
                this.SetWebserverSecureEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWebserverSecureEnabledOperationCompleted);
            }
            this.InvokeAsync("SetWebserverSecureEnabled", new object[] {
                        Enabled}, this.SetWebserverSecureEnabledOperationCompleted, userState);
        }
        
        private void OnSetWebserverSecureEnabledOperationCompleted(object arg) {
            if ((this.SetWebserverSecureEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWebserverSecureEnabledCompleted(this, new SetWebserverSecureEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool GetWebserverSecureEnabled() {
            object[] results = this.Invoke("GetWebserverSecureEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetWebserverSecureEnabledAsync() {
            this.GetWebserverSecureEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetWebserverSecureEnabledAsync(object userState) {
            if ((this.GetWebserverSecureEnabledOperationCompleted == null)) {
                this.GetWebserverSecureEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebserverSecureEnabledOperationCompleted);
            }
            this.InvokeAsync("GetWebserverSecureEnabled", new object[0], this.GetWebserverSecureEnabledOperationCompleted, userState);
        }
        
        private void OnGetWebserverSecureEnabledOperationCompleted(object arg) {
            if ((this.GetWebserverSecureEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebserverSecureEnabledCompleted(this, new GetWebserverSecureEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetDeviceWebServicesInsecureEnabled(bool Enabled) {
            object[] results = this.Invoke("SetDeviceWebServicesInsecureEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDeviceWebServicesInsecureEnabledAsync(bool Enabled) {
            this.SetDeviceWebServicesInsecureEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetDeviceWebServicesInsecureEnabledAsync(bool Enabled, object userState) {
            if ((this.SetDeviceWebServicesInsecureEnabledOperationCompleted == null)) {
                this.SetDeviceWebServicesInsecureEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDeviceWebServicesInsecureEnabledOperationCompleted);
            }
            this.InvokeAsync("SetDeviceWebServicesInsecureEnabled", new object[] {
                        Enabled}, this.SetDeviceWebServicesInsecureEnabledOperationCompleted, userState);
        }
        
        private void OnSetDeviceWebServicesInsecureEnabledOperationCompleted(object arg) {
            if ((this.SetDeviceWebServicesInsecureEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDeviceWebServicesInsecureEnabledCompleted(this, new SetDeviceWebServicesInsecureEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool GetDeviceWebServicesInsecureEnabled() {
            object[] results = this.Invoke("GetDeviceWebServicesInsecureEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetDeviceWebServicesInsecureEnabledAsync() {
            this.GetDeviceWebServicesInsecureEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetDeviceWebServicesInsecureEnabledAsync(object userState) {
            if ((this.GetDeviceWebServicesInsecureEnabledOperationCompleted == null)) {
                this.GetDeviceWebServicesInsecureEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeviceWebServicesInsecureEnabledOperationCompleted);
            }
            this.InvokeAsync("GetDeviceWebServicesInsecureEnabled", new object[0], this.GetDeviceWebServicesInsecureEnabledOperationCompleted, userState);
        }
        
        private void OnGetDeviceWebServicesInsecureEnabledOperationCompleted(object arg) {
            if ((this.GetDeviceWebServicesInsecureEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeviceWebServicesInsecureEnabledCompleted(this, new GetDeviceWebServicesInsecureEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetDeviceWebServicesSecureEnabled(bool Enabled) {
            object[] results = this.Invoke("SetDeviceWebServicesSecureEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDeviceWebServicesSecureEnabledAsync(bool Enabled) {
            this.SetDeviceWebServicesSecureEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetDeviceWebServicesSecureEnabledAsync(bool Enabled, object userState) {
            if ((this.SetDeviceWebServicesSecureEnabledOperationCompleted == null)) {
                this.SetDeviceWebServicesSecureEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDeviceWebServicesSecureEnabledOperationCompleted);
            }
            this.InvokeAsync("SetDeviceWebServicesSecureEnabled", new object[] {
                        Enabled}, this.SetDeviceWebServicesSecureEnabledOperationCompleted, userState);
        }
        
        private void OnSetDeviceWebServicesSecureEnabledOperationCompleted(object arg) {
            if ((this.SetDeviceWebServicesSecureEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDeviceWebServicesSecureEnabledCompleted(this, new SetDeviceWebServicesSecureEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool GetDeviceWebServicesSecureEnabled() {
            object[] results = this.Invoke("GetDeviceWebServicesSecureEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetDeviceWebServicesSecureEnabledAsync() {
            this.GetDeviceWebServicesSecureEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetDeviceWebServicesSecureEnabledAsync(object userState) {
            if ((this.GetDeviceWebServicesSecureEnabledOperationCompleted == null)) {
                this.GetDeviceWebServicesSecureEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeviceWebServicesSecureEnabledOperationCompleted);
            }
            this.InvokeAsync("GetDeviceWebServicesSecureEnabled", new object[0], this.GetDeviceWebServicesSecureEnabledOperationCompleted, userState);
        }
        
        private void OnGetDeviceWebServicesSecureEnabledOperationCompleted(object arg) {
            if ((this.GetDeviceWebServicesSecureEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeviceWebServicesSecureEnabledCompleted(this, new GetDeviceWebServicesSecureEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetCIFSServiceEnabled(bool Enabled) {
            object[] results = this.Invoke("SetCIFSServiceEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetCIFSServiceEnabledAsync(bool Enabled) {
            this.SetCIFSServiceEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetCIFSServiceEnabledAsync(bool Enabled, object userState) {
            if ((this.SetCIFSServiceEnabledOperationCompleted == null)) {
                this.SetCIFSServiceEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCIFSServiceEnabledOperationCompleted);
            }
            this.InvokeAsync("SetCIFSServiceEnabled", new object[] {
                        Enabled}, this.SetCIFSServiceEnabledOperationCompleted, userState);
        }
        
        private void OnSetCIFSServiceEnabledOperationCompleted(object arg) {
            if ((this.SetCIFSServiceEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCIFSServiceEnabledCompleted(this, new SetCIFSServiceEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool GetCIFSServiceEnabled() {
            object[] results = this.Invoke("GetCIFSServiceEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetCIFSServiceEnabledAsync() {
            this.GetCIFSServiceEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetCIFSServiceEnabledAsync(object userState) {
            if ((this.GetCIFSServiceEnabledOperationCompleted == null)) {
                this.GetCIFSServiceEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCIFSServiceEnabledOperationCompleted);
            }
            this.InvokeAsync("GetCIFSServiceEnabled", new object[0], this.GetCIFSServiceEnabledOperationCompleted, userState);
        }
        
        private void OnGetCIFSServiceEnabledOperationCompleted(object arg) {
            if ((this.GetCIFSServiceEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCIFSServiceEnabledCompleted(this, new GetCIFSServiceEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetCIFSServiceUsername(string Username) {
            object[] results = this.Invoke("SetCIFSServiceUsername", new object[] {
                        Username});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetCIFSServiceUsernameAsync(string Username) {
            this.SetCIFSServiceUsernameAsync(Username, null);
        }
        
        /// <remarks/>
        public void SetCIFSServiceUsernameAsync(string Username, object userState) {
            if ((this.SetCIFSServiceUsernameOperationCompleted == null)) {
                this.SetCIFSServiceUsernameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCIFSServiceUsernameOperationCompleted);
            }
            this.InvokeAsync("SetCIFSServiceUsername", new object[] {
                        Username}, this.SetCIFSServiceUsernameOperationCompleted, userState);
        }
        
        private void OnSetCIFSServiceUsernameOperationCompleted(object arg) {
            if ((this.SetCIFSServiceUsernameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCIFSServiceUsernameCompleted(this, new SetCIFSServiceUsernameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Username")]
        public string GetCIFSServiceUsername() {
            object[] results = this.Invoke("GetCIFSServiceUsername", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCIFSServiceUsernameAsync() {
            this.GetCIFSServiceUsernameAsync(null);
        }
        
        /// <remarks/>
        public void GetCIFSServiceUsernameAsync(object userState) {
            if ((this.GetCIFSServiceUsernameOperationCompleted == null)) {
                this.GetCIFSServiceUsernameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCIFSServiceUsernameOperationCompleted);
            }
            this.InvokeAsync("GetCIFSServiceUsername", new object[0], this.GetCIFSServiceUsernameOperationCompleted, userState);
        }
        
        private void OnGetCIFSServiceUsernameOperationCompleted(object arg) {
            if ((this.GetCIFSServiceUsernameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCIFSServiceUsernameCompleted(this, new GetCIFSServiceUsernameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetCIFSServicePassword(string Password) {
            object[] results = this.Invoke("SetCIFSServicePassword", new object[] {
                        Password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetCIFSServicePasswordAsync(string Password) {
            this.SetCIFSServicePasswordAsync(Password, null);
        }
        
        /// <remarks/>
        public void SetCIFSServicePasswordAsync(string Password, object userState) {
            if ((this.SetCIFSServicePasswordOperationCompleted == null)) {
                this.SetCIFSServicePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCIFSServicePasswordOperationCompleted);
            }
            this.InvokeAsync("SetCIFSServicePassword", new object[] {
                        Password}, this.SetCIFSServicePasswordOperationCompleted, userState);
        }
        
        private void OnSetCIFSServicePasswordOperationCompleted(object arg) {
            if ((this.SetCIFSServicePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCIFSServicePasswordCompleted(this, new SetCIFSServicePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Password")]
        public string GetCIFSServicePassword() {
            object[] results = this.Invoke("GetCIFSServicePassword", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCIFSServicePasswordAsync() {
            this.GetCIFSServicePasswordAsync(null);
        }
        
        /// <remarks/>
        public void GetCIFSServicePasswordAsync(object userState) {
            if ((this.GetCIFSServicePasswordOperationCompleted == null)) {
                this.GetCIFSServicePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCIFSServicePasswordOperationCompleted);
            }
            this.InvokeAsync("GetCIFSServicePassword", new object[0], this.GetCIFSServicePasswordOperationCompleted, userState);
        }
        
        private void OnGetCIFSServicePasswordOperationCompleted(object arg) {
            if ((this.GetCIFSServicePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCIFSServicePasswordCompleted(this, new GetCIFSServicePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool EdgewareSetAutoStart(string appname, bool Autostart) {
            object[] results = this.Invoke("EdgewareSetAutoStart", new object[] {
                        appname,
                        Autostart});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EdgewareSetAutoStartAsync(string appname, bool Autostart) {
            this.EdgewareSetAutoStartAsync(appname, Autostart, null);
        }
        
        /// <remarks/>
        public void EdgewareSetAutoStartAsync(string appname, bool Autostart, object userState) {
            if ((this.EdgewareSetAutoStartOperationCompleted == null)) {
                this.EdgewareSetAutoStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEdgewareSetAutoStartOperationCompleted);
            }
            this.InvokeAsync("EdgewareSetAutoStart", new object[] {
                        appname,
                        Autostart}, this.EdgewareSetAutoStartOperationCompleted, userState);
        }
        
        private void OnEdgewareSetAutoStartOperationCompleted(object arg) {
            if ((this.EdgewareSetAutoStartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EdgewareSetAutoStartCompleted(this, new EdgewareSetAutoStartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool EdgewareGetAutoStart(string appname) {
            object[] results = this.Invoke("EdgewareGetAutoStart", new object[] {
                        appname});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EdgewareGetAutoStartAsync(string appname) {
            this.EdgewareGetAutoStartAsync(appname, null);
        }
        
        /// <remarks/>
        public void EdgewareGetAutoStartAsync(string appname, object userState) {
            if ((this.EdgewareGetAutoStartOperationCompleted == null)) {
                this.EdgewareGetAutoStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEdgewareGetAutoStartOperationCompleted);
            }
            this.InvokeAsync("EdgewareGetAutoStart", new object[] {
                        appname}, this.EdgewareGetAutoStartOperationCompleted, userState);
        }
        
        private void OnEdgewareGetAutoStartOperationCompleted(object arg) {
            if ((this.EdgewareGetAutoStartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EdgewareGetAutoStartCompleted(this, new EdgewareGetAutoStartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool EdgewareStartApplication(string appname) {
            object[] results = this.Invoke("EdgewareStartApplication", new object[] {
                        appname});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EdgewareStartApplicationAsync(string appname) {
            this.EdgewareStartApplicationAsync(appname, null);
        }
        
        /// <remarks/>
        public void EdgewareStartApplicationAsync(string appname, object userState) {
            if ((this.EdgewareStartApplicationOperationCompleted == null)) {
                this.EdgewareStartApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEdgewareStartApplicationOperationCompleted);
            }
            this.InvokeAsync("EdgewareStartApplication", new object[] {
                        appname}, this.EdgewareStartApplicationOperationCompleted, userState);
        }
        
        private void OnEdgewareStartApplicationOperationCompleted(object arg) {
            if ((this.EdgewareStartApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EdgewareStartApplicationCompleted(this, new EdgewareStartApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool EdgewareStopApplication(string appname) {
            object[] results = this.Invoke("EdgewareStopApplication", new object[] {
                        appname});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EdgewareStopApplicationAsync(string appname) {
            this.EdgewareStopApplicationAsync(appname, null);
        }
        
        /// <remarks/>
        public void EdgewareStopApplicationAsync(string appname, object userState) {
            if ((this.EdgewareStopApplicationOperationCompleted == null)) {
                this.EdgewareStopApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEdgewareStopApplicationOperationCompleted);
            }
            this.InvokeAsync("EdgewareStopApplication", new object[] {
                        appname}, this.EdgewareStopApplicationOperationCompleted, userState);
        }
        
        private void OnEdgewareStopApplicationOperationCompleted(object arg) {
            if ((this.EdgewareStopApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EdgewareStopApplicationCompleted(this, new EdgewareStopApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool EdgewareUninstallApplication(string appname) {
            object[] results = this.Invoke("EdgewareUninstallApplication", new object[] {
                        appname});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EdgewareUninstallApplicationAsync(string appname) {
            this.EdgewareUninstallApplicationAsync(appname, null);
        }
        
        /// <remarks/>
        public void EdgewareUninstallApplicationAsync(string appname, object userState) {
            if ((this.EdgewareUninstallApplicationOperationCompleted == null)) {
                this.EdgewareUninstallApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEdgewareUninstallApplicationOperationCompleted);
            }
            this.InvokeAsync("EdgewareUninstallApplication", new object[] {
                        appname}, this.EdgewareUninstallApplicationOperationCompleted, userState);
        }
        
        private void OnEdgewareUninstallApplicationOperationCompleted(object arg) {
            if ((this.EdgewareUninstallApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EdgewareUninstallApplicationCompleted(this, new EdgewareUninstallApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool UserappUninstallApplication(string appname) {
            object[] results = this.Invoke("UserappUninstallApplication", new object[] {
                        appname});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UserappUninstallApplicationAsync(string appname) {
            this.UserappUninstallApplicationAsync(appname, null);
        }
        
        /// <remarks/>
        public void UserappUninstallApplicationAsync(string appname, object userState) {
            if ((this.UserappUninstallApplicationOperationCompleted == null)) {
                this.UserappUninstallApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserappUninstallApplicationOperationCompleted);
            }
            this.InvokeAsync("UserappUninstallApplication", new object[] {
                        appname}, this.UserappUninstallApplicationOperationCompleted, userState);
        }
        
        private void OnUserappUninstallApplicationOperationCompleted(object arg) {
            if ((this.UserappUninstallApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserappUninstallApplicationCompleted(this, new UserappUninstallApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Output", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("item")]
        public string[] EdgewareGetInstalledApplications() {
            object[] results = this.Invoke("EdgewareGetInstalledApplications", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void EdgewareGetInstalledApplicationsAsync() {
            this.EdgewareGetInstalledApplicationsAsync(null);
        }
        
        /// <remarks/>
        public void EdgewareGetInstalledApplicationsAsync(object userState) {
            if ((this.EdgewareGetInstalledApplicationsOperationCompleted == null)) {
                this.EdgewareGetInstalledApplicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEdgewareGetInstalledApplicationsOperationCompleted);
            }
            this.InvokeAsync("EdgewareGetInstalledApplications", new object[0], this.EdgewareGetInstalledApplicationsOperationCompleted, userState);
        }
        
        private void OnEdgewareGetInstalledApplicationsOperationCompleted(object arg) {
            if ((this.EdgewareGetInstalledApplicationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EdgewareGetInstalledApplicationsCompleted(this, new EdgewareGetInstalledApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseElementName="EdgewareGetApplicationStatusResp", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Status")]
        public ApplicationStatus EdgewareGetApplicationStatus(string appname) {
            object[] results = this.Invoke("EdgewareGetApplicationStatus", new object[] {
                        appname});
            return ((ApplicationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void EdgewareGetApplicationStatusAsync(string appname) {
            this.EdgewareGetApplicationStatusAsync(appname, null);
        }
        
        /// <remarks/>
        public void EdgewareGetApplicationStatusAsync(string appname, object userState) {
            if ((this.EdgewareGetApplicationStatusOperationCompleted == null)) {
                this.EdgewareGetApplicationStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEdgewareGetApplicationStatusOperationCompleted);
            }
            this.InvokeAsync("EdgewareGetApplicationStatus", new object[] {
                        appname}, this.EdgewareGetApplicationStatusOperationCompleted, userState);
        }
        
        private void OnEdgewareGetApplicationStatusOperationCompleted(object arg) {
            if ((this.EdgewareGetApplicationStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EdgewareGetApplicationStatusCompleted(this, new EdgewareGetApplicationStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool EdgewareSetSyslogRedirection(bool Redirect) {
            object[] results = this.Invoke("EdgewareSetSyslogRedirection", new object[] {
                        Redirect});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EdgewareSetSyslogRedirectionAsync(bool Redirect) {
            this.EdgewareSetSyslogRedirectionAsync(Redirect, null);
        }
        
        /// <remarks/>
        public void EdgewareSetSyslogRedirectionAsync(bool Redirect, object userState) {
            if ((this.EdgewareSetSyslogRedirectionOperationCompleted == null)) {
                this.EdgewareSetSyslogRedirectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEdgewareSetSyslogRedirectionOperationCompleted);
            }
            this.InvokeAsync("EdgewareSetSyslogRedirection", new object[] {
                        Redirect}, this.EdgewareSetSyslogRedirectionOperationCompleted, userState);
        }
        
        private void OnEdgewareSetSyslogRedirectionOperationCompleted(object arg) {
            if ((this.EdgewareSetSyslogRedirectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EdgewareSetSyslogRedirectionCompleted(this, new EdgewareSetSyslogRedirectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool EdgewareGetSyslogRedirection() {
            object[] results = this.Invoke("EdgewareGetSyslogRedirection", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EdgewareGetSyslogRedirectionAsync() {
            this.EdgewareGetSyslogRedirectionAsync(null);
        }
        
        /// <remarks/>
        public void EdgewareGetSyslogRedirectionAsync(object userState) {
            if ((this.EdgewareGetSyslogRedirectionOperationCompleted == null)) {
                this.EdgewareGetSyslogRedirectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEdgewareGetSyslogRedirectionOperationCompleted);
            }
            this.InvokeAsync("EdgewareGetSyslogRedirection", new object[0], this.EdgewareGetSyslogRedirectionOperationCompleted, userState);
        }
        
        private void OnEdgewareGetSyslogRedirectionOperationCompleted(object arg) {
            if ((this.EdgewareGetSyslogRedirectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EdgewareGetSyslogRedirectionCompleted(this, new EdgewareGetSyslogRedirectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIExternalConnectionsEnabled(bool Enabled) {
            object[] results = this.Invoke("SetBRIExternalConnectionsEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIExternalConnectionsEnabledAsync(bool Enabled) {
            this.SetBRIExternalConnectionsEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetBRIExternalConnectionsEnabledAsync(bool Enabled, object userState) {
            if ((this.SetBRIExternalConnectionsEnabledOperationCompleted == null)) {
                this.SetBRIExternalConnectionsEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIExternalConnectionsEnabledOperationCompleted);
            }
            this.InvokeAsync("SetBRIExternalConnectionsEnabled", new object[] {
                        Enabled}, this.SetBRIExternalConnectionsEnabledOperationCompleted, userState);
        }
        
        private void OnSetBRIExternalConnectionsEnabledOperationCompleted(object arg) {
            if ((this.SetBRIExternalConnectionsEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIExternalConnectionsEnabledCompleted(this, new SetBRIExternalConnectionsEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetBRIExternalConnectionsEnabled() {
            object[] results = this.Invoke("GetBRIExternalConnectionsEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIExternalConnectionsEnabledAsync() {
            this.GetBRIExternalConnectionsEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIExternalConnectionsEnabledAsync(object userState) {
            if ((this.GetBRIExternalConnectionsEnabledOperationCompleted == null)) {
                this.GetBRIExternalConnectionsEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIExternalConnectionsEnabledOperationCompleted);
            }
            this.InvokeAsync("GetBRIExternalConnectionsEnabled", new object[0], this.GetBRIExternalConnectionsEnabledOperationCompleted, userState);
        }
        
        private void OnGetBRIExternalConnectionsEnabledOperationCompleted(object arg) {
            if ((this.GetBRIExternalConnectionsEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIExternalConnectionsEnabledCompleted(this, new GetBRIExternalConnectionsEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIListeningPort(int port) {
            object[] results = this.Invoke("SetBRIListeningPort", new object[] {
                        port});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIListeningPortAsync(int port) {
            this.SetBRIListeningPortAsync(port, null);
        }
        
        /// <remarks/>
        public void SetBRIListeningPortAsync(int port, object userState) {
            if ((this.SetBRIListeningPortOperationCompleted == null)) {
                this.SetBRIListeningPortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIListeningPortOperationCompleted);
            }
            this.InvokeAsync("SetBRIListeningPort", new object[] {
                        port}, this.SetBRIListeningPortOperationCompleted, userState);
        }
        
        private void OnSetBRIListeningPortOperationCompleted(object arg) {
            if ((this.SetBRIListeningPortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIListeningPortCompleted(this, new SetBRIListeningPortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public int GetBRIListeningPort() {
            object[] results = this.Invoke("GetBRIListeningPort", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIListeningPortAsync() {
            this.GetBRIListeningPortAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIListeningPortAsync(object userState) {
            if ((this.GetBRIListeningPortOperationCompleted == null)) {
                this.GetBRIListeningPortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIListeningPortOperationCompleted);
            }
            this.InvokeAsync("GetBRIListeningPort", new object[0], this.GetBRIListeningPortOperationCompleted, userState);
        }
        
        private void OnGetBRIListeningPortOperationCompleted(object arg) {
            if ((this.GetBRIListeningPortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIListeningPortCompleted(this, new GetBRIListeningPortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRILoggingEnabled(bool Enabled) {
            object[] results = this.Invoke("SetBRILoggingEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRILoggingEnabledAsync(bool Enabled) {
            this.SetBRILoggingEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetBRILoggingEnabledAsync(bool Enabled, object userState) {
            if ((this.SetBRILoggingEnabledOperationCompleted == null)) {
                this.SetBRILoggingEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRILoggingEnabledOperationCompleted);
            }
            this.InvokeAsync("SetBRILoggingEnabled", new object[] {
                        Enabled}, this.SetBRILoggingEnabledOperationCompleted, userState);
        }
        
        private void OnSetBRILoggingEnabledOperationCompleted(object arg) {
            if ((this.SetBRILoggingEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRILoggingEnabledCompleted(this, new SetBRILoggingEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetBRILoggingEnabled() {
            object[] results = this.Invoke("GetBRILoggingEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRILoggingEnabledAsync() {
            this.GetBRILoggingEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetBRILoggingEnabledAsync(object userState) {
            if ((this.GetBRILoggingEnabledOperationCompleted == null)) {
                this.GetBRILoggingEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRILoggingEnabledOperationCompleted);
            }
            this.InvokeAsync("GetBRILoggingEnabled", new object[0], this.GetBRILoggingEnabledOperationCompleted, userState);
        }
        
        private void OnGetBRILoggingEnabledOperationCompleted(object arg) {
            if ((this.GetBRILoggingEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRILoggingEnabledCompleted(this, new GetBRILoggingEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetLLRPSecureEnabled(bool Enabled) {
            object[] results = this.Invoke("SetLLRPSecureEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetLLRPSecureEnabledAsync(bool Enabled) {
            this.SetLLRPSecureEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetLLRPSecureEnabledAsync(bool Enabled, object userState) {
            if ((this.SetLLRPSecureEnabledOperationCompleted == null)) {
                this.SetLLRPSecureEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetLLRPSecureEnabledOperationCompleted);
            }
            this.InvokeAsync("SetLLRPSecureEnabled", new object[] {
                        Enabled}, this.SetLLRPSecureEnabledOperationCompleted, userState);
        }
        
        private void OnSetLLRPSecureEnabledOperationCompleted(object arg) {
            if ((this.SetLLRPSecureEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetLLRPSecureEnabledCompleted(this, new SetLLRPSecureEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetLLRPSecureEnabled() {
            object[] results = this.Invoke("GetLLRPSecureEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetLLRPSecureEnabledAsync() {
            this.GetLLRPSecureEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetLLRPSecureEnabledAsync(object userState) {
            if ((this.GetLLRPSecureEnabledOperationCompleted == null)) {
                this.GetLLRPSecureEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLLRPSecureEnabledOperationCompleted);
            }
            this.InvokeAsync("GetLLRPSecureEnabled", new object[0], this.GetLLRPSecureEnabledOperationCompleted, userState);
        }
        
        private void OnGetLLRPSecureEnabledOperationCompleted(object arg) {
            if ((this.GetLLRPSecureEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLLRPSecureEnabledCompleted(this, new GetLLRPSecureEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetLLRPInsecureEnabled(bool Enabled) {
            object[] results = this.Invoke("SetLLRPInsecureEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetLLRPInsecureEnabledAsync(bool Enabled) {
            this.SetLLRPInsecureEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetLLRPInsecureEnabledAsync(bool Enabled, object userState) {
            if ((this.SetLLRPInsecureEnabledOperationCompleted == null)) {
                this.SetLLRPInsecureEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetLLRPInsecureEnabledOperationCompleted);
            }
            this.InvokeAsync("SetLLRPInsecureEnabled", new object[] {
                        Enabled}, this.SetLLRPInsecureEnabledOperationCompleted, userState);
        }
        
        private void OnSetLLRPInsecureEnabledOperationCompleted(object arg) {
            if ((this.SetLLRPInsecureEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetLLRPInsecureEnabledCompleted(this, new SetLLRPInsecureEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetLLRPInsecureEnabled() {
            object[] results = this.Invoke("GetLLRPInsecureEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetLLRPInsecureEnabledAsync() {
            this.GetLLRPInsecureEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetLLRPInsecureEnabledAsync(object userState) {
            if ((this.GetLLRPInsecureEnabledOperationCompleted == null)) {
                this.GetLLRPInsecureEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLLRPInsecureEnabledOperationCompleted);
            }
            this.InvokeAsync("GetLLRPInsecureEnabled", new object[0], this.GetLLRPInsecureEnabledOperationCompleted, userState);
        }
        
        private void OnGetLLRPInsecureEnabledOperationCompleted(object arg) {
            if ((this.GetLLRPInsecureEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLLRPInsecureEnabledCompleted(this, new GetLLRPInsecureEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool LLRPTerminateClient() {
            object[] results = this.Invoke("LLRPTerminateClient", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LLRPTerminateClientAsync() {
            this.LLRPTerminateClientAsync(null);
        }
        
        /// <remarks/>
        public void LLRPTerminateClientAsync(object userState) {
            if ((this.LLRPTerminateClientOperationCompleted == null)) {
                this.LLRPTerminateClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLLRPTerminateClientOperationCompleted);
            }
            this.InvokeAsync("LLRPTerminateClient", new object[0], this.LLRPTerminateClientOperationCompleted, userState);
        }
        
        private void OnLLRPTerminateClientOperationCompleted(object arg) {
            if ((this.LLRPTerminateClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LLRPTerminateClientCompleted(this, new LLRPTerminateClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIOverSerialEnabled(bool Enabled) {
            object[] results = this.Invoke("SetBRIOverSerialEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIOverSerialEnabledAsync(bool Enabled) {
            this.SetBRIOverSerialEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetBRIOverSerialEnabledAsync(bool Enabled, object userState) {
            if ((this.SetBRIOverSerialEnabledOperationCompleted == null)) {
                this.SetBRIOverSerialEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIOverSerialEnabledOperationCompleted);
            }
            this.InvokeAsync("SetBRIOverSerialEnabled", new object[] {
                        Enabled}, this.SetBRIOverSerialEnabledOperationCompleted, userState);
        }
        
        private void OnSetBRIOverSerialEnabledOperationCompleted(object arg) {
            if ((this.SetBRIOverSerialEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIOverSerialEnabledCompleted(this, new SetBRIOverSerialEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetBRIOverSerialEnabled() {
            object[] results = this.Invoke("GetBRIOverSerialEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIOverSerialEnabledAsync() {
            this.GetBRIOverSerialEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIOverSerialEnabledAsync(object userState) {
            if ((this.GetBRIOverSerialEnabledOperationCompleted == null)) {
                this.GetBRIOverSerialEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIOverSerialEnabledOperationCompleted);
            }
            this.InvokeAsync("GetBRIOverSerialEnabled", new object[0], this.GetBRIOverSerialEnabledOperationCompleted, userState);
        }
        
        private void OnGetBRIOverSerialEnabledOperationCompleted(object arg) {
            if ((this.GetBRIOverSerialEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIOverSerialEnabledCompleted(this, new GetBRIOverSerialEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRISerialBaudRate(BRISerialBaudRate baud) {
            object[] results = this.Invoke("SetBRISerialBaudRate", new object[] {
                        baud});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRISerialBaudRateAsync(BRISerialBaudRate baud) {
            this.SetBRISerialBaudRateAsync(baud, null);
        }
        
        /// <remarks/>
        public void SetBRISerialBaudRateAsync(BRISerialBaudRate baud, object userState) {
            if ((this.SetBRISerialBaudRateOperationCompleted == null)) {
                this.SetBRISerialBaudRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRISerialBaudRateOperationCompleted);
            }
            this.InvokeAsync("SetBRISerialBaudRate", new object[] {
                        baud}, this.SetBRISerialBaudRateOperationCompleted, userState);
        }
        
        private void OnSetBRISerialBaudRateOperationCompleted(object arg) {
            if ((this.SetBRISerialBaudRateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRISerialBaudRateCompleted(this, new SetBRISerialBaudRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("baud")]
        public BRISerialBaudRate GetBRISerialBaudRate() {
            object[] results = this.Invoke("GetBRISerialBaudRate", new object[0]);
            return ((BRISerialBaudRate)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRISerialBaudRateAsync() {
            this.GetBRISerialBaudRateAsync(null);
        }
        
        /// <remarks/>
        public void GetBRISerialBaudRateAsync(object userState) {
            if ((this.GetBRISerialBaudRateOperationCompleted == null)) {
                this.GetBRISerialBaudRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRISerialBaudRateOperationCompleted);
            }
            this.InvokeAsync("GetBRISerialBaudRate", new object[0], this.GetBRISerialBaudRateOperationCompleted, userState);
        }
        
        private void OnGetBRISerialBaudRateOperationCompleted(object arg) {
            if ((this.GetBRISerialBaudRateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRISerialBaudRateCompleted(this, new GetBRISerialBaudRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeTagTypeEnabled(TagType TagType, bool Enabled) {
            object[] results = this.Invoke("SetBRIAttributeTagTypeEnabled", new object[] {
                        TagType,
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeTagTypeEnabledAsync(TagType TagType, bool Enabled) {
            this.SetBRIAttributeTagTypeEnabledAsync(TagType, Enabled, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeTagTypeEnabledAsync(TagType TagType, bool Enabled, object userState) {
            if ((this.SetBRIAttributeTagTypeEnabledOperationCompleted == null)) {
                this.SetBRIAttributeTagTypeEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeTagTypeEnabledOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeTagTypeEnabled", new object[] {
                        TagType,
                        Enabled}, this.SetBRIAttributeTagTypeEnabledOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeTagTypeEnabledOperationCompleted(object arg) {
            if ((this.SetBRIAttributeTagTypeEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeTagTypeEnabledCompleted(this, new SetBRIAttributeTagTypeEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetBRIAttributeTagTypeEnabled(TagType TagType) {
            object[] results = this.Invoke("GetBRIAttributeTagTypeEnabled", new object[] {
                        TagType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeTagTypeEnabledAsync(TagType TagType) {
            this.GetBRIAttributeTagTypeEnabledAsync(TagType, null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeTagTypeEnabledAsync(TagType TagType, object userState) {
            if ((this.GetBRIAttributeTagTypeEnabledOperationCompleted == null)) {
                this.GetBRIAttributeTagTypeEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeTagTypeEnabledOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeTagTypeEnabled", new object[] {
                        TagType}, this.GetBRIAttributeTagTypeEnabledOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeTagTypeEnabledOperationCompleted(object arg) {
            if ((this.GetBRIAttributeTagTypeEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeTagTypeEnabledCompleted(this, new GetBRIAttributeTagTypeEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeRDTRIES(int Value) {
            object[] results = this.Invoke("SetBRIAttributeRDTRIES", new object[] {
                        Value});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeRDTRIESAsync(int Value) {
            this.SetBRIAttributeRDTRIESAsync(Value, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeRDTRIESAsync(int Value, object userState) {
            if ((this.SetBRIAttributeRDTRIESOperationCompleted == null)) {
                this.SetBRIAttributeRDTRIESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeRDTRIESOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeRDTRIES", new object[] {
                        Value}, this.SetBRIAttributeRDTRIESOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeRDTRIESOperationCompleted(object arg) {
            if ((this.SetBRIAttributeRDTRIESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeRDTRIESCompleted(this, new SetBRIAttributeRDTRIESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Value")]
        public int GetBRIAttributeRDTRIES() {
            object[] results = this.Invoke("GetBRIAttributeRDTRIES", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeRDTRIESAsync() {
            this.GetBRIAttributeRDTRIESAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeRDTRIESAsync(object userState) {
            if ((this.GetBRIAttributeRDTRIESOperationCompleted == null)) {
                this.GetBRIAttributeRDTRIESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeRDTRIESOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeRDTRIES", new object[0], this.GetBRIAttributeRDTRIESOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeRDTRIESOperationCompleted(object arg) {
            if ((this.GetBRIAttributeRDTRIESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeRDTRIESCompleted(this, new GetBRIAttributeRDTRIESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeWRTRIES(int Value) {
            object[] results = this.Invoke("SetBRIAttributeWRTRIES", new object[] {
                        Value});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeWRTRIESAsync(int Value) {
            this.SetBRIAttributeWRTRIESAsync(Value, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeWRTRIESAsync(int Value, object userState) {
            if ((this.SetBRIAttributeWRTRIESOperationCompleted == null)) {
                this.SetBRIAttributeWRTRIESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeWRTRIESOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeWRTRIES", new object[] {
                        Value}, this.SetBRIAttributeWRTRIESOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeWRTRIESOperationCompleted(object arg) {
            if ((this.SetBRIAttributeWRTRIESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeWRTRIESCompleted(this, new SetBRIAttributeWRTRIESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Value")]
        public int GetBRIAttributeWRTRIES() {
            object[] results = this.Invoke("GetBRIAttributeWRTRIES", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeWRTRIESAsync() {
            this.GetBRIAttributeWRTRIESAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeWRTRIESAsync(object userState) {
            if ((this.GetBRIAttributeWRTRIESOperationCompleted == null)) {
                this.GetBRIAttributeWRTRIESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeWRTRIESOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeWRTRIES", new object[0], this.GetBRIAttributeWRTRIESOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeWRTRIESOperationCompleted(object arg) {
            if ((this.GetBRIAttributeWRTRIESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeWRTRIESCompleted(this, new GetBRIAttributeWRTRIESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeLOCKTRIES(int Value) {
            object[] results = this.Invoke("SetBRIAttributeLOCKTRIES", new object[] {
                        Value});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeLOCKTRIESAsync(int Value) {
            this.SetBRIAttributeLOCKTRIESAsync(Value, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeLOCKTRIESAsync(int Value, object userState) {
            if ((this.SetBRIAttributeLOCKTRIESOperationCompleted == null)) {
                this.SetBRIAttributeLOCKTRIESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeLOCKTRIESOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeLOCKTRIES", new object[] {
                        Value}, this.SetBRIAttributeLOCKTRIESOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeLOCKTRIESOperationCompleted(object arg) {
            if ((this.SetBRIAttributeLOCKTRIESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeLOCKTRIESCompleted(this, new SetBRIAttributeLOCKTRIESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Value")]
        public int GetBRIAttributeLOCKTRIES() {
            object[] results = this.Invoke("GetBRIAttributeLOCKTRIES", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeLOCKTRIESAsync() {
            this.GetBRIAttributeLOCKTRIESAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeLOCKTRIESAsync(object userState) {
            if ((this.GetBRIAttributeLOCKTRIESOperationCompleted == null)) {
                this.GetBRIAttributeLOCKTRIESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeLOCKTRIESOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeLOCKTRIES", new object[0], this.GetBRIAttributeLOCKTRIESOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeLOCKTRIESOperationCompleted(object arg) {
            if ((this.GetBRIAttributeLOCKTRIESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeLOCKTRIESCompleted(this, new GetBRIAttributeLOCKTRIESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeFIELDSEP(BRIFieldSeparator Fieldsep) {
            object[] results = this.Invoke("SetBRIAttributeFIELDSEP", new object[] {
                        Fieldsep});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeFIELDSEPAsync(BRIFieldSeparator Fieldsep) {
            this.SetBRIAttributeFIELDSEPAsync(Fieldsep, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeFIELDSEPAsync(BRIFieldSeparator Fieldsep, object userState) {
            if ((this.SetBRIAttributeFIELDSEPOperationCompleted == null)) {
                this.SetBRIAttributeFIELDSEPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeFIELDSEPOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeFIELDSEP", new object[] {
                        Fieldsep}, this.SetBRIAttributeFIELDSEPOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeFIELDSEPOperationCompleted(object arg) {
            if ((this.SetBRIAttributeFIELDSEPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeFIELDSEPCompleted(this, new SetBRIAttributeFIELDSEPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Fieldsep")]
        public BRIFieldSeparator GetBRIAttributeFIELDSEP() {
            object[] results = this.Invoke("GetBRIAttributeFIELDSEP", new object[0]);
            return ((BRIFieldSeparator)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeFIELDSEPAsync() {
            this.GetBRIAttributeFIELDSEPAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeFIELDSEPAsync(object userState) {
            if ((this.GetBRIAttributeFIELDSEPOperationCompleted == null)) {
                this.GetBRIAttributeFIELDSEPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeFIELDSEPOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeFIELDSEP", new object[0], this.GetBRIAttributeFIELDSEPOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeFIELDSEPOperationCompleted(object arg) {
            if ((this.GetBRIAttributeFIELDSEPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeFIELDSEPCompleted(this, new GetBRIAttributeFIELDSEPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeIDREPORT(bool Enabled) {
            object[] results = this.Invoke("SetBRIAttributeIDREPORT", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeIDREPORTAsync(bool Enabled) {
            this.SetBRIAttributeIDREPORTAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeIDREPORTAsync(bool Enabled, object userState) {
            if ((this.SetBRIAttributeIDREPORTOperationCompleted == null)) {
                this.SetBRIAttributeIDREPORTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeIDREPORTOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeIDREPORT", new object[] {
                        Enabled}, this.SetBRIAttributeIDREPORTOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeIDREPORTOperationCompleted(object arg) {
            if ((this.SetBRIAttributeIDREPORTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeIDREPORTCompleted(this, new SetBRIAttributeIDREPORTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool GetBRIAttributeIDREPORT() {
            object[] results = this.Invoke("GetBRIAttributeIDREPORT", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeIDREPORTAsync() {
            this.GetBRIAttributeIDREPORTAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeIDREPORTAsync(object userState) {
            if ((this.GetBRIAttributeIDREPORTOperationCompleted == null)) {
                this.GetBRIAttributeIDREPORTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeIDREPORTOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeIDREPORT", new object[0], this.GetBRIAttributeIDREPORTOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeIDREPORTOperationCompleted(object arg) {
            if ((this.GetBRIAttributeIDREPORTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeIDREPORTCompleted(this, new GetBRIAttributeIDREPORTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeNOTAGREPORT(bool Enabled) {
            object[] results = this.Invoke("SetBRIAttributeNOTAGREPORT", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeNOTAGREPORTAsync(bool Enabled) {
            this.SetBRIAttributeNOTAGREPORTAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeNOTAGREPORTAsync(bool Enabled, object userState) {
            if ((this.SetBRIAttributeNOTAGREPORTOperationCompleted == null)) {
                this.SetBRIAttributeNOTAGREPORTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeNOTAGREPORTOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeNOTAGREPORT", new object[] {
                        Enabled}, this.SetBRIAttributeNOTAGREPORTOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeNOTAGREPORTOperationCompleted(object arg) {
            if ((this.SetBRIAttributeNOTAGREPORTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeNOTAGREPORTCompleted(this, new SetBRIAttributeNOTAGREPORTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool GetBRIAttributeNOTAGREPORT() {
            object[] results = this.Invoke("GetBRIAttributeNOTAGREPORT", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeNOTAGREPORTAsync() {
            this.GetBRIAttributeNOTAGREPORTAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeNOTAGREPORTAsync(object userState) {
            if ((this.GetBRIAttributeNOTAGREPORTOperationCompleted == null)) {
                this.GetBRIAttributeNOTAGREPORTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeNOTAGREPORTOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeNOTAGREPORT", new object[0], this.GetBRIAttributeNOTAGREPORTOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeNOTAGREPORTOperationCompleted(object arg) {
            if ((this.GetBRIAttributeNOTAGREPORTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeNOTAGREPORTCompleted(this, new GetBRIAttributeNOTAGREPORTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeRPTTIMEOUT(int Timeout) {
            object[] results = this.Invoke("SetBRIAttributeRPTTIMEOUT", new object[] {
                        Timeout});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeRPTTIMEOUTAsync(int Timeout) {
            this.SetBRIAttributeRPTTIMEOUTAsync(Timeout, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeRPTTIMEOUTAsync(int Timeout, object userState) {
            if ((this.SetBRIAttributeRPTTIMEOUTOperationCompleted == null)) {
                this.SetBRIAttributeRPTTIMEOUTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeRPTTIMEOUTOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeRPTTIMEOUT", new object[] {
                        Timeout}, this.SetBRIAttributeRPTTIMEOUTOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeRPTTIMEOUTOperationCompleted(object arg) {
            if ((this.SetBRIAttributeRPTTIMEOUTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeRPTTIMEOUTCompleted(this, new SetBRIAttributeRPTTIMEOUTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Timeout")]
        public int GetBRIAttributeRPTTIMEOUT() {
            object[] results = this.Invoke("GetBRIAttributeRPTTIMEOUT", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeRPTTIMEOUTAsync() {
            this.GetBRIAttributeRPTTIMEOUTAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeRPTTIMEOUTAsync(object userState) {
            if ((this.GetBRIAttributeRPTTIMEOUTOperationCompleted == null)) {
                this.GetBRIAttributeRPTTIMEOUTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeRPTTIMEOUTOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeRPTTIMEOUT", new object[0], this.GetBRIAttributeRPTTIMEOUTOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeRPTTIMEOUTOperationCompleted(object arg) {
            if ((this.GetBRIAttributeRPTTIMEOUTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeRPTTIMEOUTCompleted(this, new GetBRIAttributeRPTTIMEOUTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeSELECTTRIES(int SelectTries) {
            object[] results = this.Invoke("SetBRIAttributeSELECTTRIES", new object[] {
                        SelectTries});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeSELECTTRIESAsync(int SelectTries) {
            this.SetBRIAttributeSELECTTRIESAsync(SelectTries, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeSELECTTRIESAsync(int SelectTries, object userState) {
            if ((this.SetBRIAttributeSELECTTRIESOperationCompleted == null)) {
                this.SetBRIAttributeSELECTTRIESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeSELECTTRIESOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeSELECTTRIES", new object[] {
                        SelectTries}, this.SetBRIAttributeSELECTTRIESOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeSELECTTRIESOperationCompleted(object arg) {
            if ((this.SetBRIAttributeSELECTTRIESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeSELECTTRIESCompleted(this, new SetBRIAttributeSELECTTRIESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SelectTries")]
        public int GetBRIAttributeSELECTTRIES() {
            object[] results = this.Invoke("GetBRIAttributeSELECTTRIES", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeSELECTTRIESAsync() {
            this.GetBRIAttributeSELECTTRIESAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeSELECTTRIESAsync(object userState) {
            if ((this.GetBRIAttributeSELECTTRIESOperationCompleted == null)) {
                this.GetBRIAttributeSELECTTRIESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeSELECTTRIESOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeSELECTTRIES", new object[0], this.GetBRIAttributeSELECTTRIESOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeSELECTTRIESOperationCompleted(object arg) {
            if ((this.GetBRIAttributeSELECTTRIESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeSELECTTRIESCompleted(this, new GetBRIAttributeSELECTTRIESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeUNSELECTTRIES(int UnselectTries) {
            object[] results = this.Invoke("SetBRIAttributeUNSELECTTRIES", new object[] {
                        UnselectTries});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeUNSELECTTRIESAsync(int UnselectTries) {
            this.SetBRIAttributeUNSELECTTRIESAsync(UnselectTries, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeUNSELECTTRIESAsync(int UnselectTries, object userState) {
            if ((this.SetBRIAttributeUNSELECTTRIESOperationCompleted == null)) {
                this.SetBRIAttributeUNSELECTTRIESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeUNSELECTTRIESOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeUNSELECTTRIES", new object[] {
                        UnselectTries}, this.SetBRIAttributeUNSELECTTRIESOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeUNSELECTTRIESOperationCompleted(object arg) {
            if ((this.SetBRIAttributeUNSELECTTRIESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeUNSELECTTRIESCompleted(this, new SetBRIAttributeUNSELECTTRIESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UnselectTries")]
        public int GetBRIAttributeUNSELECTTRIES() {
            object[] results = this.Invoke("GetBRIAttributeUNSELECTTRIES", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeUNSELECTTRIESAsync() {
            this.GetBRIAttributeUNSELECTTRIESAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeUNSELECTTRIESAsync(object userState) {
            if ((this.GetBRIAttributeUNSELECTTRIESOperationCompleted == null)) {
                this.GetBRIAttributeUNSELECTTRIESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeUNSELECTTRIESOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeUNSELECTTRIES", new object[0], this.GetBRIAttributeUNSELECTTRIESOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeUNSELECTTRIESOperationCompleted(object arg) {
            if ((this.GetBRIAttributeUNSELECTTRIESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeUNSELECTTRIESCompleted(this, new GetBRIAttributeUNSELECTTRIESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeINITIALQ(int InitialQ) {
            object[] results = this.Invoke("SetBRIAttributeINITIALQ", new object[] {
                        InitialQ});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeINITIALQAsync(int InitialQ) {
            this.SetBRIAttributeINITIALQAsync(InitialQ, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeINITIALQAsync(int InitialQ, object userState) {
            if ((this.SetBRIAttributeINITIALQOperationCompleted == null)) {
                this.SetBRIAttributeINITIALQOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeINITIALQOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeINITIALQ", new object[] {
                        InitialQ}, this.SetBRIAttributeINITIALQOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeINITIALQOperationCompleted(object arg) {
            if ((this.SetBRIAttributeINITIALQCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeINITIALQCompleted(this, new SetBRIAttributeINITIALQCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("InitialQ")]
        public int GetBRIAttributeINITIALQ() {
            object[] results = this.Invoke("GetBRIAttributeINITIALQ", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeINITIALQAsync() {
            this.GetBRIAttributeINITIALQAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeINITIALQAsync(object userState) {
            if ((this.GetBRIAttributeINITIALQOperationCompleted == null)) {
                this.GetBRIAttributeINITIALQOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeINITIALQOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeINITIALQ", new object[0], this.GetBRIAttributeINITIALQOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeINITIALQOperationCompleted(object arg) {
            if ((this.GetBRIAttributeINITIALQCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeINITIALQCompleted(this, new GetBRIAttributeINITIALQCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeTIMEOUTMODE(bool Enabled) {
            object[] results = this.Invoke("SetBRIAttributeTIMEOUTMODE", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeTIMEOUTMODEAsync(bool Enabled) {
            this.SetBRIAttributeTIMEOUTMODEAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeTIMEOUTMODEAsync(bool Enabled, object userState) {
            if ((this.SetBRIAttributeTIMEOUTMODEOperationCompleted == null)) {
                this.SetBRIAttributeTIMEOUTMODEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeTIMEOUTMODEOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeTIMEOUTMODE", new object[] {
                        Enabled}, this.SetBRIAttributeTIMEOUTMODEOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeTIMEOUTMODEOperationCompleted(object arg) {
            if ((this.SetBRIAttributeTIMEOUTMODECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeTIMEOUTMODECompleted(this, new SetBRIAttributeTIMEOUTMODECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool GetBRIAttributeTIMEOUTMODE() {
            object[] results = this.Invoke("GetBRIAttributeTIMEOUTMODE", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeTIMEOUTMODEAsync() {
            this.GetBRIAttributeTIMEOUTMODEAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeTIMEOUTMODEAsync(object userState) {
            if ((this.GetBRIAttributeTIMEOUTMODEOperationCompleted == null)) {
                this.GetBRIAttributeTIMEOUTMODEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeTIMEOUTMODEOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeTIMEOUTMODE", new object[0], this.GetBRIAttributeTIMEOUTMODEOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeTIMEOUTMODEOperationCompleted(object arg) {
            if ((this.GetBRIAttributeTIMEOUTMODECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeTIMEOUTMODECompleted(this, new GetBRIAttributeTIMEOUTMODECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeINITTRIES(int InitTries) {
            object[] results = this.Invoke("SetBRIAttributeINITTRIES", new object[] {
                        InitTries});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeINITTRIESAsync(int InitTries) {
            this.SetBRIAttributeINITTRIESAsync(InitTries, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeINITTRIESAsync(int InitTries, object userState) {
            if ((this.SetBRIAttributeINITTRIESOperationCompleted == null)) {
                this.SetBRIAttributeINITTRIESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeINITTRIESOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeINITTRIES", new object[] {
                        InitTries}, this.SetBRIAttributeINITTRIESOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeINITTRIESOperationCompleted(object arg) {
            if ((this.SetBRIAttributeINITTRIESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeINITTRIESCompleted(this, new SetBRIAttributeINITTRIESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("InitTries")]
        public int GetBRIAttributeINITTRIES() {
            object[] results = this.Invoke("GetBRIAttributeINITTRIES", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeINITTRIESAsync() {
            this.GetBRIAttributeINITTRIESAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeINITTRIESAsync(object userState) {
            if ((this.GetBRIAttributeINITTRIESOperationCompleted == null)) {
                this.GetBRIAttributeINITTRIESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeINITTRIESOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeINITTRIES", new object[0], this.GetBRIAttributeINITTRIESOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeINITTRIESOperationCompleted(object arg) {
            if ((this.GetBRIAttributeINITTRIESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeINITTRIESCompleted(this, new GetBRIAttributeINITTRIESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeIDTRIES(int IDTries) {
            object[] results = this.Invoke("SetBRIAttributeIDTRIES", new object[] {
                        IDTries});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeIDTRIESAsync(int IDTries) {
            this.SetBRIAttributeIDTRIESAsync(IDTries, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeIDTRIESAsync(int IDTries, object userState) {
            if ((this.SetBRIAttributeIDTRIESOperationCompleted == null)) {
                this.SetBRIAttributeIDTRIESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeIDTRIESOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeIDTRIES", new object[] {
                        IDTries}, this.SetBRIAttributeIDTRIESOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeIDTRIESOperationCompleted(object arg) {
            if ((this.SetBRIAttributeIDTRIESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeIDTRIESCompleted(this, new SetBRIAttributeIDTRIESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("IDTries")]
        public int GetBRIAttributeIDTRIES() {
            object[] results = this.Invoke("GetBRIAttributeIDTRIES", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeIDTRIESAsync() {
            this.GetBRIAttributeIDTRIESAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeIDTRIESAsync(object userState) {
            if ((this.GetBRIAttributeIDTRIESOperationCompleted == null)) {
                this.GetBRIAttributeIDTRIESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeIDTRIESOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeIDTRIES", new object[0], this.GetBRIAttributeIDTRIESOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeIDTRIESOperationCompleted(object arg) {
            if ((this.GetBRIAttributeIDTRIESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeIDTRIESCompleted(this, new GetBRIAttributeIDTRIESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeANTTRIES(int AntennaTries) {
            object[] results = this.Invoke("SetBRIAttributeANTTRIES", new object[] {
                        AntennaTries});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeANTTRIESAsync(int AntennaTries) {
            this.SetBRIAttributeANTTRIESAsync(AntennaTries, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeANTTRIESAsync(int AntennaTries, object userState) {
            if ((this.SetBRIAttributeANTTRIESOperationCompleted == null)) {
                this.SetBRIAttributeANTTRIESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeANTTRIESOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeANTTRIES", new object[] {
                        AntennaTries}, this.SetBRIAttributeANTTRIESOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeANTTRIESOperationCompleted(object arg) {
            if ((this.SetBRIAttributeANTTRIESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeANTTRIESCompleted(this, new SetBRIAttributeANTTRIESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AntennaTries")]
        public int GetBRIAttributeANTTRIES() {
            object[] results = this.Invoke("GetBRIAttributeANTTRIES", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeANTTRIESAsync() {
            this.GetBRIAttributeANTTRIESAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeANTTRIESAsync(object userState) {
            if ((this.GetBRIAttributeANTTRIESOperationCompleted == null)) {
                this.GetBRIAttributeANTTRIESOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeANTTRIESOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeANTTRIES", new object[0], this.GetBRIAttributeANTTRIESOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeANTTRIESOperationCompleted(object arg) {
            if ((this.GetBRIAttributeANTTRIESCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeANTTRIESCompleted(this, new GetBRIAttributeANTTRIESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeIDTIMEOUT(int IDTimeout) {
            object[] results = this.Invoke("SetBRIAttributeIDTIMEOUT", new object[] {
                        IDTimeout});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeIDTIMEOUTAsync(int IDTimeout) {
            this.SetBRIAttributeIDTIMEOUTAsync(IDTimeout, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeIDTIMEOUTAsync(int IDTimeout, object userState) {
            if ((this.SetBRIAttributeIDTIMEOUTOperationCompleted == null)) {
                this.SetBRIAttributeIDTIMEOUTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeIDTIMEOUTOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeIDTIMEOUT", new object[] {
                        IDTimeout}, this.SetBRIAttributeIDTIMEOUTOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeIDTIMEOUTOperationCompleted(object arg) {
            if ((this.SetBRIAttributeIDTIMEOUTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeIDTIMEOUTCompleted(this, new SetBRIAttributeIDTIMEOUTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("IDTimeout")]
        public int GetBRIAttributeIDTIMEOUT() {
            object[] results = this.Invoke("GetBRIAttributeIDTIMEOUT", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeIDTIMEOUTAsync() {
            this.GetBRIAttributeIDTIMEOUTAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeIDTIMEOUTAsync(object userState) {
            if ((this.GetBRIAttributeIDTIMEOUTOperationCompleted == null)) {
                this.GetBRIAttributeIDTIMEOUTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeIDTIMEOUTOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeIDTIMEOUT", new object[0], this.GetBRIAttributeIDTIMEOUTOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeIDTIMEOUTOperationCompleted(object arg) {
            if ((this.GetBRIAttributeIDTIMEOUTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeIDTIMEOUTCompleted(this, new GetBRIAttributeIDTIMEOUTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeANTTIMEOUT(int AntennaTimeout) {
            object[] results = this.Invoke("SetBRIAttributeANTTIMEOUT", new object[] {
                        AntennaTimeout});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeANTTIMEOUTAsync(int AntennaTimeout) {
            this.SetBRIAttributeANTTIMEOUTAsync(AntennaTimeout, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeANTTIMEOUTAsync(int AntennaTimeout, object userState) {
            if ((this.SetBRIAttributeANTTIMEOUTOperationCompleted == null)) {
                this.SetBRIAttributeANTTIMEOUTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeANTTIMEOUTOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeANTTIMEOUT", new object[] {
                        AntennaTimeout}, this.SetBRIAttributeANTTIMEOUTOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeANTTIMEOUTOperationCompleted(object arg) {
            if ((this.SetBRIAttributeANTTIMEOUTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeANTTIMEOUTCompleted(this, new SetBRIAttributeANTTIMEOUTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AntennaTimeout")]
        public int GetBRIAttributeANTTIMEOUT() {
            object[] results = this.Invoke("GetBRIAttributeANTTIMEOUT", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeANTTIMEOUTAsync() {
            this.GetBRIAttributeANTTIMEOUTAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeANTTIMEOUTAsync(object userState) {
            if ((this.GetBRIAttributeANTTIMEOUTOperationCompleted == null)) {
                this.GetBRIAttributeANTTIMEOUTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeANTTIMEOUTOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeANTTIMEOUT", new object[0], this.GetBRIAttributeANTTIMEOUTOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeANTTIMEOUTOperationCompleted(object arg) {
            if ((this.GetBRIAttributeANTTIMEOUTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeANTTIMEOUTCompleted(this, new GetBRIAttributeANTTIMEOUTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeDENSEREADERMODE(bool Enabled) {
            object[] results = this.Invoke("SetBRIAttributeDENSEREADERMODE", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeDENSEREADERMODEAsync(bool Enabled) {
            this.SetBRIAttributeDENSEREADERMODEAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeDENSEREADERMODEAsync(bool Enabled, object userState) {
            if ((this.SetBRIAttributeDENSEREADERMODEOperationCompleted == null)) {
                this.SetBRIAttributeDENSEREADERMODEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeDENSEREADERMODEOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeDENSEREADERMODE", new object[] {
                        Enabled}, this.SetBRIAttributeDENSEREADERMODEOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeDENSEREADERMODEOperationCompleted(object arg) {
            if ((this.SetBRIAttributeDENSEREADERMODECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeDENSEREADERMODECompleted(this, new SetBRIAttributeDENSEREADERMODECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool GetBRIAttributeDENSEREADERMODE() {
            object[] results = this.Invoke("GetBRIAttributeDENSEREADERMODE", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeDENSEREADERMODEAsync() {
            this.GetBRIAttributeDENSEREADERMODEAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeDENSEREADERMODEAsync(object userState) {
            if ((this.GetBRIAttributeDENSEREADERMODEOperationCompleted == null)) {
                this.GetBRIAttributeDENSEREADERMODEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeDENSEREADERMODEOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeDENSEREADERMODE", new object[0], this.GetBRIAttributeDENSEREADERMODEOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeDENSEREADERMODEOperationCompleted(object arg) {
            if ((this.GetBRIAttributeDENSEREADERMODECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeDENSEREADERMODECompleted(this, new GetBRIAttributeDENSEREADERMODECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeEPCC1G2AdvancedMode(bool Enabled) {
            object[] results = this.Invoke("SetBRIAttributeEPCC1G2AdvancedMode", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeEPCC1G2AdvancedModeAsync(bool Enabled) {
            this.SetBRIAttributeEPCC1G2AdvancedModeAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeEPCC1G2AdvancedModeAsync(bool Enabled, object userState) {
            if ((this.SetBRIAttributeEPCC1G2AdvancedModeOperationCompleted == null)) {
                this.SetBRIAttributeEPCC1G2AdvancedModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeEPCC1G2AdvancedModeOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeEPCC1G2AdvancedMode", new object[] {
                        Enabled}, this.SetBRIAttributeEPCC1G2AdvancedModeOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeEPCC1G2AdvancedModeOperationCompleted(object arg) {
            if ((this.SetBRIAttributeEPCC1G2AdvancedModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeEPCC1G2AdvancedModeCompleted(this, new SetBRIAttributeEPCC1G2AdvancedModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool GetBRIAttributeEPCC1G2AdvancedMode() {
            object[] results = this.Invoke("GetBRIAttributeEPCC1G2AdvancedMode", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeEPCC1G2AdvancedModeAsync() {
            this.GetBRIAttributeEPCC1G2AdvancedModeAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeEPCC1G2AdvancedModeAsync(object userState) {
            if ((this.GetBRIAttributeEPCC1G2AdvancedModeOperationCompleted == null)) {
                this.GetBRIAttributeEPCC1G2AdvancedModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeEPCC1G2AdvancedModeOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeEPCC1G2AdvancedMode", new object[0], this.GetBRIAttributeEPCC1G2AdvancedModeOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeEPCC1G2AdvancedModeOperationCompleted(object arg) {
            if ((this.GetBRIAttributeEPCC1G2AdvancedModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeEPCC1G2AdvancedModeCompleted(this, new GetBRIAttributeEPCC1G2AdvancedModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeEPCC1G2PARMS(int EPCC1G2ParmsID) {
            object[] results = this.Invoke("SetBRIAttributeEPCC1G2PARMS", new object[] {
                        EPCC1G2ParmsID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeEPCC1G2PARMSAsync(int EPCC1G2ParmsID) {
            this.SetBRIAttributeEPCC1G2PARMSAsync(EPCC1G2ParmsID, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeEPCC1G2PARMSAsync(int EPCC1G2ParmsID, object userState) {
            if ((this.SetBRIAttributeEPCC1G2PARMSOperationCompleted == null)) {
                this.SetBRIAttributeEPCC1G2PARMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeEPCC1G2PARMSOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeEPCC1G2PARMS", new object[] {
                        EPCC1G2ParmsID}, this.SetBRIAttributeEPCC1G2PARMSOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeEPCC1G2PARMSOperationCompleted(object arg) {
            if ((this.SetBRIAttributeEPCC1G2PARMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeEPCC1G2PARMSCompleted(this, new SetBRIAttributeEPCC1G2PARMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("EPCC1G2ParmsID")]
        public int GetBRIAttributeEPCC1G2PARMS() {
            object[] results = this.Invoke("GetBRIAttributeEPCC1G2PARMS", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeEPCC1G2PARMSAsync() {
            this.GetBRIAttributeEPCC1G2PARMSAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeEPCC1G2PARMSAsync(object userState) {
            if ((this.GetBRIAttributeEPCC1G2PARMSOperationCompleted == null)) {
                this.GetBRIAttributeEPCC1G2PARMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeEPCC1G2PARMSOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeEPCC1G2PARMS", new object[0], this.GetBRIAttributeEPCC1G2PARMSOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeEPCC1G2PARMSOperationCompleted(object arg) {
            if ((this.GetBRIAttributeEPCC1G2PARMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeEPCC1G2PARMSCompleted(this, new GetBRIAttributeEPCC1G2PARMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseElementName="GetBRIAttributeEPCC1G2PARMSListResp", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ints")]
        public int[] GetBRIAttributeEPCC1G2PARMSList() {
            object[] results = this.Invoke("GetBRIAttributeEPCC1G2PARMSList", new object[0]);
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeEPCC1G2PARMSListAsync() {
            this.GetBRIAttributeEPCC1G2PARMSListAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeEPCC1G2PARMSListAsync(object userState) {
            if ((this.GetBRIAttributeEPCC1G2PARMSListOperationCompleted == null)) {
                this.GetBRIAttributeEPCC1G2PARMSListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeEPCC1G2PARMSListOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeEPCC1G2PARMSList", new object[0], this.GetBRIAttributeEPCC1G2PARMSListOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeEPCC1G2PARMSListOperationCompleted(object arg) {
            if ((this.GetBRIAttributeEPCC1G2PARMSListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeEPCC1G2PARMSListCompleted(this, new GetBRIAttributeEPCC1G2PARMSListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeLBTSCANENABLE(bool Enabled) {
            object[] results = this.Invoke("SetBRIAttributeLBTSCANENABLE", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeLBTSCANENABLEAsync(bool Enabled) {
            this.SetBRIAttributeLBTSCANENABLEAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeLBTSCANENABLEAsync(bool Enabled, object userState) {
            if ((this.SetBRIAttributeLBTSCANENABLEOperationCompleted == null)) {
                this.SetBRIAttributeLBTSCANENABLEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeLBTSCANENABLEOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeLBTSCANENABLE", new object[] {
                        Enabled}, this.SetBRIAttributeLBTSCANENABLEOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeLBTSCANENABLEOperationCompleted(object arg) {
            if ((this.SetBRIAttributeLBTSCANENABLECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeLBTSCANENABLECompleted(this, new SetBRIAttributeLBTSCANENABLECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool GetBRIAttributeLBTSCANENABLE() {
            object[] results = this.Invoke("GetBRIAttributeLBTSCANENABLE", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeLBTSCANENABLEAsync() {
            this.GetBRIAttributeLBTSCANENABLEAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeLBTSCANENABLEAsync(object userState) {
            if ((this.GetBRIAttributeLBTSCANENABLEOperationCompleted == null)) {
                this.GetBRIAttributeLBTSCANENABLEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeLBTSCANENABLEOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeLBTSCANENABLE", new object[0], this.GetBRIAttributeLBTSCANENABLEOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeLBTSCANENABLEOperationCompleted(object arg) {
            if ((this.GetBRIAttributeLBTSCANENABLECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeLBTSCANENABLECompleted(this, new GetBRIAttributeLBTSCANENABLECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeLBTCHANNEL(int Channel) {
            object[] results = this.Invoke("SetBRIAttributeLBTCHANNEL", new object[] {
                        Channel});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeLBTCHANNELAsync(int Channel) {
            this.SetBRIAttributeLBTCHANNELAsync(Channel, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeLBTCHANNELAsync(int Channel, object userState) {
            if ((this.SetBRIAttributeLBTCHANNELOperationCompleted == null)) {
                this.SetBRIAttributeLBTCHANNELOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeLBTCHANNELOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeLBTCHANNEL", new object[] {
                        Channel}, this.SetBRIAttributeLBTCHANNELOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeLBTCHANNELOperationCompleted(object arg) {
            if ((this.SetBRIAttributeLBTCHANNELCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeLBTCHANNELCompleted(this, new SetBRIAttributeLBTCHANNELCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Channel")]
        public int GetBRIAttributeLBTCHANNEL() {
            object[] results = this.Invoke("GetBRIAttributeLBTCHANNEL", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeLBTCHANNELAsync() {
            this.GetBRIAttributeLBTCHANNELAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeLBTCHANNELAsync(object userState) {
            if ((this.GetBRIAttributeLBTCHANNELOperationCompleted == null)) {
                this.GetBRIAttributeLBTCHANNELOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeLBTCHANNELOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeLBTCHANNEL", new object[0], this.GetBRIAttributeLBTCHANNELOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeLBTCHANNELOperationCompleted(object arg) {
            if ((this.GetBRIAttributeLBTCHANNELCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeLBTCHANNELCompleted(this, new GetBRIAttributeLBTCHANNELCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeSESSION(int Session) {
            object[] results = this.Invoke("SetBRIAttributeSESSION", new object[] {
                        Session});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeSESSIONAsync(int Session) {
            this.SetBRIAttributeSESSIONAsync(Session, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeSESSIONAsync(int Session, object userState) {
            if ((this.SetBRIAttributeSESSIONOperationCompleted == null)) {
                this.SetBRIAttributeSESSIONOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeSESSIONOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeSESSION", new object[] {
                        Session}, this.SetBRIAttributeSESSIONOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeSESSIONOperationCompleted(object arg) {
            if ((this.SetBRIAttributeSESSIONCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeSESSIONCompleted(this, new SetBRIAttributeSESSIONCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Session")]
        public int GetBRIAttributeSESSION() {
            object[] results = this.Invoke("GetBRIAttributeSESSION", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeSESSIONAsync() {
            this.GetBRIAttributeSESSIONAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeSESSIONAsync(object userState) {
            if ((this.GetBRIAttributeSESSIONOperationCompleted == null)) {
                this.GetBRIAttributeSESSIONOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeSESSIONOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeSESSION", new object[0], this.GetBRIAttributeSESSIONOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeSESSIONOperationCompleted(object arg) {
            if ((this.GetBRIAttributeSESSIONCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeSESSIONCompleted(this, new GetBRIAttributeSESSIONCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Count")]
        public int GetBRIPhysicalAntennaCount() {
            object[] results = this.Invoke("GetBRIPhysicalAntennaCount", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIPhysicalAntennaCountAsync() {
            this.GetBRIPhysicalAntennaCountAsync(null);
        }
        
        /// <remarks/>
        public void GetBRIPhysicalAntennaCountAsync(object userState) {
            if ((this.GetBRIPhysicalAntennaCountOperationCompleted == null)) {
                this.GetBRIPhysicalAntennaCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIPhysicalAntennaCountOperationCompleted);
            }
            this.InvokeAsync("GetBRIPhysicalAntennaCount", new object[0], this.GetBRIPhysicalAntennaCountOperationCompleted, userState);
        }
        
        private void OnGetBRIPhysicalAntennaCountOperationCompleted(object arg) {
            if ((this.GetBRIPhysicalAntennaCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIPhysicalAntennaCountCompleted(this, new GetBRIPhysicalAntennaCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeAntennaFieldStrength(int Antenna, int FieldstrengthDB) {
            object[] results = this.Invoke("SetBRIAttributeAntennaFieldStrength", new object[] {
                        Antenna,
                        FieldstrengthDB});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeAntennaFieldStrengthAsync(int Antenna, int FieldstrengthDB) {
            this.SetBRIAttributeAntennaFieldStrengthAsync(Antenna, FieldstrengthDB, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeAntennaFieldStrengthAsync(int Antenna, int FieldstrengthDB, object userState) {
            if ((this.SetBRIAttributeAntennaFieldStrengthOperationCompleted == null)) {
                this.SetBRIAttributeAntennaFieldStrengthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeAntennaFieldStrengthOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeAntennaFieldStrength", new object[] {
                        Antenna,
                        FieldstrengthDB}, this.SetBRIAttributeAntennaFieldStrengthOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeAntennaFieldStrengthOperationCompleted(object arg) {
            if ((this.SetBRIAttributeAntennaFieldStrengthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeAntennaFieldStrengthCompleted(this, new SetBRIAttributeAntennaFieldStrengthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("FieldstrengthDB")]
        public int GetBRIAttributeAntennaFieldStrength(int Antenna) {
            object[] results = this.Invoke("GetBRIAttributeAntennaFieldStrength", new object[] {
                        Antenna});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeAntennaFieldStrengthAsync(int Antenna) {
            this.GetBRIAttributeAntennaFieldStrengthAsync(Antenna, null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeAntennaFieldStrengthAsync(int Antenna, object userState) {
            if ((this.GetBRIAttributeAntennaFieldStrengthOperationCompleted == null)) {
                this.GetBRIAttributeAntennaFieldStrengthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeAntennaFieldStrengthOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeAntennaFieldStrength", new object[] {
                        Antenna}, this.GetBRIAttributeAntennaFieldStrengthOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeAntennaFieldStrengthOperationCompleted(object arg) {
            if ((this.GetBRIAttributeAntennaFieldStrengthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeAntennaFieldStrengthCompleted(this, new GetBRIAttributeAntennaFieldStrengthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetBRIAttributeAntennaSequence(int Position, int Antenna) {
            object[] results = this.Invoke("SetBRIAttributeAntennaSequence", new object[] {
                        Position,
                        Antenna});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetBRIAttributeAntennaSequenceAsync(int Position, int Antenna) {
            this.SetBRIAttributeAntennaSequenceAsync(Position, Antenna, null);
        }
        
        /// <remarks/>
        public void SetBRIAttributeAntennaSequenceAsync(int Position, int Antenna, object userState) {
            if ((this.SetBRIAttributeAntennaSequenceOperationCompleted == null)) {
                this.SetBRIAttributeAntennaSequenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBRIAttributeAntennaSequenceOperationCompleted);
            }
            this.InvokeAsync("SetBRIAttributeAntennaSequence", new object[] {
                        Position,
                        Antenna}, this.SetBRIAttributeAntennaSequenceOperationCompleted, userState);
        }
        
        private void OnSetBRIAttributeAntennaSequenceOperationCompleted(object arg) {
            if ((this.SetBRIAttributeAntennaSequenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBRIAttributeAntennaSequenceCompleted(this, new SetBRIAttributeAntennaSequenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Antenna")]
        public int GetBRIAttributeAntennaSequence(int Position) {
            object[] results = this.Invoke("GetBRIAttributeAntennaSequence", new object[] {
                        Position});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBRIAttributeAntennaSequenceAsync(int Position) {
            this.GetBRIAttributeAntennaSequenceAsync(Position, null);
        }
        
        /// <remarks/>
        public void GetBRIAttributeAntennaSequenceAsync(int Position, object userState) {
            if ((this.GetBRIAttributeAntennaSequenceOperationCompleted == null)) {
                this.GetBRIAttributeAntennaSequenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBRIAttributeAntennaSequenceOperationCompleted);
            }
            this.InvokeAsync("GetBRIAttributeAntennaSequence", new object[] {
                        Position}, this.GetBRIAttributeAntennaSequenceOperationCompleted, userState);
        }
        
        private void OnGetBRIAttributeAntennaSequenceOperationCompleted(object arg) {
            if ((this.GetBRIAttributeAntennaSequenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBRIAttributeAntennaSequenceCompleted(this, new GetBRIAttributeAntennaSequenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool PrepareFirmwareInstallation(bool ImmediateInstall) {
            object[] results = this.Invoke("PrepareFirmwareInstallation", new object[] {
                        ImmediateInstall});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PrepareFirmwareInstallationAsync(bool ImmediateInstall) {
            this.PrepareFirmwareInstallationAsync(ImmediateInstall, null);
        }
        
        /// <remarks/>
        public void PrepareFirmwareInstallationAsync(bool ImmediateInstall, object userState) {
            if ((this.PrepareFirmwareInstallationOperationCompleted == null)) {
                this.PrepareFirmwareInstallationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrepareFirmwareInstallationOperationCompleted);
            }
            this.InvokeAsync("PrepareFirmwareInstallation", new object[] {
                        ImmediateInstall}, this.PrepareFirmwareInstallationOperationCompleted, userState);
        }
        
        private void OnPrepareFirmwareInstallationOperationCompleted(object arg) {
            if ((this.PrepareFirmwareInstallationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrepareFirmwareInstallationCompleted(this, new PrepareFirmwareInstallationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool InstallFirmware() {
            object[] results = this.Invoke("InstallFirmware", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InstallFirmwareAsync() {
            this.InstallFirmwareAsync(null);
        }
        
        /// <remarks/>
        public void InstallFirmwareAsync(object userState) {
            if ((this.InstallFirmwareOperationCompleted == null)) {
                this.InstallFirmwareOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallFirmwareOperationCompleted);
            }
            this.InvokeAsync("InstallFirmware", new object[0], this.InstallFirmwareOperationCompleted, userState);
        }
        
        private void OnInstallFirmwareOperationCompleted(object arg) {
            if ((this.InstallFirmwareCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallFirmwareCompleted(this, new InstallFirmwareCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool TransferFirmware() {
            object[] results = this.Invoke("TransferFirmware", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TransferFirmwareAsync() {
            this.TransferFirmwareAsync(null);
        }
        
        /// <remarks/>
        public void TransferFirmwareAsync(object userState) {
            if ((this.TransferFirmwareOperationCompleted == null)) {
                this.TransferFirmwareOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferFirmwareOperationCompleted);
            }
            this.InvokeAsync("TransferFirmware", new object[0], this.TransferFirmwareOperationCompleted, userState);
        }
        
        private void OnTransferFirmwareOperationCompleted(object arg) {
            if ((this.TransferFirmwareCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferFirmwareCompleted(this, new TransferFirmwareCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool InstallEdgewareApplication() {
            object[] results = this.Invoke("InstallEdgewareApplication", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InstallEdgewareApplicationAsync() {
            this.InstallEdgewareApplicationAsync(null);
        }
        
        /// <remarks/>
        public void InstallEdgewareApplicationAsync(object userState) {
            if ((this.InstallEdgewareApplicationOperationCompleted == null)) {
                this.InstallEdgewareApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallEdgewareApplicationOperationCompleted);
            }
            this.InvokeAsync("InstallEdgewareApplication", new object[0], this.InstallEdgewareApplicationOperationCompleted, userState);
        }
        
        private void OnInstallEdgewareApplicationOperationCompleted(object arg) {
            if ((this.InstallEdgewareApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallEdgewareApplicationCompleted(this, new InstallEdgewareApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool InstallUserApplication() {
            object[] results = this.Invoke("InstallUserApplication", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InstallUserApplicationAsync() {
            this.InstallUserApplicationAsync(null);
        }
        
        /// <remarks/>
        public void InstallUserApplicationAsync(object userState) {
            if ((this.InstallUserApplicationOperationCompleted == null)) {
                this.InstallUserApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallUserApplicationOperationCompleted);
            }
            this.InvokeAsync("InstallUserApplication", new object[0], this.InstallUserApplicationOperationCompleted, userState);
        }
        
        private void OnInstallUserApplicationOperationCompleted(object arg) {
            if ((this.InstallUserApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallUserApplicationCompleted(this, new InstallUserApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool TransferFile(string RemotePath) {
            object[] results = this.Invoke("TransferFile", new object[] {
                        RemotePath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TransferFileAsync(string RemotePath) {
            this.TransferFileAsync(RemotePath, null);
        }
        
        /// <remarks/>
        public void TransferFileAsync(string RemotePath, object userState) {
            if ((this.TransferFileOperationCompleted == null)) {
                this.TransferFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferFileOperationCompleted);
            }
            this.InvokeAsync("TransferFile", new object[] {
                        RemotePath}, this.TransferFileOperationCompleted, userState);
        }
        
        private void OnTransferFileOperationCompleted(object arg) {
            if ((this.TransferFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferFileCompleted(this, new TransferFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool InstallCertificate(string CertificateName, CertificateType Type, string Passphrase) {
            object[] results = this.Invoke("InstallCertificate", new object[] {
                        CertificateName,
                        Type,
                        Passphrase});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InstallCertificateAsync(string CertificateName, CertificateType Type, string Passphrase) {
            this.InstallCertificateAsync(CertificateName, Type, Passphrase, null);
        }
        
        /// <remarks/>
        public void InstallCertificateAsync(string CertificateName, CertificateType Type, string Passphrase, object userState) {
            if ((this.InstallCertificateOperationCompleted == null)) {
                this.InstallCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallCertificateOperationCompleted);
            }
            this.InvokeAsync("InstallCertificate", new object[] {
                        CertificateName,
                        Type,
                        Passphrase}, this.InstallCertificateOperationCompleted, userState);
        }
        
        private void OnInstallCertificateOperationCompleted(object arg) {
            if ((this.InstallCertificateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallCertificateCompleted(this, new InstallCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool UninstallCertificate(string CertificateName, CertificateType Type) {
            object[] results = this.Invoke("UninstallCertificate", new object[] {
                        CertificateName,
                        Type});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UninstallCertificateAsync(string CertificateName, CertificateType Type) {
            this.UninstallCertificateAsync(CertificateName, Type, null);
        }
        
        /// <remarks/>
        public void UninstallCertificateAsync(string CertificateName, CertificateType Type, object userState) {
            if ((this.UninstallCertificateOperationCompleted == null)) {
                this.UninstallCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUninstallCertificateOperationCompleted);
            }
            this.InvokeAsync("UninstallCertificate", new object[] {
                        CertificateName,
                        Type}, this.UninstallCertificateOperationCompleted, userState);
        }
        
        private void OnUninstallCertificateOperationCompleted(object arg) {
            if ((this.UninstallCertificateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UninstallCertificateCompleted(this, new UninstallCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetUsername(string username) {
            object[] results = this.Invoke("SetUsername", new object[] {
                        username});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetUsernameAsync(string username) {
            this.SetUsernameAsync(username, null);
        }
        
        /// <remarks/>
        public void SetUsernameAsync(string username, object userState) {
            if ((this.SetUsernameOperationCompleted == null)) {
                this.SetUsernameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUsernameOperationCompleted);
            }
            this.InvokeAsync("SetUsername", new object[] {
                        username}, this.SetUsernameOperationCompleted, userState);
        }
        
        private void OnSetUsernameOperationCompleted(object arg) {
            if ((this.SetUsernameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUsernameCompleted(this, new SetUsernameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("username", IsNullable=true)]
        public string GetUsername() {
            object[] results = this.Invoke("GetUsername", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsernameAsync() {
            this.GetUsernameAsync(null);
        }
        
        /// <remarks/>
        public void GetUsernameAsync(object userState) {
            if ((this.GetUsernameOperationCompleted == null)) {
                this.GetUsernameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsernameOperationCompleted);
            }
            this.InvokeAsync("GetUsername", new object[0], this.GetUsernameOperationCompleted, userState);
        }
        
        private void OnGetUsernameOperationCompleted(object arg) {
            if ((this.GetUsernameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsernameCompleted(this, new GetUsernameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetPassword(string password) {
            object[] results = this.Invoke("SetPassword", new object[] {
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetPasswordAsync(string password) {
            this.SetPasswordAsync(password, null);
        }
        
        /// <remarks/>
        public void SetPasswordAsync(string password, object userState) {
            if ((this.SetPasswordOperationCompleted == null)) {
                this.SetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPasswordOperationCompleted);
            }
            this.InvokeAsync("SetPassword", new object[] {
                        password}, this.SetPasswordOperationCompleted, userState);
        }
        
        private void OnSetPasswordOperationCompleted(object arg) {
            if ((this.SetPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPasswordCompleted(this, new SetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("password", IsNullable=true)]
        public string GetPassword() {
            object[] results = this.Invoke("GetPassword", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPasswordAsync() {
            this.GetPasswordAsync(null);
        }
        
        /// <remarks/>
        public void GetPasswordAsync(object userState) {
            if ((this.GetPasswordOperationCompleted == null)) {
                this.GetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPasswordOperationCompleted);
            }
            this.InvokeAsync("GetPassword", new object[0], this.GetPasswordOperationCompleted, userState);
        }
        
        private void OnGetPasswordOperationCompleted(object arg) {
            if ((this.GetPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPasswordCompleted(this, new GetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetReadonlyPassword(string password) {
            object[] results = this.Invoke("SetReadonlyPassword", new object[] {
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetReadonlyPasswordAsync(string password) {
            this.SetReadonlyPasswordAsync(password, null);
        }
        
        /// <remarks/>
        public void SetReadonlyPasswordAsync(string password, object userState) {
            if ((this.SetReadonlyPasswordOperationCompleted == null)) {
                this.SetReadonlyPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetReadonlyPasswordOperationCompleted);
            }
            this.InvokeAsync("SetReadonlyPassword", new object[] {
                        password}, this.SetReadonlyPasswordOperationCompleted, userState);
        }
        
        private void OnSetReadonlyPasswordOperationCompleted(object arg) {
            if ((this.SetReadonlyPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetReadonlyPasswordCompleted(this, new SetReadonlyPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("password", IsNullable=true)]
        public string GetReadonlyPassword() {
            object[] results = this.Invoke("GetReadonlyPassword", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetReadonlyPasswordAsync() {
            this.GetReadonlyPasswordAsync(null);
        }
        
        /// <remarks/>
        public void GetReadonlyPasswordAsync(object userState) {
            if ((this.GetReadonlyPasswordOperationCompleted == null)) {
                this.GetReadonlyPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReadonlyPasswordOperationCompleted);
            }
            this.InvokeAsync("GetReadonlyPassword", new object[0], this.GetReadonlyPasswordOperationCompleted, userState);
        }
        
        private void OnGetReadonlyPasswordOperationCompleted(object arg) {
            if ((this.GetReadonlyPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReadonlyPasswordCompleted(this, new GetReadonlyPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetRadiusEnabled(bool Enabled) {
            object[] results = this.Invoke("SetRadiusEnabled", new object[] {
                        Enabled});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetRadiusEnabledAsync(bool Enabled) {
            this.SetRadiusEnabledAsync(Enabled, null);
        }
        
        /// <remarks/>
        public void SetRadiusEnabledAsync(bool Enabled, object userState) {
            if ((this.SetRadiusEnabledOperationCompleted == null)) {
                this.SetRadiusEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRadiusEnabledOperationCompleted);
            }
            this.InvokeAsync("SetRadiusEnabled", new object[] {
                        Enabled}, this.SetRadiusEnabledOperationCompleted, userState);
        }
        
        private void OnSetRadiusEnabledOperationCompleted(object arg) {
            if ((this.SetRadiusEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRadiusEnabledCompleted(this, new SetRadiusEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Enabled")]
        public bool GetRadiusEnabled() {
            object[] results = this.Invoke("GetRadiusEnabled", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetRadiusEnabledAsync() {
            this.GetRadiusEnabledAsync(null);
        }
        
        /// <remarks/>
        public void GetRadiusEnabledAsync(object userState) {
            if ((this.GetRadiusEnabledOperationCompleted == null)) {
                this.GetRadiusEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRadiusEnabledOperationCompleted);
            }
            this.InvokeAsync("GetRadiusEnabled", new object[0], this.GetRadiusEnabledOperationCompleted, userState);
        }
        
        private void OnGetRadiusEnabledOperationCompleted(object arg) {
            if ((this.GetRadiusEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRadiusEnabledCompleted(this, new GetRadiusEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetRadiusServerAddress(int serverIndex, string address) {
            object[] results = this.Invoke("SetRadiusServerAddress", new object[] {
                        serverIndex,
                        address});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetRadiusServerAddressAsync(int serverIndex, string address) {
            this.SetRadiusServerAddressAsync(serverIndex, address, null);
        }
        
        /// <remarks/>
        public void SetRadiusServerAddressAsync(int serverIndex, string address, object userState) {
            if ((this.SetRadiusServerAddressOperationCompleted == null)) {
                this.SetRadiusServerAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRadiusServerAddressOperationCompleted);
            }
            this.InvokeAsync("SetRadiusServerAddress", new object[] {
                        serverIndex,
                        address}, this.SetRadiusServerAddressOperationCompleted, userState);
        }
        
        private void OnSetRadiusServerAddressOperationCompleted(object arg) {
            if ((this.SetRadiusServerAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRadiusServerAddressCompleted(this, new SetRadiusServerAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("address", IsNullable=true)]
        public string GetRadiusServerAddress(int serverIndex) {
            object[] results = this.Invoke("GetRadiusServerAddress", new object[] {
                        serverIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRadiusServerAddressAsync(int serverIndex) {
            this.GetRadiusServerAddressAsync(serverIndex, null);
        }
        
        /// <remarks/>
        public void GetRadiusServerAddressAsync(int serverIndex, object userState) {
            if ((this.GetRadiusServerAddressOperationCompleted == null)) {
                this.GetRadiusServerAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRadiusServerAddressOperationCompleted);
            }
            this.InvokeAsync("GetRadiusServerAddress", new object[] {
                        serverIndex}, this.GetRadiusServerAddressOperationCompleted, userState);
        }
        
        private void OnGetRadiusServerAddressOperationCompleted(object arg) {
            if ((this.GetRadiusServerAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRadiusServerAddressCompleted(this, new GetRadiusServerAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetRadiusServerSecret(int serverIndex, string secret) {
            object[] results = this.Invoke("SetRadiusServerSecret", new object[] {
                        serverIndex,
                        secret});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetRadiusServerSecretAsync(int serverIndex, string secret) {
            this.SetRadiusServerSecretAsync(serverIndex, secret, null);
        }
        
        /// <remarks/>
        public void SetRadiusServerSecretAsync(int serverIndex, string secret, object userState) {
            if ((this.SetRadiusServerSecretOperationCompleted == null)) {
                this.SetRadiusServerSecretOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRadiusServerSecretOperationCompleted);
            }
            this.InvokeAsync("SetRadiusServerSecret", new object[] {
                        serverIndex,
                        secret}, this.SetRadiusServerSecretOperationCompleted, userState);
        }
        
        private void OnSetRadiusServerSecretOperationCompleted(object arg) {
            if ((this.SetRadiusServerSecretCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRadiusServerSecretCompleted(this, new SetRadiusServerSecretCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("secret", IsNullable=true)]
        public string GetRadiusServerSecret(int serverIndex) {
            object[] results = this.Invoke("GetRadiusServerSecret", new object[] {
                        serverIndex});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRadiusServerSecretAsync(int serverIndex) {
            this.GetRadiusServerSecretAsync(serverIndex, null);
        }
        
        /// <remarks/>
        public void GetRadiusServerSecretAsync(int serverIndex, object userState) {
            if ((this.GetRadiusServerSecretOperationCompleted == null)) {
                this.GetRadiusServerSecretOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRadiusServerSecretOperationCompleted);
            }
            this.InvokeAsync("GetRadiusServerSecret", new object[] {
                        serverIndex}, this.GetRadiusServerSecretOperationCompleted, userState);
        }
        
        private void OnGetRadiusServerSecretOperationCompleted(object arg) {
            if ((this.GetRadiusServerSecretCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRadiusServerSecretCompleted(this, new GetRadiusServerSecretCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Result")]
        public bool SetRadiusServerPort(int serverIndex, int port) {
            object[] results = this.Invoke("SetRadiusServerPort", new object[] {
                        serverIndex,
                        port});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetRadiusServerPortAsync(int serverIndex, int port) {
            this.SetRadiusServerPortAsync(serverIndex, port, null);
        }
        
        /// <remarks/>
        public void SetRadiusServerPortAsync(int serverIndex, int port, object userState) {
            if ((this.SetRadiusServerPortOperationCompleted == null)) {
                this.SetRadiusServerPortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRadiusServerPortOperationCompleted);
            }
            this.InvokeAsync("SetRadiusServerPort", new object[] {
                        serverIndex,
                        port}, this.SetRadiusServerPortOperationCompleted, userState);
        }
        
        private void OnSetRadiusServerPortOperationCompleted(object arg) {
            if ((this.SetRadiusServerPortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRadiusServerPortCompleted(this, new SetRadiusServerPortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="idws", ResponseNamespace="idws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("port")]
        public int GetRadiusServerPort(int serverIndex) {
            object[] results = this.Invoke("GetRadiusServerPort", new object[] {
                        serverIndex});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetRadiusServerPortAsync(int serverIndex) {
            this.GetRadiusServerPortAsync(serverIndex, null);
        }
        
        /// <remarks/>
        public void GetRadiusServerPortAsync(int serverIndex, object userState) {
            if ((this.GetRadiusServerPortOperationCompleted == null)) {
                this.GetRadiusServerPortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRadiusServerPortOperationCompleted);
            }
            this.InvokeAsync("GetRadiusServerPort", new object[] {
                        serverIndex}, this.GetRadiusServerPortOperationCompleted, userState);
        }
        
        private void OnGetRadiusServerPortOperationCompleted(object arg) {
            if ((this.GetRadiusServerPortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRadiusServerPortCompleted(this, new GetRadiusServerPortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="idws")]
    public enum ReadyToWorkState {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RTW-Error")]
        RTWError,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RTW-Warning")]
        RTWWarning,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RTW-Ready")]
        RTWReady,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="idws")]
    public enum RadioMode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RadioMode-Unknown")]
        RadioModeUnknown,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RadioMode-Auto")]
        RadioModeAuto,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RadioMode-B")]
        RadioModeB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RadioMode-G")]
        RadioModeG,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RadioMode-BG")]
        RadioModeBG,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RadioMode-A")]
        RadioModeA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RadioMode-ABG")]
        RadioModeABG,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="idws")]
    public enum WirelessSecurityModes {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("WLANSecurity-Unavailable")]
        WLANSecurityUnavailable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("WLANSecurity-None")]
        WLANSecurityNone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("WLANSecurity-StaticWEP")]
        WLANSecurityStaticWEP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("WLANSecurity-DynamicWEP")]
        WLANSecurityDynamicWEP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("WLANSecurity-WPAPersonal")]
        WLANSecurityWPAPersonal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("WLANSecurity-WPAEnterprise")]
        WLANSecurityWPAEnterprise,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("WLANSecurity-WPA2Personal")]
        WLANSecurityWPA2Personal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("WLANSecurity-WPA2Enterprise")]
        WLANSecurityWPA2Enterprise,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="idws")]
    public enum WEPAuthenticationTypes {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("WEPAuth-Open")]
        WEPAuthOpen,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("WEPAuth-Shared")]
        WEPAuthShared,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="idws")]
    public enum EncryptionType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("WPAEncryption-CCMP")]
        WPAEncryptionCCMP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("WPAEncryption-TKIP")]
        WPAEncryptionTKIP,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="idws")]
    public enum EAPType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("EAP-PEAP")]
        EAPPEAP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("EAP-TTLS")]
        EAPTTLS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("EAP-TLS")]
        EAPTLS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("EAP-LEAP")]
        EAPLEAP,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="idws")]
    public enum LocalMountStatus {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MountStatus-Unmounted")]
        MountStatusUnmounted,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MountStatus-Unmounting")]
        MountStatusUnmounting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MountStatus-Mounted")]
        MountStatusMounted,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MountStatus-Mounting")]
        MountStatusMounting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MountStatus-Unknown")]
        MountStatusUnknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="idws")]
    public enum SNMPAccessMode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SNMP-ReadOnly")]
        SNMPReadOnly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SNMP-ReadWrite")]
        SNMPReadWrite,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="idws")]
    public enum SNMPAuthenticationType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SNMPAuth-None")]
        SNMPAuthNone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SNMPAuth-MD5")]
        SNMPAuthMD5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SNMPAuth-SHA1")]
        SNMPAuthSHA1,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="idws")]
    public enum SNMPPrivacyType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SNMPPrivacy-None")]
        SNMPPrivacyNone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SNMPPrivacy-DES")]
        SNMPPrivacyDES,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SNMPPrivacy-AES")]
        SNMPPrivacyAES,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="idws")]
    public enum ApplicationStatus {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Application-Not-Installed")]
        ApplicationNotInstalled,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Application-Started")]
        ApplicationStarted,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Application-Stopped")]
        ApplicationStopped,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="idws")]
    public enum BRISerialBaudRate {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bps-9600")]
        bps9600,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bps-19200")]
        bps19200,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bps-38400")]
        bps38400,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bps-57600")]
        bps57600,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bps-115200")]
        bps115200,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bps-Unknown")]
        bpsUnknown,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="idws")]
    public enum TagType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TagType-PhillipsV119")]
        TagTypePhillipsV119,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TagType-ISO6BG1")]
        TagTypeISO6BG1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TagType-ISO6BG2")]
        TagTypeISO6BG2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TagType-EPCC1G2")]
        TagTypeEPCC1G2,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="idws")]
    public enum BRIFieldSeparator {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Fieldsep-Space")]
        FieldsepSpace,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Fieldsep-Comma")]
        FieldsepComma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Fieldsep-Colon")]
        FieldsepColon,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Fieldsep-Semicolon")]
        FieldsepSemicolon,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Fieldsep-Tab")]
        FieldsepTab,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Fieldsep-Caret")]
        FieldsepCaret,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Fieldsep-Tilde")]
        FieldsepTilde,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="idws")]
    public enum CertificateType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Certificate-Server")]
        CertificateServer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Certificate-CA")]
        CertificateCA,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetServiceVersionCompletedEventHandler(object sender, GetServiceVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void CommitChangesCompletedEventHandler(object sender, CommitChangesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitChangesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitChangesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void DiscardChangesCompletedEventHandler(object sender, DiscardChangesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DiscardChangesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DiscardChangesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetDeviceDefaultsCompletedEventHandler(object sender, SetDeviceDefaultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDeviceDefaultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDeviceDefaultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSoftwareVersionCompletedEventHandler(object sender, GetSoftwareVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSoftwareVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSoftwareVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBIOSVersionCompletedEventHandler(object sender, GetBIOSVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBIOSVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBIOSVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBootloaderVersionCompletedEventHandler(object sender, GetBootloaderVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBootloaderVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBootloaderVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSerialNumberCompletedEventHandler(object sender, GetSerialNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSerialNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSerialNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetConfigStringCompletedEventHandler(object sender, GetConfigStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConfigStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConfigStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetReadyToWorkStateCompletedEventHandler(object sender, GetReadyToWorkStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReadyToWorkStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReadyToWorkStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReadyToWorkState Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReadyToWorkState)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetUUIDCompletedEventHandler(object sender, GetUUIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void DeviceLocateStartCompletedEventHandler(object sender, DeviceLocateStartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeviceLocateStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeviceLocateStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void DeviceLocateStopCompletedEventHandler(object sender, DeviceLocateStopCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeviceLocateStopCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeviceLocateStopCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void RebootDeviceCompletedEventHandler(object sender, RebootDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RebootDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RebootDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetSerialConfigurationEnabledCompletedEventHandler(object sender, SetSerialConfigurationEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSerialConfigurationEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSerialConfigurationEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSerialConfigurationEnabledCompletedEventHandler(object sender, GetSerialConfigurationEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSerialConfigurationEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSerialConfigurationEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetSerialLoginEnabledCompletedEventHandler(object sender, SetSerialLoginEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSerialLoginEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSerialLoginEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSerialLoginEnabledCompletedEventHandler(object sender, GetSerialLoginEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSerialLoginEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSerialLoginEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetExternalUSBEnabledCompletedEventHandler(object sender, SetExternalUSBEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetExternalUSBEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetExternalUSBEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetExternalUSBEnabledCompletedEventHandler(object sender, GetExternalUSBEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExternalUSBEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExternalUSBEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SyncFileSystemsCompletedEventHandler(object sender, SyncFileSystemsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SyncFileSystemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SyncFileSystemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetEthernetInterfaceCountCompletedEventHandler(object sender, GetEthernetInterfaceCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEthernetInterfaceCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEthernetInterfaceCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetEthernetIPv4DHCPEnabledCompletedEventHandler(object sender, SetEthernetIPv4DHCPEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEthernetIPv4DHCPEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEthernetIPv4DHCPEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetEthernetIPv4DHCPEnabledCompletedEventHandler(object sender, GetEthernetIPv4DHCPEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEthernetIPv4DHCPEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEthernetIPv4DHCPEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetEthernetIPv4StaticAddressCompletedEventHandler(object sender, SetEthernetIPv4StaticAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEthernetIPv4StaticAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEthernetIPv4StaticAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetEthernetIPv4StaticAddressCompletedEventHandler(object sender, GetEthernetIPv4StaticAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEthernetIPv4StaticAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEthernetIPv4StaticAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetEthernetIPv4CurrentAddressCompletedEventHandler(object sender, GetEthernetIPv4CurrentAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEthernetIPv4CurrentAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEthernetIPv4CurrentAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetEthernetIPv4StaticSubnetCompletedEventHandler(object sender, SetEthernetIPv4StaticSubnetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEthernetIPv4StaticSubnetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEthernetIPv4StaticSubnetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetEthernetIPv4StaticSubnetCompletedEventHandler(object sender, GetEthernetIPv4StaticSubnetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEthernetIPv4StaticSubnetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEthernetIPv4StaticSubnetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetEthernetIPv4CurrentSubnetCompletedEventHandler(object sender, GetEthernetIPv4CurrentSubnetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEthernetIPv4CurrentSubnetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEthernetIPv4CurrentSubnetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetEthernetIPv4StaticRouterCompletedEventHandler(object sender, SetEthernetIPv4StaticRouterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEthernetIPv4StaticRouterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEthernetIPv4StaticRouterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetEthernetIPv4StaticRouterCompletedEventHandler(object sender, GetEthernetIPv4StaticRouterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEthernetIPv4StaticRouterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEthernetIPv4StaticRouterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetEthernetIPv6AutoConfigureCompletedEventHandler(object sender, SetEthernetIPv6AutoConfigureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEthernetIPv6AutoConfigureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEthernetIPv6AutoConfigureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetEthernetIPv6AutoConfigureCompletedEventHandler(object sender, GetEthernetIPv6AutoConfigureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEthernetIPv6AutoConfigureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEthernetIPv6AutoConfigureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetEthernetIPv6StaticAddressCompletedEventHandler(object sender, SetEthernetIPv6StaticAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEthernetIPv6StaticAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEthernetIPv6StaticAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetEthernetIPv6StaticAddressCompletedEventHandler(object sender, GetEthernetIPv6StaticAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEthernetIPv6StaticAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEthernetIPv6StaticAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetEthernetIPv6CurrentAddressCompletedEventHandler(object sender, GetEthernetIPv6CurrentAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEthernetIPv6CurrentAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEthernetIPv6CurrentAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetEthernetIPv6StaticSubnetCompletedEventHandler(object sender, SetEthernetIPv6StaticSubnetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEthernetIPv6StaticSubnetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEthernetIPv6StaticSubnetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetEthernetIPv6StaticSubnetCompletedEventHandler(object sender, GetEthernetIPv6StaticSubnetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEthernetIPv6StaticSubnetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEthernetIPv6StaticSubnetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetEthernetIPv6CurrentSubnetCompletedEventHandler(object sender, GetEthernetIPv6CurrentSubnetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEthernetIPv6CurrentSubnetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEthernetIPv6CurrentSubnetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetEthernetIPv6StaticRouterCompletedEventHandler(object sender, SetEthernetIPv6StaticRouterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEthernetIPv6StaticRouterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEthernetIPv6StaticRouterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetEthernetIPv6StaticRouterCompletedEventHandler(object sender, GetEthernetIPv6StaticRouterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEthernetIPv6StaticRouterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEthernetIPv6StaticRouterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetEthernetLinkLocalAddressCompletedEventHandler(object sender, GetEthernetLinkLocalAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEthernetLinkLocalAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEthernetLinkLocalAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetEthernetMACCompletedEventHandler(object sender, GetEthernetMACCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEthernetMACCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEthernetMACCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessInterfaceCountCompletedEventHandler(object sender, GetWirelessInterfaceCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessInterfaceCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessInterfaceCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessEnabledCompletedEventHandler(object sender, SetWirelessEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessEnabledCompletedEventHandler(object sender, GetWirelessEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessSSIDCompletedEventHandler(object sender, SetWirelessSSIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessSSIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessSSIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessSSIDCompletedEventHandler(object sender, GetWirelessSSIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessSSIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessSSIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessMACCompletedEventHandler(object sender, GetWirelessMACCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessMACCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessMACCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessFragmentationCompletedEventHandler(object sender, SetWirelessFragmentationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessFragmentationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessFragmentationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessFragmentationCompletedEventHandler(object sender, GetWirelessFragmentationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessFragmentationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessFragmentationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessMediumReservationEnabledCompletedEventHandler(object sender, SetWirelessMediumReservationEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessMediumReservationEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessMediumReservationEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessMediumReservationEnabledCompletedEventHandler(object sender, GetWirelessMediumReservationEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessMediumReservationEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessMediumReservationEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessMediumReservationThresholdCompletedEventHandler(object sender, SetWirelessMediumReservationThresholdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessMediumReservationThresholdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessMediumReservationThresholdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessMediumReservationThresholdCompletedEventHandler(object sender, GetWirelessMediumReservationThresholdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessMediumReservationThresholdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessMediumReservationThresholdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessRadioModeCompletedEventHandler(object sender, SetWirelessRadioModeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessRadioModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessRadioModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessRadioModeCompletedEventHandler(object sender, GetWirelessRadioModeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessRadioModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessRadioModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RadioMode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RadioMode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetIPv4CurrentRouterCompletedEventHandler(object sender, GetIPv4CurrentRouterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIPv4CurrentRouterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIPv4CurrentRouterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetIPv6CurrentRouterCompletedEventHandler(object sender, GetIPv6CurrentRouterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIPv6CurrentRouterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIPv6CurrentRouterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessIPv4DHCPEnabledCompletedEventHandler(object sender, SetWirelessIPv4DHCPEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessIPv4DHCPEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessIPv4DHCPEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessIPv4DHCPEnabledCompletedEventHandler(object sender, GetWirelessIPv4DHCPEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessIPv4DHCPEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessIPv4DHCPEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessIPv4StaticAddressCompletedEventHandler(object sender, SetWirelessIPv4StaticAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessIPv4StaticAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessIPv4StaticAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessIPv4StaticAddressCompletedEventHandler(object sender, GetWirelessIPv4StaticAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessIPv4StaticAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessIPv4StaticAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessIPv4CurrentAddressCompletedEventHandler(object sender, GetWirelessIPv4CurrentAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessIPv4CurrentAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessIPv4CurrentAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessIPv4StaticSubnetCompletedEventHandler(object sender, SetWirelessIPv4StaticSubnetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessIPv4StaticSubnetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessIPv4StaticSubnetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessIPv4StaticSubnetCompletedEventHandler(object sender, GetWirelessIPv4StaticSubnetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessIPv4StaticSubnetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessIPv4StaticSubnetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessIPv4CurrentSubnetCompletedEventHandler(object sender, GetWirelessIPv4CurrentSubnetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessIPv4CurrentSubnetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessIPv4CurrentSubnetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessIPv4StaticRouterCompletedEventHandler(object sender, SetWirelessIPv4StaticRouterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessIPv4StaticRouterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessIPv4StaticRouterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessIPv4StaticRouterCompletedEventHandler(object sender, GetWirelessIPv4StaticRouterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessIPv4StaticRouterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessIPv4StaticRouterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessIPv6AutoConfigureCompletedEventHandler(object sender, SetWirelessIPv6AutoConfigureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessIPv6AutoConfigureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessIPv6AutoConfigureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessIPv6AutoConfigureCompletedEventHandler(object sender, GetWirelessIPv6AutoConfigureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessIPv6AutoConfigureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessIPv6AutoConfigureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessIPv6StaticAddressCompletedEventHandler(object sender, SetWirelessIPv6StaticAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessIPv6StaticAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessIPv6StaticAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessIPv6StaticAddressCompletedEventHandler(object sender, GetWirelessIPv6StaticAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessIPv6StaticAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessIPv6StaticAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessIPv6CurrentAddressCompletedEventHandler(object sender, GetWirelessIPv6CurrentAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessIPv6CurrentAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessIPv6CurrentAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessIPv6StaticSubnetCompletedEventHandler(object sender, SetWirelessIPv6StaticSubnetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessIPv6StaticSubnetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessIPv6StaticSubnetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessIPv6StaticSubnetCompletedEventHandler(object sender, GetWirelessIPv6StaticSubnetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessIPv6StaticSubnetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessIPv6StaticSubnetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessIPv6CurrentSubnetCompletedEventHandler(object sender, GetWirelessIPv6CurrentSubnetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessIPv6CurrentSubnetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessIPv6CurrentSubnetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessIPv6StaticRouterCompletedEventHandler(object sender, SetWirelessIPv6StaticRouterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessIPv6StaticRouterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessIPv6StaticRouterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessIPv6StaticRouterCompletedEventHandler(object sender, GetWirelessIPv6StaticRouterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessIPv6StaticRouterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessIPv6StaticRouterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessSecurityModeCompletedEventHandler(object sender, SetWirelessSecurityModeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessSecurityModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessSecurityModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessSecurityModeCompletedEventHandler(object sender, GetWirelessSecurityModeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessSecurityModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessSecurityModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WirelessSecurityModes Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WirelessSecurityModes)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessWEPAuthenticationCompletedEventHandler(object sender, SetWirelessWEPAuthenticationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessWEPAuthenticationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessWEPAuthenticationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessWEPAuthenticationCompletedEventHandler(object sender, GetWirelessWEPAuthenticationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessWEPAuthenticationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessWEPAuthenticationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WEPAuthenticationTypes Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WEPAuthenticationTypes)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessStaticWEPKeyCompletedEventHandler(object sender, SetWirelessStaticWEPKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessStaticWEPKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessStaticWEPKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessStaticWEPKeyCompletedEventHandler(object sender, GetWirelessStaticWEPKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessStaticWEPKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessStaticWEPKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessStaticWEPTransmitKeyCompletedEventHandler(object sender, SetWirelessStaticWEPTransmitKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessStaticWEPTransmitKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessStaticWEPTransmitKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessStaticWEPTransmitKeyCompletedEventHandler(object sender, GetWirelessStaticWEPTransmitKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessStaticWEPTransmitKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessStaticWEPTransmitKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessMixedCellEnabledCompletedEventHandler(object sender, SetWirelessMixedCellEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessMixedCellEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessMixedCellEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessMixedCellEnabledCompletedEventHandler(object sender, GetWirelessMixedCellEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessMixedCellEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessMixedCellEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessPSKCompletedEventHandler(object sender, SetWirelessPSKCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessPSKCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessPSKCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessPSKCompletedEventHandler(object sender, GetWirelessPSKCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessPSKCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessPSKCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWireless802xUsernameCompletedEventHandler(object sender, SetWireless802xUsernameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWireless802xUsernameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWireless802xUsernameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWireless802xUsernameCompletedEventHandler(object sender, GetWireless802xUsernameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWireless802xUsernameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWireless802xUsernameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWireless802xPasswordCompletedEventHandler(object sender, SetWireless802xPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWireless802xPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWireless802xPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWireless802xPasswordCompletedEventHandler(object sender, GetWireless802xPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWireless802xPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWireless802xPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessMinimumWPAMulticastEncryptionCompletedEventHandler(object sender, SetWirelessMinimumWPAMulticastEncryptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessMinimumWPAMulticastEncryptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessMinimumWPAMulticastEncryptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessMinimumWPAMulticastEncryptionCompletedEventHandler(object sender, GetWirelessMinimumWPAMulticastEncryptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessMinimumWPAMulticastEncryptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessMinimumWPAMulticastEncryptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EncryptionType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EncryptionType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessMinimumWPA2MulticastEncryptionCompletedEventHandler(object sender, SetWirelessMinimumWPA2MulticastEncryptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessMinimumWPA2MulticastEncryptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessMinimumWPA2MulticastEncryptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessMinimumWPA2MulticastEncryptionCompletedEventHandler(object sender, GetWirelessMinimumWPA2MulticastEncryptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessMinimumWPA2MulticastEncryptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessMinimumWPA2MulticastEncryptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EncryptionType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EncryptionType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWireless802xRejectExpiredCertificatesCompletedEventHandler(object sender, SetWireless802xRejectExpiredCertificatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWireless802xRejectExpiredCertificatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWireless802xRejectExpiredCertificatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWireless802xRejectExpiredCertificatesCompletedEventHandler(object sender, GetWireless802xRejectExpiredCertificatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWireless802xRejectExpiredCertificatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWireless802xRejectExpiredCertificatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWireless802xValidateCACompletedEventHandler(object sender, SetWireless802xValidateCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWireless802xValidateCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWireless802xValidateCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWireless802xValidateCACompletedEventHandler(object sender, GetWireless802xValidateCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWireless802xValidateCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWireless802xValidateCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWireless802xServerCommonNameCompletedEventHandler(object sender, SetWireless802xServerCommonNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWireless802xServerCommonNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWireless802xServerCommonNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWireless802xServerCommonNameCompletedEventHandler(object sender, GetWireless802xServerCommonNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWireless802xServerCommonNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWireless802xServerCommonNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessWPAPairwiseKeyCompletedEventHandler(object sender, SetWirelessWPAPairwiseKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessWPAPairwiseKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessWPAPairwiseKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessWPAPairwiseKeyCompletedEventHandler(object sender, GetWirelessWPAPairwiseKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessWPAPairwiseKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessWPAPairwiseKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EncryptionType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EncryptionType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessWPA2PairwiseKeyCompletedEventHandler(object sender, SetWirelessWPA2PairwiseKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessWPA2PairwiseKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessWPA2PairwiseKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessWPA2PairwiseKeyCompletedEventHandler(object sender, GetWirelessWPA2PairwiseKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessWPA2PairwiseKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessWPA2PairwiseKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EncryptionType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EncryptionType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWirelessEAPAuthenticationMethodCompletedEventHandler(object sender, SetWirelessEAPAuthenticationMethodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWirelessEAPAuthenticationMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWirelessEAPAuthenticationMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWirelessEAPAuthenticationMethodCompletedEventHandler(object sender, GetWirelessEAPAuthenticationMethodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWirelessEAPAuthenticationMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWirelessEAPAuthenticationMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EAPType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EAPType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetHostnameCompletedEventHandler(object sender, SetHostnameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetHostnameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetHostnameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetHostnameCompletedEventHandler(object sender, GetHostnameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHostnameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHostnameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSupportedDNSServerCountCompletedEventHandler(object sender, GetSupportedDNSServerCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSupportedDNSServerCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSupportedDNSServerCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetDNSServerCompletedEventHandler(object sender, SetDNSServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDNSServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDNSServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetDNSServerCompletedEventHandler(object sender, GetDNSServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDNSServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDNSServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSupportedDNSSuffixCountCompletedEventHandler(object sender, GetSupportedDNSSuffixCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSupportedDNSSuffixCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSupportedDNSSuffixCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetDNSSuffixCompletedEventHandler(object sender, SetDNSSuffixCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDNSSuffixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDNSSuffixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetDNSSuffixCompletedEventHandler(object sender, GetDNSSuffixCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDNSSuffixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDNSSuffixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSupportedSyslogServerCountCompletedEventHandler(object sender, GetSupportedSyslogServerCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSupportedSyslogServerCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSupportedSyslogServerCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetSyslogServerCompletedEventHandler(object sender, SetSyslogServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSyslogServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSyslogServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSyslogServerCompletedEventHandler(object sender, GetSyslogServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSyslogServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSyslogServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSupportedSNTPServerCountCompletedEventHandler(object sender, GetSupportedSNTPServerCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSupportedSNTPServerCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSupportedSNTPServerCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetSNTPServerCompletedEventHandler(object sender, SetSNTPServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSNTPServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSNTPServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSNTPServerCompletedEventHandler(object sender, GetSNTPServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSNTPServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSNTPServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetTimeZoneCompletedEventHandler(object sender, SetTimeZoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetTimeZoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetTimeZoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetTimeZoneCompletedEventHandler(object sender, GetTimeZoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTimeZoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTimeZoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetTimeZoneListCompletedEventHandler(object sender, GetTimeZoneListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTimeZoneListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTimeZoneListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetUTCTimeCompletedEventHandler(object sender, SetUTCTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUTCTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUTCTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetUTCTimeCompletedEventHandler(object sender, GetUTCTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUTCTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUTCTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int Hour {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int Minute {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int Second {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetSystemDateCompletedEventHandler(object sender, SetSystemDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSystemDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSystemDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSystemDateCompletedEventHandler(object sender, GetSystemDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSystemDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSystemDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int Month {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int Day {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int Year {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSupportedCIFSMountCountCompletedEventHandler(object sender, GetSupportedCIFSMountCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSupportedCIFSMountCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSupportedCIFSMountCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AddCIFSMountCompletedEventHandler(object sender, AddCIFSMountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCIFSMountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCIFSMountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void RemoveCIFSMountCompletedEventHandler(object sender, RemoveCIFSMountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveCIFSMountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveCIFSMountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetCIFSMountsCompletedEventHandler(object sender, GetCIFSMountsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCIFSMountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCIFSMountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetCIFSMountStatusCompletedEventHandler(object sender, GetCIFSMountStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCIFSMountStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCIFSMountStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LocalMountStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LocalMountStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetCIFSMountDetailsCompletedEventHandler(object sender, GetCIFSMountDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCIFSMountDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCIFSMountDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string RemoteShare {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string Username {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string Domain {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSupportedNFSMountCountCompletedEventHandler(object sender, GetSupportedNFSMountCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSupportedNFSMountCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSupportedNFSMountCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AddNFSMountCompletedEventHandler(object sender, AddNFSMountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddNFSMountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddNFSMountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void RemoveNFSMountCompletedEventHandler(object sender, RemoveNFSMountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveNFSMountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveNFSMountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetNFSMountsCompletedEventHandler(object sender, GetNFSMountsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNFSMountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNFSMountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetNFSMountStatusCompletedEventHandler(object sender, GetNFSMountStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNFSMountStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNFSMountStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LocalMountStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LocalMountStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetNFSMountDetailsCompletedEventHandler(object sender, GetNFSMountDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNFSMountDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNFSMountDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string RemotePath {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetAvalancheAccessEnabledCompletedEventHandler(object sender, SetAvalancheAccessEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAvalancheAccessEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAvalancheAccessEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetAvalancheAccessEnabledCompletedEventHandler(object sender, GetAvalancheAccessEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvalancheAccessEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvalancheAccessEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetAvalancheAgentNameCompletedEventHandler(object sender, SetAvalancheAgentNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAvalancheAgentNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAvalancheAgentNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetAvalancheAgentNameCompletedEventHandler(object sender, GetAvalancheAgentNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvalancheAgentNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvalancheAgentNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetSmartSystemsEnabledCompletedEventHandler(object sender, SetSmartSystemsEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSmartSystemsEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSmartSystemsEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSmartSystemsEnabledCompletedEventHandler(object sender, GetSmartSystemsEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSmartSystemsEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSmartSystemsEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetSmartSystemsServerNameCompletedEventHandler(object sender, SetSmartSystemsServerNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSmartSystemsServerNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSmartSystemsServerNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSmartSystemsServerNameCompletedEventHandler(object sender, GetSmartSystemsServerNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSmartSystemsServerNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSmartSystemsServerNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetSNMPEnabledCompletedEventHandler(object sender, SetSNMPEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSNMPEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSNMPEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSNMPEnabledCompletedEventHandler(object sender, GetSNMPEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSNMPEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSNMPEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetSNMPCommunityCompletedEventHandler(object sender, SetSNMPCommunityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSNMPCommunityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSNMPCommunityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSNMPCommunityCompletedEventHandler(object sender, GetSNMPCommunityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSNMPCommunityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSNMPCommunityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetSNMPTrapTargetCompletedEventHandler(object sender, SetSNMPTrapTargetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSNMPTrapTargetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSNMPTrapTargetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSNMPTrapTargetCompletedEventHandler(object sender, GetSNMPTrapTargetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSNMPTrapTargetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSNMPTrapTargetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetSNMPv3UsernameCompletedEventHandler(object sender, SetSNMPv3UsernameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSNMPv3UsernameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSNMPv3UsernameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSNMPv3UsernameCompletedEventHandler(object sender, GetSNMPv3UsernameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSNMPv3UsernameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSNMPv3UsernameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetSNMPv3PasswordCompletedEventHandler(object sender, SetSNMPv3PasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSNMPv3PasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSNMPv3PasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSNMPv3PasswordCompletedEventHandler(object sender, GetSNMPv3PasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSNMPv3PasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSNMPv3PasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetSNMPAuthenticationTypeCompletedEventHandler(object sender, SetSNMPAuthenticationTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSNMPAuthenticationTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSNMPAuthenticationTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSNMPAuthenticationTypeCompletedEventHandler(object sender, GetSNMPAuthenticationTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSNMPAuthenticationTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSNMPAuthenticationTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SNMPAuthenticationType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SNMPAuthenticationType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetSNMPPrivacyTypeCompletedEventHandler(object sender, SetSNMPPrivacyTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSNMPPrivacyTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSNMPPrivacyTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSNMPPrivacyTypeCompletedEventHandler(object sender, GetSNMPPrivacyTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSNMPPrivacyTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSNMPPrivacyTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SNMPPrivacyType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SNMPPrivacyType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetSSHServerEnabledCompletedEventHandler(object sender, SetSSHServerEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSSHServerEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSSHServerEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSSHServerEnabledCompletedEventHandler(object sender, GetSSHServerEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSSHServerEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSSHServerEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetFTPServerEnabledCompletedEventHandler(object sender, SetFTPServerEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetFTPServerEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetFTPServerEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetFTPServerEnabledCompletedEventHandler(object sender, GetFTPServerEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFTPServerEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFTPServerEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetTelnetServerEnabledCompletedEventHandler(object sender, SetTelnetServerEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetTelnetServerEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetTelnetServerEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetTelnetServerEnabledCompletedEventHandler(object sender, GetTelnetServerEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTelnetServerEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTelnetServerEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBonjourAdvertisementEnabledCompletedEventHandler(object sender, SetBonjourAdvertisementEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBonjourAdvertisementEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBonjourAdvertisementEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBonjourAdvertisementEnabledCompletedEventHandler(object sender, GetBonjourAdvertisementEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBonjourAdvertisementEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBonjourAdvertisementEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetUPnPDiscoveryEnabledCompletedEventHandler(object sender, SetUPnPDiscoveryEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUPnPDiscoveryEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUPnPDiscoveryEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetUPnPDiscoveryEnabledCompletedEventHandler(object sender, GetUPnPDiscoveryEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUPnPDiscoveryEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUPnPDiscoveryEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWebserverInsecureEnabledCompletedEventHandler(object sender, SetWebserverInsecureEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWebserverInsecureEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWebserverInsecureEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWebserverInsecureEnabledCompletedEventHandler(object sender, GetWebserverInsecureEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebserverInsecureEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebserverInsecureEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetWebserverSecureEnabledCompletedEventHandler(object sender, SetWebserverSecureEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWebserverSecureEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWebserverSecureEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetWebserverSecureEnabledCompletedEventHandler(object sender, GetWebserverSecureEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebserverSecureEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebserverSecureEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetDeviceWebServicesInsecureEnabledCompletedEventHandler(object sender, SetDeviceWebServicesInsecureEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDeviceWebServicesInsecureEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDeviceWebServicesInsecureEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetDeviceWebServicesInsecureEnabledCompletedEventHandler(object sender, GetDeviceWebServicesInsecureEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeviceWebServicesInsecureEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeviceWebServicesInsecureEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetDeviceWebServicesSecureEnabledCompletedEventHandler(object sender, SetDeviceWebServicesSecureEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDeviceWebServicesSecureEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDeviceWebServicesSecureEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetDeviceWebServicesSecureEnabledCompletedEventHandler(object sender, GetDeviceWebServicesSecureEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeviceWebServicesSecureEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeviceWebServicesSecureEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetCIFSServiceEnabledCompletedEventHandler(object sender, SetCIFSServiceEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCIFSServiceEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCIFSServiceEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetCIFSServiceEnabledCompletedEventHandler(object sender, GetCIFSServiceEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCIFSServiceEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCIFSServiceEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetCIFSServiceUsernameCompletedEventHandler(object sender, SetCIFSServiceUsernameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCIFSServiceUsernameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCIFSServiceUsernameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetCIFSServiceUsernameCompletedEventHandler(object sender, GetCIFSServiceUsernameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCIFSServiceUsernameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCIFSServiceUsernameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetCIFSServicePasswordCompletedEventHandler(object sender, SetCIFSServicePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCIFSServicePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCIFSServicePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetCIFSServicePasswordCompletedEventHandler(object sender, GetCIFSServicePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCIFSServicePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCIFSServicePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void EdgewareSetAutoStartCompletedEventHandler(object sender, EdgewareSetAutoStartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EdgewareSetAutoStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EdgewareSetAutoStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void EdgewareGetAutoStartCompletedEventHandler(object sender, EdgewareGetAutoStartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EdgewareGetAutoStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EdgewareGetAutoStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void EdgewareStartApplicationCompletedEventHandler(object sender, EdgewareStartApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EdgewareStartApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EdgewareStartApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void EdgewareStopApplicationCompletedEventHandler(object sender, EdgewareStopApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EdgewareStopApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EdgewareStopApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void EdgewareUninstallApplicationCompletedEventHandler(object sender, EdgewareUninstallApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EdgewareUninstallApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EdgewareUninstallApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void UserappUninstallApplicationCompletedEventHandler(object sender, UserappUninstallApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserappUninstallApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserappUninstallApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void EdgewareGetInstalledApplicationsCompletedEventHandler(object sender, EdgewareGetInstalledApplicationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EdgewareGetInstalledApplicationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EdgewareGetInstalledApplicationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void EdgewareGetApplicationStatusCompletedEventHandler(object sender, EdgewareGetApplicationStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EdgewareGetApplicationStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EdgewareGetApplicationStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApplicationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApplicationStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void EdgewareSetSyslogRedirectionCompletedEventHandler(object sender, EdgewareSetSyslogRedirectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EdgewareSetSyslogRedirectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EdgewareSetSyslogRedirectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void EdgewareGetSyslogRedirectionCompletedEventHandler(object sender, EdgewareGetSyslogRedirectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EdgewareGetSyslogRedirectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EdgewareGetSyslogRedirectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIExternalConnectionsEnabledCompletedEventHandler(object sender, SetBRIExternalConnectionsEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIExternalConnectionsEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIExternalConnectionsEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIExternalConnectionsEnabledCompletedEventHandler(object sender, GetBRIExternalConnectionsEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIExternalConnectionsEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIExternalConnectionsEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIListeningPortCompletedEventHandler(object sender, SetBRIListeningPortCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIListeningPortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIListeningPortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIListeningPortCompletedEventHandler(object sender, GetBRIListeningPortCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIListeningPortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIListeningPortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRILoggingEnabledCompletedEventHandler(object sender, SetBRILoggingEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRILoggingEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRILoggingEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRILoggingEnabledCompletedEventHandler(object sender, GetBRILoggingEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRILoggingEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRILoggingEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetLLRPSecureEnabledCompletedEventHandler(object sender, SetLLRPSecureEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetLLRPSecureEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetLLRPSecureEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetLLRPSecureEnabledCompletedEventHandler(object sender, GetLLRPSecureEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLLRPSecureEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLLRPSecureEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetLLRPInsecureEnabledCompletedEventHandler(object sender, SetLLRPInsecureEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetLLRPInsecureEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetLLRPInsecureEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetLLRPInsecureEnabledCompletedEventHandler(object sender, GetLLRPInsecureEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLLRPInsecureEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLLRPInsecureEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void LLRPTerminateClientCompletedEventHandler(object sender, LLRPTerminateClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LLRPTerminateClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LLRPTerminateClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIOverSerialEnabledCompletedEventHandler(object sender, SetBRIOverSerialEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIOverSerialEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIOverSerialEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIOverSerialEnabledCompletedEventHandler(object sender, GetBRIOverSerialEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIOverSerialEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIOverSerialEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRISerialBaudRateCompletedEventHandler(object sender, SetBRISerialBaudRateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRISerialBaudRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRISerialBaudRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRISerialBaudRateCompletedEventHandler(object sender, GetBRISerialBaudRateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRISerialBaudRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRISerialBaudRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BRISerialBaudRate Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BRISerialBaudRate)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeTagTypeEnabledCompletedEventHandler(object sender, SetBRIAttributeTagTypeEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeTagTypeEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeTagTypeEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeTagTypeEnabledCompletedEventHandler(object sender, GetBRIAttributeTagTypeEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeTagTypeEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeTagTypeEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeRDTRIESCompletedEventHandler(object sender, SetBRIAttributeRDTRIESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeRDTRIESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeRDTRIESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeRDTRIESCompletedEventHandler(object sender, GetBRIAttributeRDTRIESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeRDTRIESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeRDTRIESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeWRTRIESCompletedEventHandler(object sender, SetBRIAttributeWRTRIESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeWRTRIESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeWRTRIESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeWRTRIESCompletedEventHandler(object sender, GetBRIAttributeWRTRIESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeWRTRIESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeWRTRIESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeLOCKTRIESCompletedEventHandler(object sender, SetBRIAttributeLOCKTRIESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeLOCKTRIESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeLOCKTRIESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeLOCKTRIESCompletedEventHandler(object sender, GetBRIAttributeLOCKTRIESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeLOCKTRIESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeLOCKTRIESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeFIELDSEPCompletedEventHandler(object sender, SetBRIAttributeFIELDSEPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeFIELDSEPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeFIELDSEPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeFIELDSEPCompletedEventHandler(object sender, GetBRIAttributeFIELDSEPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeFIELDSEPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeFIELDSEPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BRIFieldSeparator Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BRIFieldSeparator)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeIDREPORTCompletedEventHandler(object sender, SetBRIAttributeIDREPORTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeIDREPORTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeIDREPORTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeIDREPORTCompletedEventHandler(object sender, GetBRIAttributeIDREPORTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeIDREPORTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeIDREPORTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeNOTAGREPORTCompletedEventHandler(object sender, SetBRIAttributeNOTAGREPORTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeNOTAGREPORTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeNOTAGREPORTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeNOTAGREPORTCompletedEventHandler(object sender, GetBRIAttributeNOTAGREPORTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeNOTAGREPORTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeNOTAGREPORTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeRPTTIMEOUTCompletedEventHandler(object sender, SetBRIAttributeRPTTIMEOUTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeRPTTIMEOUTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeRPTTIMEOUTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeRPTTIMEOUTCompletedEventHandler(object sender, GetBRIAttributeRPTTIMEOUTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeRPTTIMEOUTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeRPTTIMEOUTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeSELECTTRIESCompletedEventHandler(object sender, SetBRIAttributeSELECTTRIESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeSELECTTRIESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeSELECTTRIESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeSELECTTRIESCompletedEventHandler(object sender, GetBRIAttributeSELECTTRIESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeSELECTTRIESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeSELECTTRIESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeUNSELECTTRIESCompletedEventHandler(object sender, SetBRIAttributeUNSELECTTRIESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeUNSELECTTRIESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeUNSELECTTRIESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeUNSELECTTRIESCompletedEventHandler(object sender, GetBRIAttributeUNSELECTTRIESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeUNSELECTTRIESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeUNSELECTTRIESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeINITIALQCompletedEventHandler(object sender, SetBRIAttributeINITIALQCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeINITIALQCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeINITIALQCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeINITIALQCompletedEventHandler(object sender, GetBRIAttributeINITIALQCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeINITIALQCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeINITIALQCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeTIMEOUTMODECompletedEventHandler(object sender, SetBRIAttributeTIMEOUTMODECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeTIMEOUTMODECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeTIMEOUTMODECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeTIMEOUTMODECompletedEventHandler(object sender, GetBRIAttributeTIMEOUTMODECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeTIMEOUTMODECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeTIMEOUTMODECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeINITTRIESCompletedEventHandler(object sender, SetBRIAttributeINITTRIESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeINITTRIESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeINITTRIESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeINITTRIESCompletedEventHandler(object sender, GetBRIAttributeINITTRIESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeINITTRIESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeINITTRIESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeIDTRIESCompletedEventHandler(object sender, SetBRIAttributeIDTRIESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeIDTRIESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeIDTRIESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeIDTRIESCompletedEventHandler(object sender, GetBRIAttributeIDTRIESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeIDTRIESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeIDTRIESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeANTTRIESCompletedEventHandler(object sender, SetBRIAttributeANTTRIESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeANTTRIESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeANTTRIESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeANTTRIESCompletedEventHandler(object sender, GetBRIAttributeANTTRIESCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeANTTRIESCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeANTTRIESCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeIDTIMEOUTCompletedEventHandler(object sender, SetBRIAttributeIDTIMEOUTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeIDTIMEOUTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeIDTIMEOUTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeIDTIMEOUTCompletedEventHandler(object sender, GetBRIAttributeIDTIMEOUTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeIDTIMEOUTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeIDTIMEOUTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeANTTIMEOUTCompletedEventHandler(object sender, SetBRIAttributeANTTIMEOUTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeANTTIMEOUTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeANTTIMEOUTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeANTTIMEOUTCompletedEventHandler(object sender, GetBRIAttributeANTTIMEOUTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeANTTIMEOUTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeANTTIMEOUTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeDENSEREADERMODECompletedEventHandler(object sender, SetBRIAttributeDENSEREADERMODECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeDENSEREADERMODECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeDENSEREADERMODECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeDENSEREADERMODECompletedEventHandler(object sender, GetBRIAttributeDENSEREADERMODECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeDENSEREADERMODECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeDENSEREADERMODECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeEPCC1G2AdvancedModeCompletedEventHandler(object sender, SetBRIAttributeEPCC1G2AdvancedModeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeEPCC1G2AdvancedModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeEPCC1G2AdvancedModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeEPCC1G2AdvancedModeCompletedEventHandler(object sender, GetBRIAttributeEPCC1G2AdvancedModeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeEPCC1G2AdvancedModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeEPCC1G2AdvancedModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeEPCC1G2PARMSCompletedEventHandler(object sender, SetBRIAttributeEPCC1G2PARMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeEPCC1G2PARMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeEPCC1G2PARMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeEPCC1G2PARMSCompletedEventHandler(object sender, GetBRIAttributeEPCC1G2PARMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeEPCC1G2PARMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeEPCC1G2PARMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeEPCC1G2PARMSListCompletedEventHandler(object sender, GetBRIAttributeEPCC1G2PARMSListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeEPCC1G2PARMSListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeEPCC1G2PARMSListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeLBTSCANENABLECompletedEventHandler(object sender, SetBRIAttributeLBTSCANENABLECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeLBTSCANENABLECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeLBTSCANENABLECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeLBTSCANENABLECompletedEventHandler(object sender, GetBRIAttributeLBTSCANENABLECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeLBTSCANENABLECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeLBTSCANENABLECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeLBTCHANNELCompletedEventHandler(object sender, SetBRIAttributeLBTCHANNELCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeLBTCHANNELCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeLBTCHANNELCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeLBTCHANNELCompletedEventHandler(object sender, GetBRIAttributeLBTCHANNELCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeLBTCHANNELCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeLBTCHANNELCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeSESSIONCompletedEventHandler(object sender, SetBRIAttributeSESSIONCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeSESSIONCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeSESSIONCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeSESSIONCompletedEventHandler(object sender, GetBRIAttributeSESSIONCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeSESSIONCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeSESSIONCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIPhysicalAntennaCountCompletedEventHandler(object sender, GetBRIPhysicalAntennaCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIPhysicalAntennaCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIPhysicalAntennaCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeAntennaFieldStrengthCompletedEventHandler(object sender, SetBRIAttributeAntennaFieldStrengthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeAntennaFieldStrengthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeAntennaFieldStrengthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeAntennaFieldStrengthCompletedEventHandler(object sender, GetBRIAttributeAntennaFieldStrengthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeAntennaFieldStrengthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeAntennaFieldStrengthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetBRIAttributeAntennaSequenceCompletedEventHandler(object sender, SetBRIAttributeAntennaSequenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBRIAttributeAntennaSequenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBRIAttributeAntennaSequenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBRIAttributeAntennaSequenceCompletedEventHandler(object sender, GetBRIAttributeAntennaSequenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBRIAttributeAntennaSequenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBRIAttributeAntennaSequenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void PrepareFirmwareInstallationCompletedEventHandler(object sender, PrepareFirmwareInstallationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrepareFirmwareInstallationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrepareFirmwareInstallationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InstallFirmwareCompletedEventHandler(object sender, InstallFirmwareCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallFirmwareCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InstallFirmwareCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void TransferFirmwareCompletedEventHandler(object sender, TransferFirmwareCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferFirmwareCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransferFirmwareCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InstallEdgewareApplicationCompletedEventHandler(object sender, InstallEdgewareApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallEdgewareApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InstallEdgewareApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InstallUserApplicationCompletedEventHandler(object sender, InstallUserApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallUserApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InstallUserApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void TransferFileCompletedEventHandler(object sender, TransferFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransferFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void InstallCertificateCompletedEventHandler(object sender, InstallCertificateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InstallCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void UninstallCertificateCompletedEventHandler(object sender, UninstallCertificateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UninstallCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UninstallCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetUsernameCompletedEventHandler(object sender, SetUsernameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUsernameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUsernameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetUsernameCompletedEventHandler(object sender, GetUsernameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsernameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsernameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetPasswordCompletedEventHandler(object sender, SetPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetPasswordCompletedEventHandler(object sender, GetPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetReadonlyPasswordCompletedEventHandler(object sender, SetReadonlyPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetReadonlyPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetReadonlyPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetReadonlyPasswordCompletedEventHandler(object sender, GetReadonlyPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReadonlyPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReadonlyPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetRadiusEnabledCompletedEventHandler(object sender, SetRadiusEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRadiusEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRadiusEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetRadiusEnabledCompletedEventHandler(object sender, GetRadiusEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRadiusEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRadiusEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetRadiusServerAddressCompletedEventHandler(object sender, SetRadiusServerAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRadiusServerAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRadiusServerAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetRadiusServerAddressCompletedEventHandler(object sender, GetRadiusServerAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRadiusServerAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRadiusServerAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetRadiusServerSecretCompletedEventHandler(object sender, SetRadiusServerSecretCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRadiusServerSecretCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRadiusServerSecretCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetRadiusServerSecretCompletedEventHandler(object sender, GetRadiusServerSecretCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRadiusServerSecretCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRadiusServerSecretCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SetRadiusServerPortCompletedEventHandler(object sender, SetRadiusServerPortCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetRadiusServerPortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetRadiusServerPortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetRadiusServerPortCompletedEventHandler(object sender, GetRadiusServerPortCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRadiusServerPortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRadiusServerPortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591